<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MccDaq</name>
    </assembly>
    <members>
        <member name="T:MccDaq.Range">
            <summary>
            Specifies the set of ranges for A/D and D/A operations.
            </summary>
            <lastupdated>2/20/2006 4:03:54 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.NotUsed">
            <summary>
            No range is specified.
            </summary>
            <lastupdated>11/13/2006 9:42:10 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip5Volts">
            <summary>
            The range is ±5.0 V.
            </summary>
            <lastupdated>2/20/2006 4:06:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip10Volts">
            <summary>
            The range is ±10 V.
            </summary>
            <lastupdated>2/20/2006 4:05:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip2Pt5Volts">
            <summary>
            The range is ±2.5 V.
            </summary>
            <lastupdated>2/20/2006 4:06:16 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip1Pt25Volts">
            <summary>
            The range is ±1.25 V.
            </summary>
            <lastupdated>2/20/2006 4:05:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip1Volts">
            <summary>
            The range is ±1.0 V.
            </summary>
            <lastupdated>2/20/2006 4:05:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt625Volts">
            <summary>
            The range is ±0.625 V.
            </summary>
            <lastupdated>2/20/2006 4:07:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt5Volts">
            <summary>
            The range is ±0.5 V.
            </summary>
            <lastupdated>2/20/2006 4:07:39 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt1Volts">
            <summary>
            The range is ±0.1 V.
            </summary>
            <lastupdated>2/20/2006 4:07:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt05Volts">
            <summary>
            The range is ±0.05 V.
            </summary>
            <lastupdated>2/20/2006 4:07:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt01Volts">
            <summary>
            The range is ±0.01 V.
            </summary>
            <lastupdated>11/13/2006 5:05:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt005Volts">
            <summary>
            The range is ±0.005 V.
            </summary>
            <lastupdated>2/20/2006 4:06:49 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip1Pt67Volts">
            <summary>
            The range is ±1.67 V.
            </summary>
            <lastupdated>2/20/2006 4:05:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt25Volts">
            <summary>
            The range is ±0.25 V.
            </summary>
            <lastupdated>2/20/2006 4:07:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt2Volts">
            <summary>
            The range is ±0.2 V.
            </summary>
            <lastupdated>2/20/2006 4:07:34 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip2Volts">
            <summary>
            The range is ±2.0 V.
            </summary>
            <lastupdated>2/20/2006 4:06:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip20Volts">
            <summary>
            The range is ±20.0 V.
            </summary>
            <lastupdated>2/20/2006 4:06:02 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Bip4Volts">
            <summary>
            The range is ±4.0 V.
            </summary>
            <lastupdated>2/20/2006 4:06:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt312Volts">
            <summary>
            The range is ±0.3125 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.BipPt156Volts">
            <summary>
            The range is ±0.15625 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.BipPt078Volts">
            <summary>
            The range is ±0.078125 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.Bip60Volts">
            <summary>
            The range is ±60.0 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.Bip15Volts">
            <summary>
            The range is ±15.0 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.BipPt125Volts">
            <summary>
            The range is ±0.125 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.Bip30Volts">
            <summary>
            The range is ±0.125 V.
            </summary>
        </member>
        <member name="F:MccDaq.Range.Uni10Volts">
            <summary>
            The range is 0 - 10 volts.
            </summary>
            <lastupdated>2/20/2006 4:10:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>   
        </member>
        <member name="F:MccDaq.Range.Uni5Volts">
            <summary>
            The range is 0 - 5.0 volts.
            </summary>
            <lastupdated>2/20/2006 4:12:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni2Pt5Volts">
            <summary>
            The range is 0 - 2.5 volts.
            </summary>
            <lastupdated>2/20/2006 4:11:33 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni2Volts">
            <summary>
            The range is 0 - 2.0 volts.
            </summary>
            <lastupdated>2/20/2006 4:11:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni1Pt25Volts">
            <summary>
            The range is 0 - 1.25 volts.
            </summary>
            <lastupdated>2/20/2006 4:10:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni1Volts">
            <summary>
            The range is 0 - 1.0 volt.
            </summary>
            <lastupdated>2/20/2006 4:11:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt1Volts">
            <summary>
            The range is 0 - 0.1 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:39 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt01Volts">
            <summary>
            The range is 0 - 0.01 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt02Volts">
            <summary>
            The range is 0 - 0.02 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni1Pt67Volts">
            <summary>
            The range is 0 - 1.67 volts.
            </summary>
            <lastupdated>2/20/2006 4:10:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt5Volts">
            <summary>
            The range is 0 - 0.5 volt.
            </summary>
            <lastupdated>2/20/2006 4:14:03 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt25Volts">
            <summary>
            The range is 0 - 0.25 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt2Volts">
            <summary>
            The range is 0 - 0.2 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.UniPt05Volts">
            <summary>
            The range is 0 - 0.05 volt.
            </summary>
            <lastupdated>2/20/2006 4:13:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Uni4Volts">
            <summary>
            The range is 0 - 4.0 volts.
            </summary>
            <lastupdated>3/27/2006 1:38:19 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Ma4To20">
            <summary>
            The range is 4 to 20 mA.
            </summary>
            <lastupdated>2/20/2006 4:09:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Ma2To10">
            <summary>
            The range is 2 to 10 mA.
            </summary>
            <lastupdated>2/20/2006 4:09:03 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Ma1To5">
            <summary>
            The range is 1 to 5 mA.
            </summary>
            <lastupdated>2/20/2006 4:08:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.MaPt5To2Pt5">
            <summary>
            The range is 0.5 to 2.5 mA.
            </summary>
            <lastupdated>2/20/2006 4:09:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.Ma0To20">
            <summary>
            The range is 0 to 20 mA.
            </summary>
            <lastupdated>2/20/2006 4:08:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt025Amps">
            <summary>
            The range is -0.025 to 0.02520 Amps.
            </summary>
            <lastupdated>2/20/2006 4:08:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Range.BipPt025VoltsPerVolt">
            <summary>
            The range is ±0.025 V/V.
            </summary>
            <lastupdated>2/20/2006 4:07:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.FunctionType">
            <summary>
            Specifies all of the valid function types to use with data acquisition functions.
            </summary>
            <lastupdated>2/20/2006 2:33:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.AiFunction">
            <summary>
            The function type is analog input.
            </summary>
            <lastupdated>2/20/2006 3:38:33 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.AoFunction">
            <summary>
            The function type is analog output.
            </summary>
            <lastupdated>2/20/2006 3:38:45 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.DiFunction">
            <summary>
            The function type is digital input.
            </summary>
            <lastupdated>2/20/2006 3:39:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.DoFunction">
            <summary>
            The function type is digital output.
            </summary>
            <lastupdated>2/20/2006 3:39:17 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.CtrFunction">
            <summary>
            The function type is a counter function.
            </summary>
            <lastupdated>2/20/2006 3:38:57 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.DaqiFunction">
            <summary>
            The function type is synchronous input.
            </summary>
            <lastupdated>11/13/2006 9:39:32 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FunctionType.DaqoFunction">
            <summary>
            The function type is synchronous output.
            </summary>
            <lastupdated>11/13/2006 9:40:06 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterControl">
            <summary>
            Specifies the possible state of each counter channel.
            </summary>
            <lastupdated>2/17/2006 6:12:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterControl.Disabled">
            <summary>
            Disables the counter channel.
            </summary>
            <lastupdated>3/24/2006 2:37:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterControl.Enabled">
            <summary>
            Enables the counter channel
            </summary>
            <lastupdated>3/24/2006 2:38:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.OptionState">
            <summary>
            Specifies whether to enable or disable an option.
            </summary>
            <lastupdated>3/8/2006 10:25:12 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.OptionState.Disabled">
            <summary>
            The option is disabled.
            </summary>
            <lastupdated>2/20/2006 3:48:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.OptionState.Enabled">
            <summary>
            The option is enabled.
            </summary>
            <lastupdated>2/20/2006 3:48:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CompareValue">
            <summary>
            Specifies the options for comparing values when configuring a 9513 counter.
            </summary>
            <remarks>
            Refer to the 9513 data sheet for a detailed description of the 9513 counter/timer device.
            </remarks>
            <lastupdated>2/17/2006 4:45:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CompareValue.Disabled">
            <summary>
            The option for comparing values is Disabled (0x0).
            </summary>
            <lastupdated>2/20/2006 2:58:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CompareValue.Enabled">
            <summary>
            The option for comparing values is Enabled (0x1).
            </summary>
            <lastupdated>2/20/2006 2:58:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TimeOfDay">
            <summary>
            Specifies all time of day options for initializing a 9513 counter.
            </summary>
            <lastupdated>2/20/2006 6:21:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeOfDay.Disabled">
            <summary>
            The time of day is disabled.
            </summary>
            <lastupdated>2/20/2006 6:22:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeOfDay.One">
            <summary>
            The time of day is enabled/5 Input.
            </summary>
            <lastupdated>2/20/2006 6:23:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeOfDay.Two">
            <summary>
            The time of day is enabled/6 Input.
            </summary>
            <lastupdated>2/20/2006 6:23:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeOfDay.Three">
            <summary>
            The time of day is enabled/10 Input.
            </summary>
            <lastupdated>2/20/2006 6:23:28 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ErrorReporting">
            <summary>
            Defines all options for the library to print error messages on the screen.
            </summary>
            <lastupdated>10/17/2006 6:55:59 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorReporting.DontPrint">
            <summary>
            Errors do not not generate a message to the screen.
            </summary>
            <comment>
            	<remarks>
            Your program must check the returned error code after each library call to determine if an error occurred.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:16:32 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorReporting.PrintWarnings">
            <summary>
            Only warning errors will generate a message to the screen.
            </summary>
            <comment>
            	<remarks>
            Your program must check the returned error code to determine if a fatal error occurred.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:16:52 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorReporting.PrintFatal">
            <summary>
            Only fatal errors will generate a message to the screen.
            </summary>
            <comment>
            	<remarks>
            Your program must check the returned error code to determine if a warning error occurred.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:16:43 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorReporting.PrintAll">
            <summary>
            All errors will generate a message to the screen.
            </summary>
            <lastupdated>2/20/2006 3:33:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ErrorHandling">
            <summary>
            Defines all options for handling errors.
            </summary>
            <lastupdated>2/20/2006 11:42:50 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorHandling.DontStop">
            <summary>
            The program continues to execute when an error occurs.
            </summary>
            <lastupdated>2/20/2006 3:31:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorHandling.StopFatal">
            <summary>
            The program stops when a "fatal" error occurs.
            </summary>
            <lastupdated>2/20/2006 3:31:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorHandling.StopAll">
            <summary>
            The program stops when an error occurs.
            </summary>
            <comment>
            	<remarks>
            If you are running in an Integrated Development Environment (IDE) when an error occurs, the environment may be shut down along with the program. If your IDE behaves this way, set <see cref="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)"/> method to <see cref="F:MccDaq.ErrorHandling.DontStop"/>. You can check error codes to determine the cause of the error.
            </remarks>
            	<see cref="F:MccDaq.ErrorHandling.DontStop"/>
            </comment>
            <lastupdated>12/31/2010 10:16:13 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DigitalPortDirection">
            <summary>
            Specifies the direction of a digital I/O port.
            </summary>
            <lastupdated>2/20/2006 10:56:20 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortDirection.DigitalOut">
            <summary>
            The direction of a digital I/O port is output.
            </summary>
            <lastupdated>2/20/2006 3:23:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortDirection.DigitalIn">
            <summary>
            The direction of a digital I/O port is input.
            </summary>
            <lastupdated>2/20/2006 3:23:42 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DTMode">
            <summary>
            Specifies all modes to transfer to/from a memory board.
            </summary>
            <lastupdated>2/20/2006 11:36:15 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DTMode.DTIn">
            <summary>
            The data is transferred from an A/D board to a memory board.
            </summary>
            <lastupdated>2/20/2006 3:31:08 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DTMode.DTOut">
            <summary>
            The data is transferred from a memory board to a D/A board.
            </summary>
            <lastupdated>2/20/2006 3:31:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TempScale">
            <summary>
            Specifies the options used by the API when setting or getting preferences, and when reading and converting data from binary files.
            </summary>
            <lastupdated>2/20/2006 6:13:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TempScale.Celsius">
            <summary>
            Analog temperature data is collected and stored as degrees Celsius.
            </summary>
            <lastupdated>3/9/2006 11:59:09 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TempScale.Fahrenheit">
            <summary>
            Analog temperature data is collected and stored as degrees Fahrenheit.
            </summary>
            <lastupdated>3/9/2006 11:59:19 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TempScale.Kelvin">
            <summary>
            Analog temperature data is collected and stored as Kelvin.
            </summary>
            <lastupdated>10/18/2006 2:16:16 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TempScale.Volts">
            <exclude/>
            <summary>
            For internal use only.
            </summary>
            <lastupdated>4/6/2006 2:33:08 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TempScale.NoScale">
            <exclude/>
            <summary>
            For internal use only.
            </summary>
            <lastupdated>4/6/2006 2:32:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DigitalPortType">
            <summary>
            Specifies the names of the digital port types.
            </summary>
            <lastupdated>4/6/2006 10:32:37 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.AuxPort">
            <summary>
            Specifies an AuxPort digital port.
            </summary>
            <lastupdated>3/24/2006 2:43:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FirstPortA">
            <summary>
            Specifies a FirstPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FirstPortB">
            <summary>
            Specifies a FirstPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:30 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FirstPortC">
            <summary>
            Specifies a FirstPortC digital port.
            </summary>
            <lastupdated>3/24/2006 2:52:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FirstPortCL">
            <summary>
            Specifies a FirstPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:52:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FirstPortCH">
            <summary>
            Specifies a FirstPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:26 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SecondPortA">
            <summary>
            Specifies a SecondPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:53:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SecondPortB">
            <summary>
            Specifies a SecondPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:53:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SecondPortCL">
            <summary>
            Specifies a SecondPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:53:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SecondPortCH">
            <summary>
            Specifies a SecondPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:53:44 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.ThirdPortA">
            <summary>
            Specifies a ThirdPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.ThirdPortB">
            <summary>
            Specifies a ThirdPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:38 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.ThirdPortCL">
            <summary>
            Specifies a ThirdPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:56:35 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.ThirdPortCH">
            <summary>
            Specifies a ThirdPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:43 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FourthPortA">
            <summary>
            Specifies a FourthPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:52:27 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FourthPortB">
            <summary>
            Specifies a FourthPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:52:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FourthPortCL">
            <summary>
            Specifies a FourthPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:53:09 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FourthPortCH">
            <summary>
            Specifies a FourthPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:52:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FifthPortA">
            <summary>
            Specifies a FifthPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:44:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FifthPortB">
            <summary>
            Specifies a FifthPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FifthPortCL">
            <summary>
            Specifies a FifthPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.FifthPortCH">
            <summary>
            Specifies a FifthPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:51:42 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SixthPortA">
            <summary>
            Specifies a SixthPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:54:51 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SixthPortB">
            <summary>
            Specifies a SixthPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:00 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SixthPortCL">
            <summary>
            Specifies a SixthPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:16 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SixthPortCH">
            <summary>
            Specifies a SixthPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:55:08 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SeventhPortA">
            <summary>
            Specifies a SeventhPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:54:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SeventhPortB">
            <summary>
            Specifies a SeventhPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:54:19 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SeventhPortCL">
            <summary>
            Specifies a SeventhPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:54:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.SeventhPortCH">
            <summary>
            Specifies a SeventhPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:54:27 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.EighthPortA">
            <summary>
            Specifies an EightPortA digital port.
            </summary>
            <lastupdated>3/24/2006 2:44:05 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.EighthPortB">
            <summary>
            Specifies an EightPortB digital port.
            </summary>
            <lastupdated>3/24/2006 2:44:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.EighthPortCL">
            <summary>
            Specifies an EightPortCL digital port.
            </summary>
            <lastupdated>3/24/2006 2:44:32 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalPortType.EighthPortCH">
            <summary>
            Specifies an EightPortCH digital port.
            </summary>
            <lastupdated>3/24/2006 2:44:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.PrimaryDigitalPortType">
            <summary>
            Specifies all of the digital port types for bit level input/output methods.
            </summary>
            <lastupdated>2/20/2006 3:51:34 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.PrimaryDigitalPortType.AuxPort">
            <summary>
            AuxPort I/O for bit-level input/output methods.
            </summary>
            <lastupdated>3/27/2006 1:37:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.PrimaryDigitalPortType.FirstPortA">
            <summary>
            FirstPortA I/O for bit-level input/output methods.
            </summary>
            <lastupdated>3/27/2006 1:36:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.PrimaryBitConfigPortType">
            <summary>
            Specifies the digital port types for bit level configuration.
            </summary>
            <lastupdated>2/20/2006 3:49:54 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.PrimaryBitConfigPortType.AuxPort">
            <summary>
            AuxPort is configured for bit-level configuration.
            </summary>
            <lastupdated>2/20/2006 3:52:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DigitalLogicState">
            <summary>
            Specifies the available digital logic states.
            </summary>
            <lastupdated>2/20/2006 10:49:57 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalLogicState.Low">
            <summary>
            The digital logic state is logic low (0).
            </summary>
            <lastupdated>3/24/2006 2:42:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DigitalLogicState.High">
            <summary>
            The digital logic state is logic high (1).
            </summary>
            <lastupdated>3/24/2006 2:41:07 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CtrlOutput">
            <summary>
            Specifies how to link counter 1 with counter 2 on a 8536 counter. 
            </summary>
            <lastupdated>11/22/2006 2:37:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CtrlOutput.NotLinked">
            <summary>
            Counter 1 is not connected to any other counters inputs.
            </summary>
            <lastupdated>2/20/2006 10:24:04 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CtrlOutput.GateCtr2">
            <summary>
            The output of counter 1 is connected to the GATE of counter 2.
            </summary>
            <lastupdated>2/20/2006 3:21:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CtrlOutput.TrigCtr2">
            <summary>
            The output of counter 1 is connected to the trigger of counter 2.
            </summary>
            <lastupdated>2/20/2006 3:22:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CtrlOutput.InCtr2">
            <summary>
            The output of counter 1 is connected to the counter 2 clock input.
            </summary>
            <lastupdated>2/20/2006 3:21:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.C8254Mode">
            <summary>
            Specifies the operating mode for an 8254 counter.
            </summary>
            <remarks>
            Refer to the 8254 data sheet for a detailed description of the 8254 counter/timer device.
            </remarks>
            <lastupdated>2/17/2006 4:33:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.HighOnLastCount">
            <summary>
            The output of the counter (OUT N) transitions from low to high on the terminal count, and remains high until reset.
            </summary>
            <lastupdated>2/20/2006 2:55:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.OneShot">
            <summary>
            The output of the counter (OUT N) transitions from high to low on rising edge of GATE N, then back to high on the terminal count.
            </summary>
            <lastupdated>2/20/2006 2:55:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.RateGenerator">
            <summary>
            The output of the counter (OUT N) pulses low for one clock cycle on the terminal count, reloads the counter, and recycles.
            </summary>
            <lastupdated>2/20/2006 2:55:52 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.SquareWave">
            <summary>
            The output of the counter (OUT N) is high for count less than 1/2 terminal count, then low until terminal count, whereupon it recycles. This mode generates a square wave
            </summary>
            <lastupdated>2/20/2006 2:56:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.SoftwareStrobe">
            <summary>
            The output of the counter (OUT N) pulses low for one clock cycle on the terminal count. Count starts after the counter is loaded.
            </summary>
            <lastupdated>2/20/2006 2:56:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8254Mode.HardwareStrobe">
            <summary>
            The output of the counter (OUT N) pulses low for one clock cycle on the terminal count. Count starts on the rising edge at GATE N input
            </summary>
            <lastupdated>2/20/2006 2:55:20 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.Reload">
            <summary>
            Specifies the options for reloading the 9513 counter when in recycle mode.
            </summary>
            <lastupdated>3/27/2006 2:51:52 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Reload.LoadReg">
            <summary>
            The counter is reloaded from the Load register.
            </summary>
            <lastupdated>3/9/2006 11:54:54 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Reload.LoadAndHoldReg">
            <summary>
            The count is alternately reloaded from the Load or Hold register.
            </summary>
            <comment>
            	<remarks>
            When in mode X, the count is reloaded from the Load.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:22:45 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.RecycleMode">
            <summary>
            Specifies the recycle mode options for 9513 and 8536 counters.
            </summary>
            <lastupdated>2/20/2006 4:14:37 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.RecycleMode.OneTime">
            <summary>
            The count is performed once.
            </summary>
            <lastupdated>2/20/2006 4:17:49 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.RecycleMode.Recycle">
            <summary>
            The counter will automatically reload to the starting count every time it reaches 0, then continue counting.
            </summary>
            <lastupdated>2/20/2006 4:16:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.BCDMode">
            <summary>
            Specifies the counting format options in which a counter may operate. Only used for Measurement Computing devices with 9513 counters.
            </summary>
            <lastupdated>3/9/2006 11:47:50 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.BCDMode.Disabled">
            <summary>
            The counter operates in a binary count format.
            </summary>
            <lastupdated>2/20/2006 2:54:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.BCDMode.Enabled">
            <summary>
            The counter operates in a Binary Coded Decimal count format.
            </summary>
            <lastupdated>2/20/2006 2:55:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CountDirection">
            <summary>
            Specifies the counting direction of a 9513 counting device.
            </summary>
            <lastupdated>2/17/2006 5:57:52 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountDirection.CountDown">
            <summary>
            The 9513 device counts down.
            </summary>
            <lastupdated>2/20/2006 3:01:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountDirection.CountUp">
            <summary>
            The 9513 device counts up.
            </summary>
            <lastupdated>2/20/2006 3:01:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CountEdge">
            <summary>
            Specifies the edge used for counting by a 9513 counter/timer device.
            </summary>
            <remarks>
            CountEdge is referred to as "Source Edge" in the 9513 datasheet. Refer to the 9513 data sheet for a detailed description of the 9513 counter/timer device.
            </remarks>
            <lastupdated>12/31/2010 10:01:59 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountEdge.PositiveEdge">
            <summary>
            The 9513 counts on the rising edge.
            </summary>
            <lastupdated>2/20/2006 3:02:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountEdge.NegativeEdge">
            <summary>
            The 9513 counts on the falling edge.
            </summary>
            <lastupdated>2/20/2006 3:01:58 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.C9513OutputControl">
            <summary>
            Specifies the output types from a 9513 counter.
            </summary>
            <remarks>
            Refer to the 9513 data sheet for a detailed description of the 9513 counter/timer device.
            </remarks>
            <lastupdated>2/17/2006 4:33:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C9513OutputControl.AlwaysLow">
            <summary>
            The output type is inactive, output low.
            </summary>
            <lastupdated>2/20/2006 2:57:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C9513OutputControl.HighPulseOnTc">
            <summary>
            The output type is High Pulse on Terminal Count.
            </summary>
            <lastupdated>2/20/2006 2:57:28 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C9513OutputControl.ToggleOnTc">
            <summary>
            The output type is TC toggled.
            </summary>
            <lastupdated>2/20/2006 2:57:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C9513OutputControl.Disconnected">
            <summary>
            The output type is inactive, output high impedance.
            </summary>
            <lastupdated>2/20/2006 2:57:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C9513OutputControl.LowPulseOnTc">
            <summary>
            The output type is active low, terminal count pulse.
            </summary>
            <lastupdated>2/20/2006 2:57:34 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.C8536OutputControl">
            <summary>
            Specifies the action of the output signal from an 8536 counter.
            </summary>
            <lastupdated>2/17/2006 4:26:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536OutputControl.HighPulseOnTc">
            <summary>
            The output signal transitions from low-to-high for one clock pulse on terminal count.
            </summary>
            <lastupdated>3/6/2006 4:19:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536OutputControl.ToggleOnTc">
            <summary>
            The output signal changes state on the terminal count.
            </summary>
            <lastupdated>3/6/2006 4:18:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536OutputControl.HighUntilTc">
            <summary>
            The output signal transitions to high at the start of counting, and then goes low on the terminal count.
            </summary>
            <lastupdated>3/6/2006 4:18:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.C8536TriggerType">
            <summary>
            Sets the type of trigger used on an 8536 counter.
            </summary>
            <lastupdated>10/18/2006 3:23:05 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536TriggerType.HWStartTrig">
            <summary>
            The first trigger on the Z8254 counter's trigger input starts the loading of the initial count. Counting proceeds from the initial count.
            </summary>
            <lastupdated>10/18/2006 3:54:19 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536TriggerType.HWRetrig">
            <summary>
            Every trigger on the counter's trigger input starts the loading of the initial count. Counting proceeds from the initial count.
            </summary>
            <lastupdated>10/18/2006 3:54:36 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.C8536TriggerType.SWStartTrig">
            <summary>
            The <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/>  method starts the loading of the initial count. Counting proceeds from the initial count.
            </summary>
            <lastupdated>10/18/2006 3:55:32 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterSource">
            <summary>
            Specifies the counter input source of a 9513 counter.
            </summary>
            <lastupdated>2/20/2006 9:11:58 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.TcPrevCtr">
            <summary>
            The source to count from is the terminal count of the previous counter (TCN &#8211; 1).
            </summary>
            <lastupdated>2/20/2006 3:19:18 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.CtrInput1">
            <summary>
            The source to count from is Counter Input 1 (SRC 1).
            </summary>
            <lastupdated>2/20/2006 3:17:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.CtrInput2">
            <summary>
            The source to count from is Counter Input 2 (SRC 2).
            </summary>
            <lastupdated>2/20/2006 3:17:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.CtrInput3">
            <summary>
            The source to count from is Counter Input 3 (SRC 3).
            </summary>
            <lastupdated>2/20/2006 3:17:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.CtrInput4">
            <summary>
            The source to count from is Counter Input 4 (SRC 4).
            </summary>
            <lastupdated>2/20/2006 3:17:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.CtrInput5">
            <summary>
            The source to count from is Counter Input 5 (SRC 5).
            </summary>
            <lastupdated>2/20/2006 3:17:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Gate1">
            <summary>
            The source to count from is GATE 1.
            </summary>
            <lastupdated>2/20/2006 3:18:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Gate2">
            <summary>
            The source to count from is GATE 2.
            </summary>
            <lastupdated>2/20/2006 3:18:42 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Gate3">
            <summary>
            The source to count from is GATE 3.
            </summary>
            <lastupdated>2/20/2006 3:18:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Gate4">
            <summary>
            The source to count from is GATE 4.
            </summary>
            <lastupdated>2/20/2006 3:18:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Gate5">
            <summary>
            The source to count from is GATE 5.
            </summary>
            <lastupdated>2/20/2006 3:19:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Freq1">
            <summary>
            The source to count from is Freq1 (F1).
            </summary>
            <lastupdated>2/20/2006 3:18:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Freq2">
            <summary>
            The source to count from is Freq2 (F2).
            </summary>
            <lastupdated>2/20/2006 3:18:09 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Freq3">
            <summary>
            The source to count from is Freq3 (F3).
            </summary>
            <lastupdated>2/20/2006 3:18:16 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Freq4">
            <summary>
            The source to count from is Freq4 (F4).
            </summary>
            <lastupdated>2/20/2006 3:18:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterSource.Freq5">
            <summary>
            The source to count from is Freq5 (F5).
            </summary>
            <lastupdated>2/20/2006 3:18:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SignalSource">
            <summary>
            Specifies the input signal source of a counter when calling the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </summary>
            <lastupdated>3/27/2006 1:57:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.TcPrevCtr">
            <summary>
            The signal source to calculate the frequency from is the terminal count of previous counter.
            </summary>
            <comment>
            	<remarks>
            Currently not supported by the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:37:27 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput1">
            <summary>
            The signal source to calculate the frequency from is counter input 1.
            </summary>
            <lastupdated>3/27/2006 1:45:18 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput2">
            <summary>
            The signal source to calculate the frequency from is counter input 2.
            </summary>
            <lastupdated>3/27/2006 1:46:34 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput3">
            <summary>
            The signal source to calculate the frequency from is counter input 3.
            </summary>
            <lastupdated>3/27/2006 1:47:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput4">
            <summary>
            The signal source to calculate the frequency from is counter input 4.
            </summary>
            <lastupdated>3/27/2006 1:47:30 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput5">
            <summary>
            The signal source to calculate the frequency from is counter input 5.
            </summary>
            <lastupdated>3/27/2006 1:47:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate1">
            <summary>
            The signal source to calculate the frequency from is Gate1.
            </summary>
            <lastupdated>3/27/2006 1:52:50 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate2">
            <summary>
            The signal source to calculate the frequency from is Gate2.
            </summary>
            <lastupdated>3/27/2006 1:53:50 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate3">
            <summary>
            The signal source to calculate the frequency from is Gate3.
            </summary>
            <lastupdated>3/27/2006 1:53:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate4">
            <summary>
            The signal source to calculate the frequency from is Gate4.
            </summary>
            <lastupdated>3/27/2006 1:54:03 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate5">
            <summary>
            The signal source to calculate the frequency from is Gate5.
            </summary>
            <comment>
            	<remarks>
            Currently not supported by the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:33:03 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq1">
            <summary>
            The signal source to calculate the frequency from is Freq1.
            </summary>
            <lastupdated>3/27/2006 1:48:04 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq2">
            <summary>
            The signal source to calculate the frequency from is Freq2.
            </summary>
            <lastupdated>3/27/2006 1:51:53 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq3">
            <summary>
            The signal source to calculate the frequency from is Freq3.
            </summary>
            <lastupdated>3/27/2006 1:52:05 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq4">
            <summary>
            The signal source to calculate the frequency from is Freq4.
            </summary>
            <lastupdated>3/27/2006 1:52:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq5">
            <summary>
            The signal source to calculate the frequency from is Freq5.
            </summary>
            <lastupdated>3/27/2006 1:52:18 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput6">
            <summary>
            The signal source to calculate the frequency from is counter input 6.
            </summary>
            <lastupdated>3/27/2006 1:47:41 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput7">
            <summary>
            The signal source to calculate the frequency from is counter input 7.
            </summary>
            <lastupdated>3/27/2006 1:47:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput8">
            <summary>
            The signal source to calculate the frequency from is counter input 8.
            </summary>
            <lastupdated>3/27/2006 1:47:51 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput9">
            <summary>
            The signal source to calculate the frequency from is counter input 9.
            </summary>
            <lastupdated>3/27/2006 1:47:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput10">
            <summary>
            The signal source to calculate the frequency from is counter input 10.
            </summary>
            <lastupdated>3/27/2006 1:45:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate6">
            <summary>
            The signal source to calculate the frequency from is Gate6.
            </summary>
            <lastupdated>3/27/2006 1:54:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate7">
            <summary>
            The signal source to calculate the frequency from is Gate7.
            </summary>
            <lastupdated>3/27/2006 1:54:15 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate8">
            <summary>
            The signal source to calculate the frequency from is Gate8.
            </summary>
            <lastupdated>3/27/2006 1:54:21 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate9">
            <summary>
            The signal source to calculate the frequency from is Gate9.
            </summary>
            <lastupdated>3/27/2006 1:54:28 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate10">
            <summary>
            The signal source to calculate the frequency from is Gate10.
            </summary>
            <comment>
            	<remarks>
            Currently not supported by the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:31:17 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq6">
            <summary>
            The signal source to calculate the frequency from is Freq6.
            </summary>
            <lastupdated>3/27/2006 1:52:23 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq7">
            <summary>
            The signal source to calculate the frequency from is Freq7.
            </summary>
            <lastupdated>3/27/2006 1:52:29 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq8">
            <summary>
            The signal source to calculate the frequency from is Freq8.
            </summary>
            <lastupdated>3/27/2006 1:52:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq9">
            <summary>
            The signal source to calculate the frequency from is Freq9.
            </summary>
            <lastupdated>3/27/2006 1:52:42 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq10">
            <summary>
            The signal source to calculate the frequency from is Freq10.
            </summary>
            <lastupdated>3/27/2006 1:48:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput11">
            <summary>
            The signal source to calculate the frequency from is counter input 11.
            </summary>
            <lastupdated>3/27/2006 1:45:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput12">
            <summary>
            The signal source to calculate the frequency from is counter input 12.
            </summary>
            <lastupdated>3/27/2006 1:45:42 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput13">
            <summary>
            The signal source to calculate the frequency from is counter input 13.
            </summary>
            <lastupdated>3/27/2006 1:45:49 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput14">
            <summary>
            The signal source to calculate the frequency from is counter input 14.
            </summary>
            <lastupdated>3/27/2006 1:45:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput15">
            <summary>
            The signal source to calculate the frequency from is counter input 15.
            </summary>
            <lastupdated>3/27/2006 1:46:03 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate11">
            <summary>
            The signal source to calculate the frequency from is Gate11.
            </summary>
            <lastupdated>3/27/2006 1:52:59 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate12">
            <summary>
            The signal source to calculate the frequency from is Gate12.
            </summary>
            <lastupdated>3/27/2006 1:53:04 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate13">
            <summary>
            The signal source to calculate the frequency from is Gate13.
            </summary>
            <lastupdated>3/27/2006 1:53:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate14">
            <summary>
            The signal source to calculate the frequency from is Gate14.
            </summary>
            <lastupdated>3/27/2006 1:53:16 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate15">
            <summary>
            The signal source to calculate the frequency from is Gate15.
            </summary>
            <comment>
            	<remarks>
            Currently not supported by the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:31:41 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq11">
            <summary>
            The signal source to calculate the frequency from is Freq11.
            </summary>
            <lastupdated>3/27/2006 1:48:17 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq12">
            <summary>
            The signal source to calculate the frequency from is Freq12.
            </summary>
            <lastupdated>3/27/2006 1:48:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq13">
            <summary>
            The signal source to calculate the frequency from is Freq13.
            </summary>
            <lastupdated>3/27/2006 1:48:29 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq14">
            <summary>
            The signal source to calculate the frequency from is Freq14.
            </summary>
            <lastupdated>3/27/2006 1:48:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq15">
            <summary>
            The signal source to calculate the frequency from is Freq15.
            </summary>
            <lastupdated>3/27/2006 1:51:19 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput16">
            <summary>
            The signal source to calculate the frequency from is counter input 16.
            </summary>
            <lastupdated>3/27/2006 1:46:09 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput17">
            <summary>
            The signal source to calculate the frequency from is counter input 17.
            </summary>
            <lastupdated>3/27/2006 1:46:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput18">
            <summary>
            The signal source to calculate the frequency from is counter input 18.
            </summary>
            <lastupdated>3/27/2006 1:46:20 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput19">
            <summary>
            The signal source to calculate the frequency from is counter input 19.
            </summary>
            <lastupdated>3/27/2006 1:46:28 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.CtrInput20">
            <summary>
            The signal source to calculate the frequency from is counter input 20.
            </summary>
            <lastupdated>3/27/2006 1:46:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate16">
            <summary>
            The signal source to calculate the frequency from is Gate16.
            </summary>
            <lastupdated>3/27/2006 1:53:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate17">
            <summary>
            The signal source to calculate the frequency from is Gate17.
            </summary>
            <lastupdated>3/27/2006 1:53:30 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate18">
            <summary>
            The signal source to calculate the frequency from is Gate18.
            </summary>
            <lastupdated>3/27/2006 1:53:37 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate19">
            <summary>
            The signal source to calculate the frequency from is Gate19.
            </summary>
            <lastupdated>3/27/2006 1:53:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Gate20">
            <summary>
            The signal source to calculate the frequency from is Gate20.
            </summary>
            <comment>
            	<remarks>
            Currently not supported by the <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:32:26 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq16">
            <summary>
            The signal source to calculate the frequency from is Freq16.
            </summary>
            <lastupdated>3/27/2006 1:51:26 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq17">
            <summary>
            The signal source to calculate the frequency from is Freq17.
            </summary>
            <lastupdated>3/27/2006 1:51:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq18">
            <summary>
            The signal source to calculate the frequency from is Freq18.
            </summary>
            <lastupdated>3/27/2006 1:51:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq19">
            <summary>
            The signal source to calculate the frequency from is Freq19.
            </summary>
            <lastupdated>3/27/2006 1:51:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalSource.Freq20">
            <summary>
            The signal source to calculate the frequency from is Freq20.
            </summary>
            <lastupdated>3/27/2006 1:51:59 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterRegister">
            <summary>
            Specifies the name of the register to load the count to.
            </summary>
            <lastupdated>2/17/2006 6:16:54 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg0">
            <summary>
            The count is loaded to Load register 0.
            </summary>
            <lastupdated>2/20/2006 3:12:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg1">
            <summary>
            The count is loaded to Load register 1.
            </summary>
            <lastupdated>2/20/2006 3:12:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg2">
            <summary>
            The count is loaded to Load register 2. 
            </summary>
            <lastupdated>2/20/2006 3:13:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg3">
            <summary>
            The count is loaded to Load register 3.
            </summary>
            <lastupdated>2/20/2006 3:13:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg4">
            <summary>
            The count is loaded to Load register 4.
            </summary>
            <lastupdated>2/20/2006 3:13:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg5">
            <summary>
            The count is loaded to Load register 5.
            </summary>
            <lastupdated>2/20/2006 3:13:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg6">
            <summary>
            The count is loaded to Load register 6.
            </summary>
            <lastupdated>2/20/2006 3:13:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg7">
            <summary>
            The count is loaded to Load register 7.
            </summary>
            <lastupdated>2/20/2006 3:13:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg8">
            <summary>
            The count is loaded to Load register 8.
            </summary>
            <lastupdated>2/20/2006 3:13:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg9">
            <summary>
            The count is loaded to Load register 9.
            </summary>
            <lastupdated>2/20/2006 3:14:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg10">
            <summary>
            The count is loaded to Load register 10.
            </summary>
            <lastupdated>2/20/2006 3:12:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg11">
            <summary>
            The count is loaded to Load register 11.
            </summary>
            <lastupdated>2/20/2006 3:12:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg12">
            <summary>
            The count is loaded to Load register 12.
            </summary>
            <lastupdated>2/20/2006 3:12:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg13">
            <summary>
            The count is loaded to Load register 13.
            </summary>
            <lastupdated>2/20/2006 3:12:32 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg14">
            <summary>
            The count is loaded to Load register 14.
            </summary>
            <lastupdated>2/20/2006 3:12:37 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg15">
            <summary>
            The count is loaded to Load register 15.
            </summary>
            <lastupdated>2/20/2006 3:12:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg16">
            <summary>
            The count is loaded to Load register 16.
            </summary>
            <lastupdated>2/20/2006 3:12:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg17">
            <summary>
            The count is loaded to Load register 17.
            </summary>
            <lastupdated>2/20/2006 3:12:54 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg18">
            <summary>
            The count is loaded to Load register 18.
            </summary>
            <lastupdated>2/20/2006 3:12:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg19">
            <summary>
            The count is loaded to Load register 19.
            </summary>
            <lastupdated>2/20/2006 3:13:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.LoadReg20">
            <summary>
            The count is loaded to Load register 20.
            </summary>
            <lastupdated>2/20/2006 3:13:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg1">
            <summary>
            The count is loaded to Hold register 1.
            </summary>
            <lastupdated>2/20/2006 3:07:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg2">
            <summary>
            The count is loaded to Hold register 2.
            </summary>
            <lastupdated>2/20/2006 3:09:42 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg3">
            <summary>
            The count is loaded to Hold register 3.
            </summary>
            <lastupdated>2/20/2006 3:10:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg4">
            <summary>
            The count is loaded to Hold register 4.
            </summary>
            <lastupdated>2/20/2006 3:10:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg5">
            <summary>
            The count is loaded to Hold register 5.
            </summary>
            <lastupdated>2/20/2006 3:10:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg6">
            <summary>
            The count is loaded to Hold register 6.
            </summary>
            <lastupdated>2/20/2006 3:10:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg7">
            <summary>
            The count is loaded to Hold register 7.
            </summary>
            <lastupdated>2/20/2006 3:10:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg8">
            <summary>
            The count is loaded to Hold register 8.
            </summary>
            <lastupdated>2/20/2006 3:10:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg9">
            <summary>
            The count is loaded to Hold register 9.
            </summary>
            <lastupdated>2/20/2006 3:10:49 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg10">
            <summary>
            The count is loaded to Hold register 10.
            </summary>
            <lastupdated>2/20/2006 3:08:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg11">
            <summary>
            The count is loaded to Hold register 11.
            </summary>
            <lastupdated>2/20/2006 3:08:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg12">
            <summary>
            The count is loaded to Hold register 12.
            </summary>
            <lastupdated>2/20/2006 3:08:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg13">
            <summary>
            The count is loaded to Hold register 13.
            </summary>
            <lastupdated>2/20/2006 3:08:33 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg14">
            <summary>
            The count is loaded to Hold register 14.
            </summary>
            <lastupdated>2/20/2006 3:08:42 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg15">
            <summary>
            The count is loaded to Hold register 15.
            </summary>
            <lastupdated>2/20/2006 3:08:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg16">
            <summary>
            The count is loaded to Hold register 16.
            </summary>
            <lastupdated>2/20/2006 3:09:05 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg17">
            <summary>
            The count is loaded to Hold register 17.
            </summary>
            <lastupdated>2/20/2006 3:09:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg18">
            <summary>
            The count is loaded to Hold register 18.
            </summary>
            <lastupdated>2/20/2006 3:09:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg19">
            <summary>
            The count is loaded to Hold register 19.
            </summary>
            <lastupdated>2/20/2006 3:09:33 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.HoldReg20">
            <summary>
            The count is loaded to Hold register 20.
            </summary>
            <lastupdated>2/20/2006 3:09:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm1Chip1">
            <summary>
            The count is loaded to Alarm register 1 of the first counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:06:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm2Chip1">
            <summary>
            The count is loaded to Alarm register 2 of the first counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:07:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm1Chip2">
            <summary>
            The count is loaded to Alarm register 1 of the second counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:06:39 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm2Chip2">
            <summary>
            The count is loaded to Alarm register 2 of the second counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:07:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm1Chip3">
            <summary>
            The count is loaded to Alarm register 1 of the third counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:06:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm2Chip3">
            <summary>
            The count is loaded to Alarm register 2 of the third counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:07:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm1Chip4">
            <summary>
            The count is loaded to Alarm register 1 of the fourth counter chip. 
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:07:03 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.Alarm2Chip4">
            <summary>
            The count is loaded to Alarm register 2 of the fourth counter chip.
            </summary>
            <remarks>
            This register applies to 9513 counter/timer devices only.
            </remarks>
            <lastupdated>2/20/2006 3:07:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadCount1">
            <summary>
            Loads the count to the CurrentCount register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:14:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadCount2">
            <summary>
            Loads the count to the CurrentCount register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:14:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadCount3">
            <summary>
            Loads the count to the CurrentCount register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:14:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadCount4">
            <summary>
            Loads the count to the CurrentCount register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:14:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreset1">
            <summary>
            Loads the count to the Preset register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreset2">
            <summary>
            Loads the count to the Preset register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:39 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreset3">
            <summary>
            Loads the count to the Preset register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreset4">
            <summary>
            Loads the count to the Preset register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:45 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreScaler1">
            <summary>
            Loads the count to the Prescaler register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreScaler2">
            <summary>
            Loads the count to the Prescaler register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:18 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreScaler3">
            <summary>
            Loads the count to the Prescaler register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:23 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterRegister.QuadPreScaler4">
            <summary>
            Loads the count to the Prescaler register. (LS7266 counter only)
            </summary>
            <lastupdated>2/20/2006 3:15:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.GateControl">
            <summary>
            Specifies all of the gating modes for configuring a 9513 counter.
            </summary>
            <lastupdated>2/20/2006 2:38:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.NoGate">
            <summary>
            The gating mode is no gating.
            </summary>
            <lastupdated>2/20/2006 3:40:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.AHLTcPrevCtr">
            <summary>
            The gating mode is Active High TCN &#8211;1.
            </summary>
            <lastupdated>2/20/2006 3:40:02 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.AHLNextGate">
            <summary>
            The gating mode is Active High Level GATE N + 1.
            </summary>
            <lastupdated>2/20/2006 3:39:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.AHLPrevGate">
            <summary>
            The gating mode is Active High Level GATE N &#8211; 1.
            </summary>
            <lastupdated>2/20/2006 3:39:57 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.AHLGate">
            <summary>
            The gating mode is Active Low Edge GATE N.
            </summary>
            <lastupdated>2/20/2006 3:39:46 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.ALLGate">
            <summary>
            The gating mode is Active Low Level GATE N.
            </summary>
            <lastupdated>2/20/2006 3:40:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.AHEGate">
            <summary>
            The gating mode is Active High Edge GATE N.
            </summary>
            <lastupdated>2/20/2006 3:39:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GateControl.ALEGate">
            <summary>
            The gating mode is Active Low Edge GATE N.
            </summary>
            <lastupdated>2/20/2006 3:40:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.Quadrature">
            <summary>
            Specifies the resolution multipliers for quadrature input.
            </summary>
            <lastupdated>2/20/2006 3:58:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Quadrature.NoQuad">
            <summary>
            Quadrature input is disabled so that the counters can be used as standard TTL counters.
            </summary>
            <lastupdated>3/27/2006 1:37:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Quadrature.X1Quad">
            <summary>
            The resolution multiplier is X1Quad.
            </summary>
            <lastupdated>2/20/2006 4:00:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Quadrature.X2Quad">
            <summary>
            The resolution multiplier is X2Quad.
            </summary>
            <lastupdated>2/20/2006 4:00:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.Quadrature.X4Quad">
            <summary>
            The resolution multiplier is X4Quad.
            </summary>
            <lastupdated>2/20/2006 4:00:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CountingMode">
            <summary>
            Specifies the valid operating modes for a C7266 counter.
            </summary>
            <lastupdated>2/20/2006 10:03:11 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountingMode.NormalMode">
            <summary>
            The operating mode is normal.
            </summary>
            <comment>
            	<remarks>
            Each counter operates as a 24-bit counter that rolls over to 0 when the maximum count is reached.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:15:07 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountingMode.RangeLimit">
            <summary>
            The operating mode is range limit.
            </summary>
            <comment>
            	<remarks>
            An upper and lower limit is set that mimicks limit switches in the mechanical counterpart. The upper limit is set by loading the PRESET register with the <format type="bold">CLoad</format> method after the counter is configured. The lower limit is always 0. When counting up, the counter freezes when the count reaches the value loaded into the PRESET register. When counting down, the counter freezes at 0. In either case, the counting only resumes when the count direction is reversed.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:15:19 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountingMode.NoRecycle">
            <summary>
            The operating mode is non-recycle. 
            </summary>
            <comment>
            	<remarks>
            The counter is disabled when a count overflow or underflow occurs. The counter is re-enabled when a reset or load operation is performed on the counter.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:14:56 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CountingMode.ModuloN">
            <summary>
            The operating mode is ModuloN.
            </summary>
            <comment>
            	<remarks>
            The upper limit is set by loading the PRESET register with a maximum count. When the maximum count is reached when counting up, the counter rolls over to 0 and continues counting up. When the count reaches 0 when counting down, the counter rolls over to the maximum count (in the PRESET register) and continues counting down.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:14:40 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DataEncoding">
            <summary>
            Specifies the format of data returned by a 7266 counter.
            </summary>
            <lastupdated>2/20/2006 10:39:00 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DataEncoding.BcdEncoding">
            <summary>
            The data is returned using BCD encoding. 
            </summary>
            <lastupdated>2/20/2006 3:22:38 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DataEncoding.BinaryEncoding">
            <summary>
            The data is returned using binary encoding.
            </summary>
            <lastupdated>2/20/2006 3:22:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.IndexMode">
            <summary>
            Specifies the action to take when the Index signal is received by a 7266 counter.
            </summary>
            <comment>
            	<remarks>
            The IndexMode must be set to IndexDisabled whenever a Quadrature is set to NOQuad, or when GateState is set to Enabled.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:20:30 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IndexMode.IndexDisabled">
            <summary>
            The Index signal is ignored.
            </summary>
            <lastupdated>2/21/2006 11:47:49 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IndexMode.LoadCtr">
            <summary>
            The counter is loaded whenever the index signal on the LCNTR pin occurs.
            </summary>
            <lastupdated>3/8/2006 10:27:09 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IndexMode.LoadOutLatch">
            <summary>
            The current count is latched whenever the Index signal on the LCNTR pin occurs. 
            </summary>
            <comment>
            	<remarks>
            When selected, the <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> method returns the same count each time it is called until the Index signal occurs.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:21:11 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IndexMode.ResetCtr">
            <summary>
            The counter is reset to 0 whenever the Index signal on the RCNTR pin occurs.
            </summary>
            <lastupdated>2/20/2006 3:44:57 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.FlagPins">
            <summary>
            Specifies which signals will be routed to the FLG1 and FLG2 pins on a 7266 counter.
            </summary>
            <lastupdated>2/20/2006 2:20:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FlagPins.CarryBorrow">
            <summary>
            The FLG1 pin is the Carry output, and the FLG2 pin is the Borrow output.
            </summary>
            <lastupdated>2/21/2006 11:45:22 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FlagPins.CompareBorrow">
            <summary>
            The FLG1 pin is the Compare output, and the FLG2 pin is the Borrow output.
            </summary>
            <lastupdated>2/21/2006 11:45:12 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FlagPins.CarryBorrowUpDown">
            <summary>
            The FLG1 pin is the Carry/Borrow output, and the FLG2 pin is the Up/Down signal.
            </summary>
            <lastupdated>2/20/2006 3:37:46 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FlagPins.IndexError">
            <summary>
            The FLG1 pin is the Index output, and the FLG2 pin is the Error output.
            </summary>
            <lastupdated>2/20/2006 3:38:08 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.StatusBits">
            <summary>
            Specifies all status bits that are available when reading a counter status.
            </summary>
            <comment>
            	<remarks>
            Status bits can be combined using a bitwise OR operation.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:38:39 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.UnderFlow">
            <summary>
            This bit is set to 1 whenever the count decrements past 0, and cleared to 0 whenever <see cref="M:MccDaq.MccBoard.CStatus(System.Int32,MccDaq.StatusBits@)"/> method is called.
            </summary>
            <lastupdated>2/20/2006 6:12:40 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.OverFlow">
            <summary>
            This bit is set to 1 whenever the count increments past it's upper limit, and cleared to 0 whenever <see cref="M:MccDaq.MccBoard.CStatus(System.Int32,MccDaq.StatusBits@)"/> method is called.
            </summary>
            <lastupdated>2/20/2006 6:11:09 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.Compare">
            <summary>
            This bit is set to 1 whenever the count matches the preset register, and cleared to 0 whenever <see cref="M:MccDaq.MccBoard.CStatus(System.Int32,MccDaq.StatusBits@)"/> method is called.
            </summary>
            <lastupdated>2/20/2006 6:08:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.Sign">
            <summary>
            This bit is set to 1 when the MSB of the count is 1, and is cleared to 0 whenever the MSB of the count is set to 0.
            </summary>
            <lastupdated>2/20/2006 6:11:52 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.Error">
            <summary>
            This bit is set to 1 whenever an error occurs due to excessive noise on the input, and is cleared to 0 by calling <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.
            </summary>
            <lastupdated>2/20/2006 6:09:58 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.Updown">
            <summary>
            This bit is set to 1 when counting up, and cleared to 0 when counting down.
            </summary>
            <lastupdated>2/20/2006 6:13:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.StatusBits.Index">
            <summary>
            This bit is set to 1 when index is valid, and is cleared to 0 when index is not valid.
            </summary>
            <lastupdated>2/20/2006 6:10:25 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TriggerType">
            <summary>
            Specifies all valid trigger types for the <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method.
            </summary>
            <lastupdated>2/20/2006 6:00:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigAbove">
            <summary>
            AD conversions are enabled when the external analog trigger makes a transition from below highThreshold to above. Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>2/20/2006 6:30:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigBelow">
            <summary>
            AD conversions are enabled when the external analog trigger input makes a transition from above lowThreshold to below. Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>2/20/2006 6:30:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateNegHys">
            <summary>
            AD conversions are enabled when the external analog trigger input is more positive than highThreshold. AD conversions are disabled when the external analog trigger input is more negative than lowThreshold.
            </summary>
            <comment>
            	<remarks>
            Hysteresis is the level between Low/Threshold and highThreshold.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:43:47 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GatePosHys">
            <summary>
            AD conversions are enabled when the external analog trigger input is more negative than lowThreshold. AD conversions are disabled when the external analog trigger input is more positive than highThreshold.
            </summary>
            <comment>
            	<remarks>
            Hysteresis is the level between lowThreshold and highThreshold.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 11:07:53 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateAbove">
            <summary>
            AD conversions are enabled as long as the external analog trigger input is more positive than highThreshold.
            </summary>
            <lastupdated>2/20/2006 6:27:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateBelow">
            <summary>
            AD conversions are enabled as long as the external analog trigger input is more negative than lowThreshold.
            </summary>
            <lastupdated>2/20/2006 6:27:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateInWindow">
            <summary>
            AD conversions are enabled as long as the external analog trigger is inside the region defined by lowThreshold and highThreshold.
            </summary>
            <lastupdated>2/20/2006 6:28:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateOutWindow">
            <summary>
            AD conversions are enabled as long as the external analog trigger is outside the region defined by lowThreshold and highThreshold.
            </summary>
            <lastupdated>2/20/2006 6:29:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateHigh">
            <summary>
            AD conversions are enabled as long as the external digital trigger input is 5 V (logic HIGH or 1).
            </summary>
            <lastupdated>3/8/2006 10:29:30 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.GateLow">
            <summary>
            AD conversions are enabled as long as the external digital trigger input is 0 V (logic LOW or 0).
            </summary>
            <lastupdated>3/8/2006 10:29:43 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigHigh">
            <summary>
            AD conversions are enabled when the external digital trigger is 5V (logic HIGH or '1'). Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>2/20/2006 6:30:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigLow">
            <summary>
            AD conversions are enabled when the external digital trigger is 0V (logic LOW or '0'). Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>2/20/2006 6:31:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigPosEdge">
            <summary>
            AD conversions are enabled when the external digital trigger makes a transition from 5 V to 0 V (logic HIGH to LOW). Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>3/8/2006 10:30:26 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerType.TrigNegEdge">
            <summary>
            AD conversions are enabled when the external digital trigger makes a transition from 0 V to 5 V (logic LOW to HIGH). Once conversions are enabled, the external trigger is ignored.
            </summary>
            <lastupdated>3/8/2006 10:29:55 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SoftwareTriggerType">
            <summary>
            Specifies all valid trigger types for software triggering.
            </summary>
            <lastupdated>2/20/2006 6:00:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SoftwareTriggerType.TrigAbove">
            <summary>
            Software triggering is TrigAbove.
            </summary>
            <lastupdated>2/20/2006 6:01:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SoftwareTriggerType.TrigBelow">
            <summary>
            Software triggering is TrigBelow.
            </summary>
            <lastupdated>2/20/2006 6:02:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ConnectionPin">
            <summary>
            Specifies the pin to associate with the signal type and direction of timing and control signals when calling the <see cref="M:MccDaq.MccBoard.SelectSignal(MccDaq.SignalDirection,MccDaq.SignalType,MccDaq.ConnectionPin,MccDaq.SignalPolarity)"/> method.
            </summary>
            <lastupdated>12/31/2010 10:01:02 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn0">
            <summary>
            Sets the connection to the physical auxiliary input pin 0.
            </summary>
            <lastupdated>3/29/2006 8:01:15 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn1">
            <summary>
            Sets the connection to the physical auxiliary input pin 1.
            </summary>
            <lastupdated>3/29/2006 8:01:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn2">
            <summary>
            Sets the connection to the physical auxiliary input pin 2.
            </summary>
            <lastupdated>3/29/2006 8:01:35 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn3">
            <summary>
            Sets the connection to the physical auxiliary input pin 3.
            </summary>
            <lastupdated>3/29/2006 8:01:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn4">
            <summary>
            Sets the connection to the physical auxiliary input pin 4.
            </summary>
            <lastupdated>3/29/2006 8:01:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxIn5">
            <summary>
            Sets the connection to the physical auxiliary input pin 5.
            </summary>
            <lastupdated>3/29/2006 8:02:15 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxOut0">
            <summary>
            Sets the connection to the physical auxiliary output pin 0.
            </summary>
            <lastupdated>3/29/2006 8:02:31 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxOut1">
            <summary>
            Sets the connection to the physical auxiliary output pin 1.
            </summary>
            <lastupdated>3/29/2006 8:02:40 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.AuxOut2">
            <summary>
            Sets the connection to the physical auxiliary output pin 2.
            </summary>
            <lastupdated>3/29/2006 8:02:49 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ConnectionPin.DsConnector">
            <summary>
            Sets the connection generically to one of the DAQ-Sync connector pins—the exact physical connection pin on DAQ-Sync connector is determined by the signal assigned to the generic <format type="italics">DsConnector</format>connection.
            </summary>
            <lastupdated>3/29/2006 8:18:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SignalType">
            <summary>
            Specifies all signal types associated with a connector pin.
            </summary>
            <lastupdated>2/20/2006 5:41:39 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcConvert">
            <summary>
            The signal type is an A/D conversion pulse or clock.
            </summary>
            <lastupdated>2/20/2006 5:44:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcGate">
            <summary>
            The signal type is an external gate for A/D conversions.
            </summary>
            <lastupdated>2/20/2006 5:44:38 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcStartTrig">
            <summary>
            The signal type is the start of A/D channel-scan sequence signal.
            </summary>
            <lastupdated>2/20/2006 5:49:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcStopTrig">
            <summary>
            The signal type is an A/D stop- or pre- trigger signal.
            </summary>
            <lastupdated>2/20/2006 5:50:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcTbSrc">
            <summary>
            The signal type is an A/D pacer timebase source.
            </summary>
            <lastupdated>2/20/2006 5:51:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcScanClk">
            <summary>
            The signal type is an A/D channel scan signal.
            </summary>
            <lastupdated>2/20/2006 5:45:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcSsh">
            <summary>
            The signal type is an A/D simultaneous sample and hold signal.
            </summary>
            <lastupdated>2/20/2006 5:46:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcStartScan">
            <summary>
            The signal type is the start of A/D channel-scan sequence signal.
            </summary>
            <lastupdated>2/20/2006 5:47:09 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.AdcScanStop">
            <summary>
            The signal type is an A/D scan completion signal.
            </summary>
            <lastupdated>2/20/2006 5:46:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.DacUpdate">
            <summary>
            The signal type is a D/A update signal.
            </summary>
            <lastupdated>2/20/2006 5:56:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.DacTbSrc">
            <summary>
            The signal type is a D/A pacer timebase source.
            </summary>
            <lastupdated>2/20/2006 5:53:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.DacStartTrig">
            <summary>
            The signal type is a D/A start trigger.
            </summary>
            <lastupdated>2/20/2006 5:53:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.SyncClk">
            <summary>
            The signal type is a STC timebase signal.
            </summary>
            <lastupdated>2/20/2006 5:57:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.Ctr1Clk">
            <summary>
            The signal type is a CTR1 clock source.
            </summary>
            <lastupdated>2/20/2006 5:51:47 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.Ctr2Clk">
            <summary>
            The signal type is a CTR2 clock source.
            </summary>
            <lastupdated>2/20/2006 5:51:57 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalType.DGnd">
            <summary>
            The signal type is a digital ground.
            </summary>
            <lastupdated>2/20/2006 5:57:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SignalDirection">
            <summary>
            Specifies the directions available from a signal type assigned to a connector pin.
            </summary>
            <lastupdated>2/20/2006 5:12:58 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalDirection.Disabled">
            <exclude/>
            <summary>
            For internal use only.
            </summary>
            <lastupdated>4/6/2006 2:32:52 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalDirection.SignalIn">
            <summary>
            Retrieves the source.
            </summary>
            <lastupdated>2/20/2006 5:12:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalDirection.SignalOut">
            <summary>
            Retrieves the destination.
            </summary>
            <lastupdated>2/20/2006 5:12:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SignalPolarity">
            <summary>
            Specifies the available polarities for a specified signal.
            </summary>
            <lastupdated>2/20/2006 5:13:47 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalPolarity.NonInverted">
            <summary>
            The signal polarity is non-inverted for an AuxOut signal.
            </summary>
            <lastupdated>2/20/2006 5:17:11 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalPolarity.PositiveEdge">
            <summary>
            The signal polarity for AdcTbSrc and DacTbSrc input signals is rising edge.
            </summary>
            <lastupdated>2/20/2006 5:18:51 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalPolarity.NegativeEdge">
            <summary>
            The signal polarity for AdcTbSrc and DacTbSrc input signals is falling edge.
            </summary>
            <lastupdated>2/20/2006 5:18:38 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SignalPolarity.Inverted">
            <summary>
            The signal polarity is inverted for an AuxOut signal.
            </summary>
            <lastupdated>2/20/2006 5:16:58 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.EventType">
            <summary>
            Specifies all available event conditions that can be bound to the user-callback function.
            </summary>
            <remarks>
            More than one event type can be specified by bitwise OR'ing the event types.
            </remarks>
            <lastupdated>2/20/2006 12:16:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnScanError">
            <summary>
            Generates an event when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> input and output scans. 
            </summary>
            <comment>
            	<remarks>
            The detected error can include <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:19:19 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnExternalInterrupt">
            <summary>
            Generates an event when a pulse is detected at the External Interrupt pin (applies to some digital and counter boards only).
            </summary>
            <lastupdated>2/21/2006 11:43:00 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnPretrigger">
            <summary>
            Generates an event when the first trigger is detected (<see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method).
            </summary>
            <lastupdated>2/21/2006 11:43:25 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnDataAvailable">
            <summary>
            Generates an event when the number of samples acquired during an analog input scan increases by EventParameter samples or more. 
            </summary>
            <comment>
            	<remarks>
            		<para>
            Events are generated on packet transfers for BlockIo scans.
            </para>
            		<para>
            For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, the first event is not generated until a minimum of EventParam samples after the pretrigger.
            </para>
            	</remarks>
            </comment>
            <lastupdated>12/31/2010 10:18:08 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnEndOfAiScan">
            <summary>
            Generates an event upon completion or fatal error of <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </summary>
            <comment>
            	<remarks>
            This event is NOT generated when scans are aborted using <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:18:36 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnEndOfAoScan">
            <summary>
            Generates an event upon completion or fatal error of <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </summary>
            <comment>
            	<remarks>
            This event is NOT generated when scans are aborted using <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:18:45 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.OnChangeOfDigInput">
            <summary>
            Not implemented.
            </summary>
            <lastupdated>3/24/2006 2:33:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventType.AllEventTypes">
            <summary>
            Disables all events.
            </summary>
            <lastupdated>2/21/2006 11:40:16 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.EventParameter">
            <summary>
            Specifies the options for latching data on supported Measurement Computing hardware.
            </summary>
            <lastupdated>11/15/2006 10:05:41 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventParameter.Default">
            <summary>
            The latching mode is automatically applied based on the board type.
            </summary>
            <lastupdated>11/15/2006 10:05:50 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventParameter.LatchDI">
            <exclude/>
            <summary>
            Returns data that was latchched in at the most recent interrupt edge. The current value of the digital inputs is read and stored (0 or 1). The stored value is updated when an active edge occurs. 
            </summary>
            <lastupdated>11/15/2006 10:06:10 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.EventParameter.LatchDO">
            <exclude/>
            <summary>
            Latches out data most recently written to the device. The digital outputs are not set to the value written until an active edge occurs. 
            </summary>
            <lastupdated>11/15/2006 10:06:32 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ScanOptions">
            <summary>
            Specifies the available options for paced input/output functions.
            </summary>
            <lastupdated>2/20/2006 4:24:46 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Default">
            <summary>
            The optimum sampling mode is automatically applied based on board type and sampling speed.
            </summary>
            <lastupdated>2/20/2006 4:47:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Background">
            <summary>
            Data collection into the buffer continues in the background; program control returns immediately to the next line in the program.
            </summary>
            <lastupdated>3/9/2006 11:57:19 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Continuous">
            <summary>
            Puts the method in an endless loop. 
            </summary>
            <lastupdated>12/31/2010 9:56:44 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ExtClock">
            <summary>
            Conversions are controlled by the signal on the external clock input rather than by the internal pacer clock. Each conversion is triggered on the appropriate edge of the clock input signal. The rate parameter is ignored. The sampling rate depends on the clock signal. Options for the device default to a transfer mode that allows the maximum conversion rate to be attained unless otherwise specified.
            </summary>
            <lastupdated>12/31/2010 9:57:08 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ConvertData">
            <summary>
            For 12 bit boards, data returned to the buffer is automatically converted to 12 bit A/D values. If ConvertData is not used, data is returned unmodified (16-bit values that contain both a 12-bit A/D value and a 4-bit channel number). 
            After the data collection is complete call <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to convert the data after the fact. Do not specify this option if you are using the Background option and DMA transfers.
            </summary>
            <lastupdated>12/31/2010 9:56:50 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ScaleData">
            <summary>
            Data is scaled to engineering units and stored in the scan buffer.
            </summary>
            <lastupdated>12/31/2010 9:57:58 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.DtConnect">
            <summary>
            All A/D values are sent to the A/D board's DT-Connect port.
            </summary>
            <lastupdated>12/31/2010 9:57:01 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.SingleIo">
            <summary>
            A/D conversions and transfers to memory are initiated by an interrupt. One interrupt per conversion.
            </summary>
            <lastupdated>12/31/2010 9:58:11 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.DmaIo">
            <summary>
            A/D conversions are initiated by a trigger. Transfers are initiated by a DMA request.
            </summary>
            <lastupdated>2/20/2006 4:48:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.BlockIo">
            <summary>
            A/D conversions are initiated by a trigger. Transfers are handled in blocks (by REP-INSW for example). 
            </summary>
            <lastupdated>12/31/2010 9:56:13 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.BurstIo">
            <summary>
            Allows higher sampling rates for sample counts up to full FIFO. Data is collected into the local FIFO. Data transfers to the PC are held off until after the scan is complete.
            </summary>
            <lastupdated>12/31/2010 9:56:25 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.WordXfer">
            <summary>
            Read or write two adjacent ports as the low and high byte of a single array element from/to the buffer.
            </summary>
            <lastupdated>10/18/2006 2:09:22 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Simultaneous">
            <summary>
            Updates all D/A voltages simultaneously when the last D/A in the scan is updated.
            </summary>
            <lastupdated>2/20/2006 5:07:40 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.NoFilter">
            <summary>
            No smoothing function is applied to temperature readings, resulting in a  scattering of readings around a mean.
            </summary>
            <lastupdated>2/20/2006 6:17:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ExtMemory">
            <summary>
            Data is sent to a connected memory board via the DT-Connect interface rather than returning the data to the buffer.
            </summary>
            <lastupdated>12/31/2010 9:57:15 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.BurstMode">
            <summary>
            Enables burst mode sampling. Scans from lowChan to highChan are clocked at the maximum A/D rate between samples in order to minimize channel to channel skew. Scans are initiated at the rate specified by rate.
            </summary>
            <lastupdated>12/31/2010 9:56:32 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.NoTodInts">
            <summary>
            Disables the system's time-of-day interrupts for the duration of the scan. 
            </summary>
            <lastupdated>12/31/2010 9:57:37 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ExtTrigger">
            <summary>
            Sampling begins when a trigger condition is met.
            </summary>
            <lastupdated>12/31/2010 9:57:24 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.NoCalibrateData">
            <summary>
            Turns off real-time software calibration for boards which are software calibrated. this is done by applying calibration factors to the data on a sample by sample basis as it is acquired.
            </summary>
            <lastupdated>12/31/2010 9:57:30 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.RetrigMode">
            <summary>
            Enables the retrigger mode in which the hardware trigger is re-armed without having to start a new scan.
            </summary>
            <lastupdated>12/31/2010 9:57:44 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.NonStreamedIO">
            <summary>
            Enables generation of non-streamed data output. 
            </summary>
            <lastupdated>2/20/2006 6:17:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ADCClockTrig">
            <summary>
            Data output is triggered upon the start of the ADC clock.
            </summary>
            <lastupdated>10/12/2006 11:01:03 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.ADCClock">
            <summary>
            Data output is paced by the ADC clock.
            </summary>
            <lastupdated>10/12/2006 11:00:50 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.HighResRate">
            <summary>
            The rate at which samples are acquired is in "samples per 1000 seconds per channel".
            </summary>
            <lastupdated>5/4/2010 3:02:08 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Ctr16Bit">
            <summary>
            Sets the counter resolution to 16-bits.
            </summary>
            <lastupdated>5/4/2010 3:00:25 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Ctr32Bit">
            <summary>
            Sets the counter resolution to 32-bits.
            </summary>
            <lastupdated>5/4/2010 3:00:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ScanOptions.Ctr48Bit">
            <summary>
            Sets the counter resolution to 48-bits.
            </summary>
            <lastupdated>5/4/2010 3:00:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ThermocoupleOptions">
            <summary>
            Specifies whether or not to apply a smoothing function to temperature readings.
            </summary>
            <lastupdated>2/20/2006 6:18:08 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ThermocoupleOptions.Filter">
            <summary>
            A smoothing function is applied to temperature readings.
            </summary>
            <comment>
            	<remarks>
            Ten samples are read from the specified channel and averaged. The average is the reading returned. Averaging removes normally distributed signal line noise.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:39:36 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ThermocoupleOptions.NoFilter">
            <summary>
            No smoothing function is applied to temperature readings, resulting in a  scattering of readings around a mean.
            </summary>
            <lastupdated>2/20/2006 6:17:09 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.VInOptions">
            <summary>
            Specifies all voltage input options.
            </summary>
            <lastupdated>6/26/2007 10:44:39 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.VInOptions.Default">
            <summary>
            Reserved for future use.
            </summary>
            <lastupdated>6/26/2007 10:42:07 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.VOutOptions">
            <summary>
            Specifies all voltage output options.
            </summary>
            <lastupdated>6/26/2007 10:44:55 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.VOutOptions.Default">
            <summary>
            Reserved for future use.
            </summary>
            <lastupdated>6/26/2007 10:42:20 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.PulseOutOptions">
            <summary>
            Specifies all pulse output options.
            </summary>
            <lastupdated>6/26/2007 10:44:55 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.PulseOutOptions.Default">
            <summary>
            Reserved for future use.
            </summary>
            <lastupdated>2/20/2006 4:47:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DACUpdate">
            <summary>
            Specifies the available modes used to update analog output channels.
            </summary>
            <lastupdated>2/20/2006 10:35:16 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DACUpdate.Immediate">
            <summary>
            The analog output channels are updated immediately.
            </summary>
            <lastupdated>2/20/2006 3:22:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.DACUpdate.OnCommand">
            <summary>
            The analog output channels are updated on command.
            </summary>
            <lastupdated>2/20/2006 3:22:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.GetFileOptions">
            <exclude/>
            <lastupdated>2/21/2006 11:49:09 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GetFileOptions.GetFirst">
            <summary>
            Gets the first file in the directory.
            </summary>
            <lastupdated>2/21/2006 11:47:02 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.GetFileOptions.GetNext">
            <summary>
            Gets the next file in the directory based on the current location is the file.
            </summary>
            <lastupdated>2/21/2006 11:47:19 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TimeZone">
            <summary>
            Specifies all time zones to store time stamp data.
            </summary>
            <lastupdated>3/8/2006 10:26:07 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeZone.Local">
            <summary>
            Converts time stamp data to the local time on your computer.
            </summary>
            <lastupdated>2/20/2006 6:26:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeZone.GMT">
            <summary>
            Converts time stamp data to Greenwich Mean Time (GMT).
            </summary>
            <lastupdated>2/20/2006 6:25:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TimeFormat">
            <summary>
            Specifies all formats for displaying time stamp data.
            </summary>
            <lastupdated>3/8/2006 10:25:38 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeFormat.TwelveHour">
            <summary>
            Time stamp data is displayed using a 12 hour format, for example 2:32:51.
            </summary>
            <lastupdated>2/20/2006 6:21:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TimeFormat.TwentyFourHour">
            <summary>
            Time stamp data is displayed using a 24 hour format, for example 14.32.51.
            </summary>
            <lastupdated>2/20/2006 6:21:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.FileType">
            <summary>
            Specifies the file type used to convert a binary log file.
            </summary>
            <lastupdated>10/12/2006 12:25:42 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FileType.Csv">
            <summary>
            The binary log file is converted to a *.CSV (comma-separated values) file.
            </summary>
            <lastupdated>2/21/2006 12:05:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FileType.Text">
            <summary>
            The binary log file is converted to a text file.
            </summary>
            <lastupdated>2/21/2006 12:04:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.FieldDelimiter">
            <summary>
            Specifies the delimiter character used to separate fields in a converted file.
            </summary>
            <lastupdated>2/20/2006 12:41:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FieldDelimiter.Comma">
            <summary>
            The delimiter character is a comma.
            </summary>
            <lastupdated>2/20/2006 3:36:08 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FieldDelimiter.Semicolon">
            <summary>
            The delimiter character is a semicolon.
            </summary>
            <lastupdated>2/20/2006 3:36:18 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FieldDelimiter.Space">
            <summary>
            The delimiter character is a space.
            </summary>
            <lastupdated>2/20/2006 3:36:27 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.FieldDelimiter.Tab">
            <summary>
            The delimiter character is a tab.
            </summary>
            <lastupdated>2/20/2006 3:36:37 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.LoggerUnits">
            <summary>
            Specifies all options to set the units used by data logger analog data when collecting and storing data in a binary file.
            </summary>
            <lastupdated>11/13/2006 10:15:08 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.LoggerUnits.Temperature">
            <summary>
            Data logger analog data is stored as temperature.
            </summary>
            <lastupdated>2/20/2006 3:46:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.LoggerUnits.Raw">
            <summary>
            Data logger analog data is stored as raw engineering units.
            </summary>
            <lastupdated>3/9/2006 11:54:37 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterMode">
            <summary>
            Specifies the options for setting the counter mode.
            </summary>
            <lastupdated>6/28/2006 4:14:09 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.Totalize">
            <summary>
            Counts the number of pulses (default).
            </summary>
            <lastupdated>10/12/2006 12:01:32 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.Rollover">
            <summary>
            The counter counts upward and rolls over on the 32-bit boundary (default).
            </summary>
            <lastupdated>10/12/2006 11:58:03 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.ClearOnRead">
            <summary>
            The counter is cleared at the beginning of every sample.
            </summary>
            <lastupdated>10/12/2006 11:47:58 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.StopAtMax">
            <summary>
            The counter stops at the top of its count.
            </summary>
            <comment>
            	<remarks>
            For <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>, the top of the count depends on whether the Bit32 option is used. If it is, the top of the count
            is FFFFFFFF hex. If not, the top of the count is FFFF hex.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:11:12 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.DecrementOff">
            <summary>
            Sets the counter decrement option to "off" (default).
            </summary>
            <lastupdated>10/12/2006 11:53:29 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.DecrementOn">
            <summary>
            Sets the counter decrement option to "on." Not compatible with <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> or <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>. 
            </summary>
            <lastupdated>11/27/2006 9:47:05 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.GatingOff">
            <summary>
            Selects the counter gating option to "off" (default).
            </summary>
            <lastupdated>10/12/2006 11:53:18 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.GatingOn">
            <summary>
            Selects gating "on." When "on", the counter is enabled when the mapped channel to gate the counter is high. When the mapped channel is low, the counter is disabled
            but holds the count value. 
            </summary>
            <comment>
            	<remarks>
            Not compatible with <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> or <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>. 
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:09:40 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.Bit16">
            <summary>
            Selects a 16-bit counter (default).
            </summary>
            <lastupdated>10/12/2006 11:53:51 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.Bit32">
            <summary>
            Selects a 32-bit counter. 
            </summary>
            <comment>
            	<remarks>
            This mode affects only <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/> and <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/>and only when the counter is configured
            for StopAtMax. Recommended for use only with <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>.
            </remarks>
            </comment>
            <lastupdated>5/4/2010 2:37:37 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.Bit48">
            <summary>
            Selects a 48-bit counter. 
            </summary>
            <lastupdated>5/4/2010 2:38:19 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.LatchOnSOS">
            <summary>
            The count is latched by the internal "start of scan" signal (default), so the count is updated each time it’s read.
            </summary>
            <lastupdated>10/12/2006 12:23:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.LatchOnMap">
            <summary>
            The count is latched by the signal on the mapped counter.
            </summary>
            <comment>
            	<remarks>
            Not compatible with <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> or <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>. 
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:09:59 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.UpDownOff">
            <summary>
            Disables up/down counting mode.
            </summary>
            <lastupdated>5/4/2010 2:52:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.UpDownOn">
            <summary>
            Enables up/down counting mode.
            </summary>
            <lastupdated>5/4/2010 2:52:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.RangeLimitOff">
            <summary>
            Disables range limit counting mode. 
            </summary>
            <lastupdated>5/4/2010 2:50:54 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.RangeLimitOn">
            <summary>
            Enables range limit counting mode. 
            </summary>
            <lastupdated>5/4/2010 2:51:07 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.NoRecycleOff">
            <summary>
            Disables non-recycle counting mode.
            </summary>
            <lastupdated>5/7/2010 11:41:06 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.NoRecycleOn">
            <summary>
            Enables non-recycle counting mode.
            </summary>
            <lastupdated>5/7/2010 11:41:11 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.ModuloNOff">
            <summary>
            Enables Modulo-N counting mode.
            </summary>
            <lastupdated>5/7/2010 11:40:04 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.ModuloNOn">
            <summary>
            Disables Modulo-N counting mode.
            </summary>
            <lastupdated>5/7/2010 11:40:19 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeX1">
            <summary>
            The measurement is latched each time one complete period is observed.
            </summary>
            <lastupdated>5/4/2010 2:48:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeX10">
            <summary>
            The measurement is latched each time 10 complete periods are observed.
            </summary>
            <lastupdated>5/4/2010 2:48:37 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeX100">
            <summary>
            The measurement is latched each time 100 complete periods are observed.
            </summary>
            <lastupdated>5/4/2010 2:49:04 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeX1000">
            <summary>
            The measurement is latched each time 1000 complete periods are observed.
            </summary>
            <lastupdated>5/4/2010 2:48:59 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeBit32">
            <summary>
            Selects a 32-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:47:30 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeBit48">
            <summary>
            Selects a 48-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:47:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PeriodModeGatingOn">
            <summary>
            Selects gating on.
            </summary>
            <lastupdated>5/4/2010 2:47:48 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PulseWidthModeBit16">
            <summary>
            Selects a 16-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:49:43 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PulseWidthModeBit32">
            <summary>
            Selects a 32-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:49:56 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PulseWidthModeBit48">
            <summary>
            Selects a 48-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:50:03 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PulseWidthModeGatingOff">
            <summary>
            Selects gating off.
            </summary>
            <lastupdated>5/4/2010 2:50:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.PulseWidthModeGatingOn">
            <summary>
            Selects gating on.
            </summary>
            <lastupdated>5/4/2010 2:50:32 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.TimingModeBit16">
            <summary>
            Selects a 16-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:51:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.TimingModeBit32">
            <summary>
            Selects a 32-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:51:43 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.TimingModeBit48">
            <summary>
            Selects a 48-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:51:55 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeX1">
            <summary>
            Sets the encoder measurement mode to X1.
            </summary>
            <lastupdated>5/4/2010 2:45:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeX2">
            <summary>
            Sets the encoder measurement mode to X2.
            </summary>
            <lastupdated>5/4/2010 2:45:21 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeX4">
            <summary>
            Sets the encoder measurement mode to 4.
            </summary>
            <lastupdated>5/4/2010 2:45:31 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeLatchOnZ">
            <summary>
            Selects the Encoder Z mapped signal to latch the counter outputs.
            </summary>
            <lastupdated>5/4/2010 2:44:51 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeClearOnZOff">
            <summary>
            Selects "clear on Z" off.
            </summary>
            <lastupdated>5/4/2010 2:44:12 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeClearOnZOn">
            <summary>
            Selects "clear on Z" on.
            </summary>
            <lastupdated>5/4/2010 2:44:03 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeRangeLimitOff">
            <summary>
            Disables Range Limit counting mode.
            </summary>
            <lastupdated>5/4/2010 2:42:24 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeRangeLimitOn">
            <summary>
            Enables Range Limit counting mode.
            </summary>
            <lastupdated>5/4/2010 2:42:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeNoRecycleOff">
            <summary>
            Disables non-recycle counting mode.
            </summary>
            <lastupdated>5/4/2010 2:42:54 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeNoRecycleOn">
            <summary>
            Enables non-recycle counting mode.
            </summary>
            <lastupdated>5/4/2010 2:42:43 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeModuloNOff">
            <summary>
            Disables Modulo-N counting mode.
            </summary>
            <lastupdated>5/4/2010 2:43:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeModuloNOn">
            <summary>
            Enables Modulo-N counting mode.
            </summary>
            <lastupdated>5/4/2010 2:43:19 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeBit16">
            <summary>
            Selects a 16-bit counter.
            </summary>
            <lastupdated>5/4/2010 2:41:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeBit32">
            <summary>
            Selects a 32-bit counter. 
            </summary>
            <lastupdated>5/4/2010 2:41:16 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.EncoderModeBit48">
            <summary>
            Selects a 48-bit counter. 
            </summary>
            <lastupdated>5/4/2010 2:41:29 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.LatchOnZ">
            <summary>
            The count is latched by the index signal.
            </summary>
            <lastupdated>5/7/2010 11:39:22 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.ClearOnZOFF">
            <summary>
            Selects "clear on Z" off (default).
            </summary>
            <lastupdated>5/4/2010 2:40:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterMode.ClearOnZOn">
            <summary>
            Selects "clear on Z" on. The counter is cleared on the rising edge of the mapped (Z) channel. 
            </summary>
            <lastupdated>5/4/2010 2:39:25 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterDebounceTime">
            <summary>
            Specifies the options for setting the debounce time.
            </summary>
            <lastupdated>10/12/2006 12:07:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce500ns">
            <summary>
            Sets the counter channel’s comparator output to 500 ns.
            </summary>
            <lastupdated>10/12/2006 12:12:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce1500ns">
            <summary>
            Sets the counter channel’s comparator output to 1500 ns.
            </summary>
            <lastupdated>10/12/2006 12:10:57 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce3500ns">
            <summary>
            Sets the counter channel’s comparator output to 3500 ns.
            </summary>
            <lastupdated>10/12/2006 12:12:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce7500ns">
            <summary>
            Sets the counter channel’s comparator output to 7500 ns.
            </summary>
            <lastupdated>10/12/2006 12:13:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce15500ns">
            <summary>
            Sets the counter channel’s comparator output to 15500 ns.
            </summary>
            <lastupdated>10/12/2006 12:11:28 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce31500ns">
            <summary>
            Sets the counter channel’s comparator output to 31500 ns.
            </summary>
            <lastupdated>10/12/2006 12:12:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce63500ns">
            <summary>
            Sets the counter channel’s comparator output to 63500 ns.
            </summary>
            <lastupdated>10/12/2006 12:13:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce127500ns">
            <summary>
            Sets the counter channel’s comparator output to 127500 ns.
            </summary>
            <lastupdated>10/12/2006 12:11:02 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce100us">
            <summary>
            Sets the counter channel’s comparator output to 100 us.
            </summary>
            <lastupdated>10/12/2006 12:09:31 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce300us">
            <summary>
            Sets the counter channel’s comparator output to 300 us.
            </summary>
            <lastupdated>10/12/2006 12:11:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce700us">
            <summary>
            Sets the counter channel’s comparator output to 700 us.
            </summary>
            <lastupdated>10/12/2006 12:13:11 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce1500us">
            <summary>
            Sets the counter channel’s comparator output to 1500 us.
            </summary>
            <lastupdated>10/12/2006 12:11:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce3100us">
            <summary>
            Sets the counter channel’s comparator output to 3100 us.
            </summary>
            <lastupdated>10/12/2006 12:11:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce6300us">
            <summary>
            Sets the counter channel’s comparator output to 6300 us.
            </summary>
            <lastupdated>10/12/2006 12:12:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce12700us">
            <summary>
            Sets the counter channel’s comparator output to 12700 us.
            </summary>
            <lastupdated>10/12/2006 12:10:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.Debounce25500us">
            <summary>
            Sets the counter channel’s comparator output to 25500 us.
            </summary>
            <lastupdated>10/12/2006 12:11:40 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceTime.DebounceNone">
            <summary>
            No debounce time is specified for the counter channel.
            </summary>
            <lastupdated>10/12/2006 12:14:18 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterDebounceMode">
            <summary>
            Specifies the options for setting the debounce mode.
            </summary>
            <lastupdated>10/12/2006 12:03:20 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceMode.TriggerAfterStable">
            <summary>
            Rejects glitches, and only passes state transitions after a specified period of stability (the debounce time). 
            </summary>
            <lastupdated>12/31/2010 10:02:14 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterDebounceMode.TriggerBeforeStable">
            <summary>
            Use when the input signal has groups of glitches, and each group is to be counted as one. 
            </summary>
            <lastupdated>12/31/2010 10:02:21 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterEdgeDetection">
            <summary>
            Specifies the options for setting the edge detection level.
            </summary>
            <lastupdated>10/12/2006 12:09:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterEdgeDetection.RisingEdge">
            <summary>
            Trigger is detected on the rising edge.
            </summary>
            <lastupdated>10/12/2006 5:09:18 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterEdgeDetection.FallingEdge">
            <summary>
            Trigger is detected on the falling edge.
            </summary>
            <lastupdated>10/12/2006 5:09:55 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CounterTickSize">
            <summary>
            Specifies the options for setting the tick size.
            </summary>
            <lastupdated>10/12/2006 12:09:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterTickSize.Tick20pt83ns">
            <summary>
            Sets the counter channel’s tick size to 20.83 ns.
            </summary>
            <lastupdated>10/12/2006 5:09:18 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterTickSize.Tick208pt3ns">
            <summary>
            Sets the counter channel’s tick size to 208.3 ns.
            </summary>
            <lastupdated>10/12/2006 5:09:18 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterTickSize.Tick2083pt3ns">
            <summary>
            Sets the counter channel’s tick size to 2083.3 ns.
            </summary>
            <lastupdated>10/12/2006 5:09:18 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.CounterTickSize.Tick20833pt3ns">
            <summary>
            Sets the counter channel’s tick size to 20833.3 ns.
            </summary>
            <lastupdated>10/12/2006 5:09:18 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ChannelType">
            <summary>
            Specifies the options for setting the channel type.
            </summary>
            <lastupdated>10/12/2006 11:45:57 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Analog">
            <summary>
            Analog input channel.
            </summary>
            <lastupdated>10/12/2006 11:40:27 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Digital8">
            <summary>
            8-bit digital input port.
            </summary>
            <lastupdated>10/12/2006 11:43:09 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Digital16">
            <summary>
            16-bit digital input port. (FirstPortA only)
            </summary>
            <lastupdated>10/12/2006 11:42:54 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Ctr16">
            <summary>
            16-bit counter channel.
            </summary>
            <lastupdated>10/12/2006 11:42:08 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Ctr32Low">
            <summary>
            Lower 16-bits of a 32-bit counter channel.
            </summary>
            <lastupdated>10/12/2006 11:42:36 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.Ctr32High">
            <summary>
            Upper 16-bits of a 32-bit counter channel.
            </summary>
            <lastupdated>10/12/2006 11:42:24 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.CJC">
            <summary>
            Cold junction compensation (CJC) channel.
            </summary>
            <lastupdated>10/12/2006 11:41:51 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.TC">
            <summary>
            Thermocouple channel. The TC channels must immediately follow their associated CJC channels in the channel array.
            </summary>
            <lastupdated>10/12/2006 11:44:11 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.SetpointStatus">
            <summary>
            The setpoint status register. This is a bit field indicating the state of each of the setpoints. A "1" indicates that the setpoint criteria has been met.
            </summary>
            <lastupdated>5/4/2010 2:36:19 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ChannelType.SetpointEnable">
            <summary>
            Enables a setpoint. When this option is specified, it must be OR'ed with the ChanTypeArray parameter values.
            </summary>
            <lastupdated>5/4/2010 2:35:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TriggerSource">
            <summary>
            Specifies the options for setting the trigger source.
            </summary>
            <lastupdated>10/12/2006 11:45:42 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigImmediate">
            <summary>
            Start trigger event only. Acquisition begins immediately upon invocation of the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.
            <para>No pre-trigger data acquisition is possible with this trigger type.</para>
            </summary>
            <lastupdated>11/21/2006 1:04:07 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigExtTTL">
            <summary>
            Start trigger event only. Acquisition begins on the selectable edge of an external TTL signal.
            </summary>
            <remarks>
            No pre-trigger data acquisition is possible with this trigger type.
            </remarks>
            <lastupdated>10/12/2006 12:16:41 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigAnalogHW">
            <summary>
            Start trigger event only. Data acquisition begins on the selected input signal criteria (above level, below level, rising edge, etc.). 
            </summary>
            <remarks>
            No pre-trigger data acquisition is possible with this trigger type.
            </remarks>
            <lastupdated>10/12/2006 12:16:16 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigAnalogSW">
            <summary>
            Post-trigger data acquisition begins on the selected input signal criteria (above level, below level, rising edge, etc.).
            </summary>
            <lastupdated>10/12/2006 11:28:33 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigDigPattern">
            <summary>
            Post-trigger data acquisition begins when a specified digital pattern is received on a specified digital port.
            </summary>
            <lastupdated>10/12/2006 11:29:20 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigCounter">
            <summary>
            Post-trigger data acquisition begins when specified counter criteria is detected.
            </summary>
            <lastupdated>10/12/2006 11:30:00 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSource.TrigScanCount">
            <summary>
            Stops collecting post-trigger data when the specified number of post-trigger scans are completed.
            </summary>
            <remarks>
            Stop trigger event only.
            </remarks>
            <lastupdated>10/12/2006 12:17:33 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TriggerSensitivity">
            <summary>
            Specifies the options for setting trigger sensitivity.
            </summary>
            <lastupdated>10/12/2006 11:45:37 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.RisingEdge">
            <summary>
            Triggers when the signal goes from low to high (TTL trigger), or rises through a specified level (hardware analog, software analog, and counter).
            </summary>
            <lastupdated>10/12/2006 11:23:42 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.FallingEdge">
            <summary>
            Triggers when the signal goes from high to low (TTL trigger), or falls through a specified level (hardware analog, software analog, and counter).
            </summary>
            <lastupdated>10/12/2006 11:23:29 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.AboveLevel">
            <summary>
            Triggers when the signal is above a specified level (hardware analog, software analog, counter, and digital pattern).
            </summary>
            <lastupdated>10/12/2006 11:23:11 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.BelowLevel">
            <summary>
            Triggers when the signal is below a specified level (hardware analog, software analog, counter, and digital pattern).
            </summary>
            <lastupdated>10/12/2006 11:23:15 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.EqLevel">
            <summary>
            Triggers when the signal is equal to a specified level (hardware analog, software analog, counter, and digital pattern).
            </summary>
            <lastupdated>10/12/2006 11:23:22 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerSensitivity.NeLevel">
            <summary>
            Triggers when the signal does not equal a specified level (hardware analog, software analog, counter, and digital pattern).
            </summary>
            <lastupdated>10/12/2006 11:23:37 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TriggerEvent">
            <summary>
            Specifies the options for trigger events.
            </summary>
            <lastupdated>10/12/2006 11:45:32 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerEvent.Start">
            <summary>
            Defines the conditions when post-trigger acquisition data collection is initiated or triggered.
            </summary>
            <comment>
            	<remarks>
            This event can vary in complexity from starting immediately, to starting on complex channel value definitions.</remarks>
            </comment>
            <lastupdated>12/31/2010 10:40:09 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TriggerEvent.Stop">
            <summary>
            Signals the current data acquisition process to terminate. 
            </summary>
            <comment>
            	<remarks>
            This event can be as simple as that of a scan count, or as complex as involving a channel value level condition.
            </remarks>
            </comment>
            <lastupdated>12/31/2010 10:40:18 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SetpointFlag">
            <summary>
            Specifies the available options for setting the flag type.
            </summary>
            <lastupdated>2/13/2008 11:20:24 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.EqualLimitA">
            <summary>
            Setpoint criteria, where the input channel is equal to limit A.
            </summary>
            <lastupdated>6/26/2007 2:15:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.LessThanLimitA">
            <summary>
            Setpoint criteria, where the input channel is less than limit A.
            </summary>
            <lastupdated>6/26/2007 2:06:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.InsideLimits">
            <summary>
            Setpoint criteria, where the input channel is greater than limit A and less than limit B.
            </summary>
            <lastupdated>6/26/2007 2:07:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.GreaterThanLimitB">
            <summary>
            Setpoint criteria, where the input channel is greater than limit B.
            </summary>
            <lastupdated>6/26/2007 2:07:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.OutsideLimits">
            <summary>
            Setpoint criteria, where the input channel is less than limit A and greater than limit B.
            </summary>
            <lastupdated>6/26/2007 2:07:58 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.Hysteresis">
            <summary>
            Setpoint criteria. If the input channel is greater than limit A, output value 1. If the input channel is less than limit B, output value 2.
            </summary>
            <lastupdated>6/26/2007 2:16:34 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.UpdateOnTrueOnly">
            <summary>
            If the setpoint criteria is met then output value 1. If the setpoint criteria is not met then output value 2.
            </summary>
            <lastupdated>6/26/2007 2:17:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointFlag.UpdateOnTrueAndFalse">
            <summary>
            If the setpoint criteria is met then output value 1.
            </summary>
            <lastupdated>6/26/2007 2:17:05 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.SetpointOutput">
            <summary>
            Specifies the available options for setting the output source.
            </summary>
            <lastupdated>2/13/2008 11:21:45 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.None">
            <summary>
            Performs no outputs.
            </summary>
            <lastupdated>6/26/2007 2:15:16 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.DigitalPort">
            <summary>
            Output to digital port when the setpoint criteria is met.
            </summary>
            <lastupdated>6/26/2007 2:15:02 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.FirstPortC">
            <summary>
            Output to FIRSTPORTC when the setpoint criteria is met.
            </summary>
            <lastupdated>6/26/2007 2:15:02 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.DAC0">
            <summary>
            Output to DAC0 when the setpoint criteria is met. The Measurement Computing device must have a DAC0 signal.
            </summary>
            <lastupdated>6/26/2007 2:14:04 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.DAC1">
            <summary>
            Output to DAC1 when the setpoint criteria is met. The Measurement Computing device must have a DAC1 signal.
            </summary>
            <lastupdated>6/26/2007 2:14:17 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.DAC2">
            <summary>
            Output to DAC2 when the setpoint criteria is met. The Measurement Computing device must have a DAC2 signal.
            </summary>
            <lastupdated>6/26/2007 2:14:30 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.DAC3">
            <summary>
            Output to DAC3 when the setpoint criteria is met. The Measurement Computing device must have a DAC3 signal.
            </summary>
            <lastupdated>6/26/2007 2:14:44 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.TMR0">
            <summary>
            Output to timer 0 when the setpoint criteria is met.
            </summary>
            <lastupdated>6/26/2007 2:15:29 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.SetpointOutput.TMR1">
            <summary>
            Output to timer 1 when the setpoint criteria is met.
            </summary>
            <lastupdated>6/26/2007 2:15:37 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.IdleState">
            <summary>
            Specifies the options used to set the output resting state.
            </summary>
            <lastupdated>12/31/2008 11:22:09 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IdleState.Low">
            <summary>
            The resting state of the output is low.
            </summary>
            <lastupdated>12/30/2008 5:33:19 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.IdleState.High">
            <summary>
            The resting state of the output is high.
            </summary>
            <lastupdated>12/30/2008 5:33:08 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.TEDSReadOptions">
            <summary>
            Specifies the options for reading data from a TEDS sensor into an array.
            </summary>
            <lastupdated>5/4/2010 3:03:45 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.TEDSReadOptions.Default">
            <summary>
            Reserved for future use.
            </summary>
            <lastupdated>2/20/2006 4:47:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.GlobalConfig">
            <exclude/>
            <lastupdated>2/21/2006 11:30:35 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.GlobalConfig.#ctor">
            <summary>
            Creates a <see cref="T:MccDaq.GlobalConfig"/>.
            </summary>
            <lastupdated>10/18/2006 3:09:55 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.GlobalConfig.NumBoards">
            <exclude/>
            <lastupdated>2/21/2006 11:27:58 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.GlobalConfig.Version">
            <exclude/>
            <lastupdated>2/21/2006 11:28:11 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.GlobalConfig.NumExpBoards">
            <exclude/>
            <lastupdated>2/21/2006 11:28:06 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ErrorInfo">
            <summary>
            Use to store and report error codes and messages 
            </summary>
        </member>
        <member name="M:MccDaq.ErrorInfo.#ctor">
            <summary>
            Creates an <see cref="T:MccDaq.ErrorInfo"/>.
            </summary>
            <lastupdated>10/18/2006 2:56:49 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.ErrorInfo.#ctor(System.Int32)">
            <summary>
            Creates an <see cref="T:MccDaq.ErrorInfo"/>.
            </summary>
            <param name="errorNum">
            Number of the error to generate.
            </param>
            <lastupdated>10/18/2006 3:01:19 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.ErrorInfo.SetError(MccDaq.ErrorInfo.ErrorCode)">
            <exclude/>
            <lastupdated>10/18/2006 3:01:27 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.ErrorInfo.mLogToFile">
            <exclude/>
            <lastupdated>10/18/2006 3:01:42 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.ErrorInfo.Value">
            <summary>
            Gets the error constant associated with an ErrorInfo object. 
            Most UL for .NET methods return an ErrorInfo object. If an error occurs, an ErrorInfo object is returned with a non-zero value in the Value property.
            Refer to the <see cref="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)"/>  method for an alternate method of handling errors. 
            </summary>
            <value>
            The default value is "0" (no error has occurred.)
            </value>
            <lastupdated>11/21/2006 4:41:51 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.ErrorInfo.Message">
            <summary>
            Gets the error message associated with a specific error code (ErrorInfo object). Most UL for .NET methods return an ErrorInfo object. If no error occurred, an ErrorInfo object is returned with the Message property set to <format type="italics">No error has occurred</format>.
            Refer to the <see cref="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)"/> method for an alternate method of handling errors. 
            </summary>
            <value>
            The default value is <format type="italics">No error has occurred</format>.
            </value>
            <lastupdated>11/21/2006 4:46:05 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.ErrorInfo.LogToFile">
            <exclude/>
            <lastupdated>2/16/2006 11:12:47 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.ErrorInfo.ErrorCode">
            <summary>
            Provides functionality for storing and reporting error codes and messages. Error information is stored internally on the return from calling the low-level Universal Library function. The error is reported when the user calls the class library functions.
            </summary>
            <lastupdated>3/6/2006 2:34:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoErrors">
            <summary>
            Error code: <c>0</c>
            	<para>Message: <format type="italics">No error has occurred.</format></para>
            	<para>The method executed successfully</para>
            </summary>
            <lastupdated>2/16/2006 9:16:52 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBoard">
            <summary>
            Error code: <c>1</c>
            	<para>Message: <format type="italics">Invalid board number.</format></para>
            	<para>The Measurement Computing device number that was specified does not match any of the Measurement Computing devices that are listed in the configuration file. Run the configuration program to check which Measurement Computing device numbers are configured.</para>
            </summary>
            <lastupdated>2/15/2006 11:12:12 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DeadDigitalDev">
            <summary>
            Error code: <c>2</c>
            	<para>Message: <format type="italics">Digital device is not responding - is base address correct?</format></para>
            	<para>The digital device on the specified Measurement Computing device is not responding. Either the Measurement Computing device was installed incorrectly or it is defective. Run <format type="italics">Insta</format>Cal and make sure that the correct Measurement Computing device was installed.</para>
            </summary>
            <lastupdated>3/27/2006 1:04:41 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DeadCounterDev">
            <summary>
            Error code: <c>3</c>
            	<para>Message: <format type="italics">Counter device is not responding - is base address correct?</format></para>
            	<para>The counter device on the specified Measurement Computing device is not responding. Either the Measurement Computing device was installed incorrectly or the Measurement Computing device is defective. Run <format type="italics">Insta</format>Cal and make sure that the correct Measurement Computing device was installed.</para>
            </summary>
            <lastupdated>3/27/2006 1:05:50 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DeadDaDev">
            <summary>
            Error code: <c>4</c>
            	<para>Message: <format type="italics">D/A is not responding - is base address correct?</format></para>
            	<para>The D/A device on the specified Measurement Computing device is not responding. Either the Measurement Computing device was installed incorrectly or it is defective. Run <format type="italics">Insta</format>Cal and make sure that the correct Measurement Computing device was installed.</para>
            </summary>
            <lastupdated>3/27/2006 1:05:26 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DeadAdDev">
            <summary>
            Error code: <c>5</c>
            	<para>Message: <format type="italics">A/D is not responding - is base address correct?</format></para>
            	<para>The A/D device on the specified Measurement Computing device is not responding. Either the Measurement Computing device was installed incorrectly or the Measurement Computing device is defective. Run <format type="italics">Insta</format>Cal and make sure that the correct Measurement Computing device was installed.</para>
            </summary>
            <lastupdated>3/27/2006 1:06:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotDigitalConf">
            <summary>
            Error code: <c>6</c>
            	<para>Message: <format type="italics">Selected board does not have digital I/O.</format></para>
            	<para>A digital I/O method was called with a Measurement Computing device number that referred to a Measurement Computing device that does not support digital I/O. Run the configuration program to see which type of Measurement Computing device that the board number refers to.</para>
            </summary>
            <lastupdated>3/27/2006 3:15:40 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotCounterConf">
            <summary>
            Error code: <c>7</c>
            	<para>Message: <format type="italics">Selected board does not have a counter.</format></para>
            	<para>A counter method was called with a Measurement Computing device number that referred to a Measurement Computing device that does not have a counter. Run the configuration program to see which type of Measurement Computing device that the board number refers to.</para>
            </summary>
            <lastupdated>3/27/2006 3:15:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotDaConf">
            <summary>
            Error code: <c>8</c>
            	<para>Message: <format type="italics">Selected board does not have a D/A.</format></para>
            	<para>An analog output method was called with a Measurement Computing device number that referred to a Measurement Computing device that does not have an analog output (D/A). Run the configuration program to see which type of Measurement Computing device that the board number refers to.</para>
            </summary>
            <lastupdated>3/27/2006 3:15:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotAdConf">
            <summary>
            Error code: <c>9</c>
            	<para>Message: <format type="italics">Selected board does not have an A/D.</format></para>
            	<para>An analog input method was called with a Measurement Computing device number that referred to a Measurement Computing device that does not have an analog input (A/D). Run the configuration program to see which type of Measurement Computing device that board number refers to.</para>
            </summary>
            <lastupdated>2/16/2006 9:23:25 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotMuxConf">
            <summary>
            Error code: <c>10</c>
            	<para>Message: <format type="italics">Selected board does not have thermocouple inputs.</format></para>
            	<para>A thermocouple input method was called with a Measurement Computing device number that does not support thermocouple inputs, or is not connected to a Measurement Computing EXP device. Run the configuration program to view/change the Measurement Computing device configuration.</para>
            </summary>
            <lastupdated>2/16/2006 9:25:23 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPortNum">
            <summary>
            Error code: <c>11</c>
            	<para>Message: <format type="italics">Invalid digital port number.</format></para>
            	<para>The port number that was specified for a digital I/O method does not exist on the Measurement Computing device that was specified.</para>
            </summary>
            <lastupdated>3/26/2006 10:17:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCounterDevNum">
            <summary>
            Error code: <c>12</c>
            	<para>Message: <format type="italics">Invalid counter device.</format></para>
            	<para>The counter number that was specified for a counter method does not exist on the Measurement Computing device that was specified.</para>
            </summary>
            <lastupdated>3/26/2006 10:09:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDaDevNum">
            <summary>
            Error code: <c>13</c>
            	<para>Message: <format type="italics">Invalid D/A device.</format></para>
            	<para>The D/A channel that was specified for an analog output method does not exist on the Measurement Computing device that was specified.</para>
            </summary>
            <lastupdated>2/15/2006 5:18:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadSampleMode">
            <summary>
            Error code: <c>14</c>
            	<para>Message: <format type="italics">Invalid sample mode.</format></para>
            	<para>A sample mode that is not supported on this Measurement Computing device (<format type="italics"><see cref="F:MccDaq.ScanOptions.SingleIo"/></format>, <format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format> or <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format>) was specified in the <format type="italics">options</format> argument. Try running the method without setting any of the sample mode options.</para>
            </summary>
            <lastupdated>3/26/2006 10:18:40 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadInt">
            <summary>
            Error code: <c>15</c>
            	<para>Message: <format type="italics">Board configured for invalid interrupt level.</format></para>
            	<para>No interrupt was selected in InstaCal and one is required, or the Measurement Computing device is set for "compatible mode" and the interrupt level selected is not supported in this mode. Interrupts above 7 are not valid in compatible mode. Either change the switch setting on the Measurement Computing device to "enhanced mode," or change the interrupt level with the configuration program to something less than 8.</para>
            </summary>
            <lastupdated>3/26/2006 8:46:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadAdChan">
            <summary>
            Error code: <c>16</c>
            	<para>Message: <format type="italics">Invalid A/D channel number.</format></para>
            	<para>An invalid channel argument was passed to an analog input function. The range of valid channel numbers depends on which Measurement Computing A/D board you are using. For boards with switch-configurable ranges, run the configuration program and check how many channels the board is configured for. 
            </para>
            </summary>
            <lastupdated>11/13/2006 5:14:50 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCount">
            <summary>
            Error code: <c>17</c>
            	<para>Message: <format type="italics">Invalid count.</format></para>
            	<para>An invalid <format type="italics">count</format> parameter was specified to a method.</para>
            	<para>If this error occurs during the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, increasing the <format type="italics">count</format> should correct the problem. For Measurement Computing devices using <format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format>, adjust the data buffer and <format type="italics">count</format> above (<format type="italics">highChan</format>-<format type="italics">lowChan</format>+1)*<format type="italics">rate</format>/100 for <format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> mode scans. However, those Measurement Computing devices using <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> require a user buffer and <format type="italics">count</format> large enough to hold at least one half FIFO worth of samples (typically, 512 samples) for <format type="italics">Continuous</format> mode scans.</para>
            </summary>
            <lastupdated>3/26/2006 10:08:51 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCntrConfig">
            <summary>
            Error code: <c>18</c>
            	<para>Message: <format type="italics">Invalid counter configuration specified.</format></para>
            	<para>An invalid <format type="italics">config</format> parameter was passed to the <see cref="M:MccDaq.MccBoard.C8254Config(System.Int32,MccDaq.C8254Mode)"/> method. The only legal values are <format type="italics"><see cref="F:MccDaq.C8254Mode.HardwareStrobe"/></format>, <format type="italics"><see cref="F:MccDaq.C8254Mode.HighOnLastCount"/></format>, <format type="italics"><see cref="F:MccDaq.C8254Mode.OneShot"/></format>, <format type="italics"><see cref="F:MccDaq.C8254Mode.RateGenerator"/></format>, <format type="italics"><see cref="F:MccDaq.C8254Mode.SoftwareStrobe"/></format>, and <format type="italics"><see cref="F:MccDaq.C8254Mode.SquareWave"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:02:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDaVal">
            <summary>
            Error code: <c>19</c>
            	<para>Message: <format type="italics">Invalid D/A value.</format></para>
            	<para>An invalid D/A value was passed as a parameter to an analog output method. The only legal values are 0 - 4095 for 12 bit Measurement Computing devices or 0-65,535 for 16 bit Measurement Computing devices (see notes on signed integers).</para>
            </summary>
            <lastupdated>2/15/2006 5:18:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDaChan">
            <summary>
            Error code: <c>20</c>
            	<para>Message: <format type="italics">Invalid D/A channel number.</format></para>
            	<para>An invalid D/A channel was passed as a parameter to an analog output method. The legal range of values depends on which D/A Measurement Computing device you are using. Refer to the Measurement Computing device manual to find how many D/A channels it has.</para>
            </summary>
            <lastupdated>2/15/2006 5:17:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.AlreadyActive">
            <summary>Error code: <c>22</c>
            	<para>Message: <format type="italics">Background operation already in progress.</format></para>
            	<para>An attempt was made to start a second background process on the same Measurement Computing device before the first one had completed. Background processes are started whenever the BACKGROUND option is used or by the <see cref="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)"/> method. To stop a background operation, call the <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. To wait for a background process to complete, call the <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method and wait for status=IDLE.</para>
            </summary>
            <lastupdated>2/15/2006 10:57:21 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.PageOverrun">
            <summary>
            Error code: <c>23</c>
            	<para>Message: <format type="italics">DMA transfer crossed page boundary, may have gaps in data.</format></para>
            	<para>When a DMA transfer crosses a 64K memory page boundary on Measurement Computing devices without FIFO buffers, there may be a small gap (missing samples) in the data. For applications requiring high speed transfers of greater than 32K samples, please select a Measurement Computing device with a FIFO buffer. For Measurement Computing devices without, check the data for gaps and do not specify rates over that at which gap-less data may be taken. This is system specific and you must determine the rate by experimentation.</para>
            </summary>
            <lastupdated>2/16/2006 9:31:07 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadRate">
            <summary>
            Error code: <c>24</c>
            	<para>Message: <format type="italics">Invalid sampling rate.</format></para>
            	<para>Invalid sampling rate parameter was specified. The rate was either zero, a negative number or it was higher than the selected Measurement Computing device supports. Refer to Measurement Computing device-specific information for maximum rates for each Measurement Computing device.</para>
            </summary>
            <lastupdated>2/15/2006 5:30:11 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CompatMode">
            <summary>
            Error code: <c>25</c>
            	<para>Message: <format type="italics">Board switches set for Compatible mode.</format></para>
            	<para>An operation was attempted that is not possible when the Measurement Computing device's switch is set for 'compatible' operation. Most likely causes are using the <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> option or the pre-triggering functions. Either turn off the 'compatible' mode switch on the Measurement Computing device or don't use the <format type="italics">BlockIO</format> option or the pre-triggering functions.</para>
            </summary>
            <lastupdated>3/26/2006 10:21:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.TrigState">
            <summary>
            Error code: <c>26</c>
            	<para>Message: <format type="italics">Incorrect initial trigger state - trigger must start at TTL low.</format></para>
            	<para>Boards that use "polled gate" triggering require that the trigger be "off" when a pre-trigger method is first called. It then waits for the trigger signal. Make sure that the Trigger Input line (usually D0) is held at TTL low before calling the pre-trigger method.</para>
            </summary>
            <lastupdated>3/24/2006 3:00:03 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.AdStatusHung">
            <summary>
            Error code: <c>27</c>
            	<para>Message: <format type="italics">A/D is not responding.</format></para>
            	<para>The A/D Measurement Computing device is not responding as it should. Usually indicates some kind of hardware problem - either defective hardware or more than one board at the same base address.</para>
            </summary>
            <lastupdated>2/15/2006 10:57:05 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.TooFew">
            <summary>
            Error code: <c>28</c>
            	<para>Message: <format type="italics">Trigger occurred before requested number of samples were collected.</format></para>
            	<para>A pre-trigger method was called and the trigger signal occurred before the requested number of samples could be collected. This is only a warning message. The method continues anyway. The data that was returned to the array contains fewer than the expected number of points. The method returns the actual number of pre-trigger points and the total number of points.</para>
            </summary>
            <lastupdated>3/27/2006 2:56:29 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Overrun">
            <summary>
            Error code: <c>29</c>
            	<para>Message: <format type="italics">Data overrun - data was lost.</format></para>
            	<para>Data was lost during an analog input because the computer could not keep up with the A/D sampling rate. This typically can only happen with the file input methods or using <format type="italics"><see cref="F:MccDaq.ScanOptions.SingleIo"/></format> mode. Possible solutions include lowering the sampling rate, defragmenting the "streamer" file, switching to a RAM disk, or lowering the count.</para>
            </summary>
            <lastupdated>3/27/2006 2:58:38 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadRange">
            <summary>
            Error code: <c>30</c>
            	<para>Message: <format type="italics">Invalid voltage or current range.</format></para>
            	<para>Invalid Range parameter was specified to an analog input or output method. The Measurement Computing device does not support the gain you specified. Refer to Measurement Computing device-specific information for a list of allowable ranges for each Measurement Computing device.</para>
            </summary>
            <lastupdated>2/15/2006 5:29:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoProgGain">
            <summary>
            Error code: <c>31</c>
            	<para>Message: <format type="italics">This A/D board does not have programmable gain.</format></para>
            	<para>Invalid <format type="italics">range</format> parameter was passed to an analog input method. The selected Measurement Computing device does not support programmable gains so the only valid <format type="italics">range</format> parameter is 0. (This parameter is ignored for these Measurement Computing device types in later versions of the library.)</para>
            </summary>
            <lastupdated>3/27/2006 3:18:40 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadFileName">
            <summary>
            Error code: <c>32</c>
            	<para>Message: <format type="italics">Specified file name is not valid.</format></para>
            	<para>The <format type="italics">fileName</format> parameter that was passed to a file method is not valid. It is either an empty string or a NULL pointer.</para>
            </summary>
            <lastupdated>2/15/2006 5:21:38 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DiskIsFull">
            <summary>
            Error code: <c>33</c>
            	<para>Message: <format type="italics">Disk is full, could not complete operation.</format></para>
            	<para>A file operation failed before completing because the disk that it was writing to is full. Try erasing some unneeded files from the disk.</para>
            </summary>
            <lastupdated>3/24/2006 3:02:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CompatWarn">
            <summary>
            Error code: <c>34</c>
            	<para>Message: <format type="italics">Board switch set to compatible mode - sampling speed may be limited.</format></para>
            	<para>The Measurement Computing device's switch is set for 'Compatible mode". When in "compatible mode" <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> transfers are not possible. <format type="italics">BlockIo</format> sampling was specified but it has automatically been changed to <format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format>  transfers. The maximum sampling rate is limited to the maximum rate for DMA transfers. Change the "compatible mode" switch on the Measurement Computing device if you want to use <format type="italics">BlockIo</format> transfers.</para>
            </summary>
            <lastupdated>3/27/2006 3:44:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPointer">
            <summary>
            Error code: <c>35</c>
            	<para>Message: <format type="italics">Pointer is not valid.</format></para>
            	<para>An invalid (NULL) pointer was passed as a parameter to a method.</para>
            </summary>
            <lastupdated>2/15/2006 5:27:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.TooManyGains">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/7/2006 2:05:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.RateWarning">
            <summary>
            Error code: <c>37</c>
            	<para>Message: <format type="italics">Sample rate may be too fast for SINGLEIO mode.</format></para>
            	<para>The specified sampling rate MAY be too high. The maximum allowable sampling rate depends very much on the computer that the program is running on. This warning is generated based on the slowest CPU speed. Your computer may be able to sustain faster rates, but, you should expect the computer to lock up (fail to respond to keyboard input) if you do exceed the sampling rate your computer can sustain.</para>
            </summary>
            <lastupdated>2/16/2006 9:32:16 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ConvertDma">
            <summary>
            Error code: <c>38</c>
            	<para>Message: <format type="italics">CONVERTDATA cannot be used with DMA I/O and BACKGROUND.</format></para>
            	<para>The <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> and <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options can not be used together when the Measurement Computing device is transferring data via DMA. 
            <para>Possible solutions include:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Using the <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to convert the data after it is collected. <format type="bold">Do not use</format> the <format type="italics">Background</format> option. 
            </description>
            			</item>
            			<item>
            				<description>
            Using the <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> option if your A/D Measurement Computing device supports it. 
            </description>
            			</item>
            			<item>
            				<description>
            Using the <format type="italics"><see cref="F:MccDaq.ScanOptions.SingleIo"/></format>option if your computer is fast enough to support the selected sampling rate.
            </description>
            			</item>
            		</list></para>
            </summary>
            <lastupdated>3/27/2006 1:23:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DtConnectErr">
            <summary>
            Error code: <c>39</c>
            	<para>Message: <format type="italics">Board does not support the DTCONNECT option.</format></para>
            	<para>The <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> option was passed to an analog input method. The selected Measurement Computing device does not support that option.</para>
            </summary>
            <lastupdated>3/27/2006 3:42:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ForeContinuous">
            <summary>
            Error code: <c>40</c>
            	<para>Message: <format type="italics">CONTINUOUS can only be run with BACKGROUND .</format></para>
            	<para>The <format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> option was passed to a method without also setting the <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> option. This is not allowed. Any time you set the <format type="italics">Continuous</format> option you must also set the <format type="italics">Background</format> option.</para>
            </summary>
            <lastupdated>3/27/2006 3:40:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBoardType">
            <summary>
            Error code: <c>41</c>
            	<para>Message: <format type="italics">This method can not be used with this board.</format></para>
            	<para>An attempt was made to call a method for a Measurement Computing device that does not support that method.</para>
            </summary>
            <lastupdated>2/15/2006 5:08:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.WrongDigConfig">
            <summary>
            Error code: <c>42</c>
            	<para>Message: <format type="italics">Digital port not configured correctly for requested operation.</format></para>
            	<para>An attempt was made to use a digital input method on a port that was configured as an output or vice versa. Use the <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method or the <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method to switch the direction of the port or it's bits.</para>
            </summary>
            <lastupdated>2/16/2006 9:35:17 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotConfigurable">
            <summary>
            Error code: <c>43</c>
            	<para>Message: <format type="italics">This digital port is not configurable (it's an in/out port).</format></para>
            	<para>The <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method or the <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method was called for a port that is not configurable. Check the <format type="italics">portNumber</format> parameter and the Measurement Computing device documentation to make sure that it is configurable. If not, then there is no need to call this method.</para>
            </summary>
            <lastupdated>3/27/2006 3:16:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPortConfig">
            <summary>
            Error code: <c>44</c>
            	<para>Message: <format type="italics">Invalid digital port configuration.</format></para>
            	<para>The <paramref name="direction"/> parameter passed to the <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method or the <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method is invalid. It must be set to either <format type="italics"><see cref="F:MccDaq.DigitalPortDirection.DigitalIn"/></format> or <format type="italics"><see cref="F:MccDaq.DigitalPortDirection.DigitalOut"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:56:52 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadFirstPoint">
            <summary>
            Error code: <c>45</c>
            	<para>Message: <format type="italics">First point number is not valid.</format></para>
            	<para>The <paramref name="firstPoint"/> parameter to the <see cref="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Int16@)"/> method is invalid. It is either a negative number or it is larger then the number of points in the file.</para>
            </summary>
            <lastupdated>2/22/2006 9:35:09 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.EndOfFile">
            <summary>
            Error code: <c>46</c>
            	<para>Message: <format type="italics">Attempted to read past the end of the file.</format></para>
            	<para>The <see cref="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Int16@)"/> method attempted to read beyond the end of the file. Check the file length with the <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method and make sure that the <format type="italics">firstPoint</format> and <format type="italics">count </format> parameters to the <see cref="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Int16@)"/> method are correct for that file length.</para>
            </summary>
            <lastupdated>3/27/2006 3:41:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Not8254Ctr">
            <summary>
            Error code: <c>47</c>
            	<para>Message: <format type="italics">This board does not have an 8254 counter.</format></para>
            	<para>The <see cref="M:MccDaq.MccBoard.C8254Config(System.Int32,MccDaq.C8254Mode)"/> method was called for a Measurement Computing device that has a counter but not an 8254 counter. This method can only be used with an 8254 counter.</para>
            </summary>
            <lastupdated>3/27/2006 3:17:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Not9513Ctr">
            <summary>
            Error code: <c>48</c>
            	<para>Message: <format type="italics">This board does not have a 9513 counter.</format></para>
            	<para>A method was called for a Measurement Computing device that has a counter but not a 9513 counter. This method can only be used with a 9513 counter.</para>
            </summary>
            <lastupdated>3/27/2006 3:16:52 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTrigType">
            <summary>
            Error code: <c>49</c>
            	<para>Message: <format type="italics">Invalid TrigType.</format></para>
            	<para><see cref="M:MccDaq.MccBoard.ATrig(System.Int32,MccDaq.TriggerType,System.Int16,MccDaq.Range,System.Int16@)"/> method was called with an invalid <format type="italics">trigType</format> parameter. It must be set to either <format type="italics"><see cref="F:MccDaq.TriggerType.TrigAbove"/></format> or <format type="italics"><see cref="F:MccDaq.TriggerType.TrigBelow"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:31:53 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTrigValue">
            <summary>
            Error code: <c>50</c>
            	<para>Message: <format type="italics">Invalid TrigValue.</format></para>
            	<para><see cref="M:MccDaq.MccBoard.ATrig(System.Int32,MccDaq.TriggerType,System.Int16,MccDaq.Range,System.Int16@)"/> method was called with an invalid <format type="italics">trigValue</format> parameter. It must be in the range 0 - 4095 for 12-bit Measurement Computing devices or 0 to 65535 for 16-bit Measurement Computing devices.</para>
            </summary>
            <lastupdated>3/26/2006 9:32:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadOption">
            <summary>
            Error code: <c>52</c>
            	<para>Message: <format type="italics">Invalid option specified for this method.</format></para>
            	<para>The <format type="italics">option</format> parameter contains an option that is not valid for this method.</para>
            </summary>
            <lastupdated>3/26/2006 8:51:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPretrigCount">
            <summary>
            Error code: <c>53</c>
            	<para>Message: <format type="italics">Invalid PreTrigCount specified.</format></para>
            	<para>Either the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or the <see cref="M:MccDaq.MccBoard.FilePretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> method was called with an invalid <format type="italics">preTrigCount</format> parameter.  </para>
            </summary>
            <lastupdated>3/26/2006 8:02:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDivider">
            <summary>
            Error code: <c>55</c>
            	<para>Message: <format type="italics">Invalid FOutDivider value.</format></para>
            	<para>The <format type="italics">fOutDivider</format> parameter for the <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method is not valid. It must be in the range 0 - 15.</para>
            </summary>
            <lastupdated>3/26/2006 10:13:59 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadSource">
            <summary>
            Error code: <c>56</c>
            	<para>Message: <format type="italics">Invalid FOutSource value.</format></para>
            	<para>The <format type="italics">FOutSource</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method is not valid. It must be one of the following values: <format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput1"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput2"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput3"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput4"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput5"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Gate1"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Gate2"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Gate3"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Gate4"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Gate5"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Freq1"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Freq2"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Freq3"/></format>, <format type="italics"><see cref="F:MccDaq.CounterSource.Freq4"/></format>, or <format type="italics"><see cref="F:MccDaq.CounterSource.Freq5"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:10:20 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCompare">
            <summary>
            Error code: <c>57</c>
            	<para>Message: <format type="italics">Invalid compare value.</format></para>
            	<para>One or both of the <format type="italics">compare</format> parameters to <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method are not valid. They must be set to <format type="italics"><see cref="F:MccDaq.CompareValue.Enabled"/></format> or <format type="italics"><see cref="F:MccDaq.CompareValue.Disabled"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:03:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTimeOfDay">
            <summary>
            Error code: <c>58</c>
            	<para>Message: <format type="italics">Invalid TimeOfDay value.</format></para>
            	<para>The <format type="italics">timeOfDay</format> parameter for the <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.TimeOfDay.Disabled"/></format>, <format type="italics"><see cref="F:MccDaq.TimeOfDay.One"/></format>, <format type="italics"><see cref="F:MccDaq.TimeOfDay.Two"/></format>, or <format type="italics"><see cref="F:MccDaq.TimeOfDay.Three"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:25:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadGateInterval">
            <summary>
            Error code: <c>59</c>
            	<para>Message: <format type="italics">Invalid Gate Interval value.</format></para>
            	<para>The <format type="italics">gateInterval</format> parameter to <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method is not valid. It must be greater than 0.</para>
            </summary>
            <lastupdated>3/26/2006 8:40:05 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadGateCntrl">
            <summary>
            Error code: <c>60</c>
            	<para>Message: <format type="italics">Invalid Gate Control value.</format></para>
            	<para>The <format type="italics">gateControl</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be in the range 0 -7.</para>
            </summary>
            <lastupdated>3/26/2006 8:39:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCounterEdge">
            <summary>
            Error code: <c>61</c>
            	<para>Message: <format type="italics">Invalid Counter Edge value.</format></para>
            	<para>The <format type="italics">counterEdge</format> parameter for the  <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.CountEdge.PositiveEdge"/></format> or <format type="italics"><see cref="F:MccDaq.CountEdge.NegativeEdge"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:10:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadSpclGate">
            <summary>
            Error code: <c>62</c>
            	<para>Message: <format type="italics">Invalid SpecialGate value.</format></para>
            	<para>The <format type="italics">specialGate</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format> or <format type="italics"><see cref="F:MccDaq.OptionState.Disabled"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:18:59 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadReload">
            <summary>
            Error code: <c>63</c>
            	<para>Message: <format type="italics">Invalid Reload value.</format></para>
            	<para>The <format type="italics">reload</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.Reload.LoadReg"/></format> or <format type="italics"><see cref="F:MccDaq.Reload.LoadAndHoldReg"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:09:08 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadRecycleFlag">
            <summary>
            Error code: <c>64</c>
            	<para>Message: <format type="italics">Invalid Recycle Mode value.</format></para>
            	<para>The <format type="italics">recycleMode</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.RecycleMode.OneTime"/></format> or <format type="italics"><see cref="F:MccDaq.RecycleMode.Recycle"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:07:44 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBcdFlag">
            <summary>
            Error code: <c>65</c>
            	<para>Message: <format type="italics">Invalid BCD Mode value.</format></para>
            	<para>The BCDMode parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either ENABLED or DISABLED (1 or 0).</para>
            </summary>
            <lastupdated>2/15/2006 11:05:05 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDirection">
            <summary>
            Error code: <c>66</c>
            	<para>Message: <format type="italics">Invalid Count Direction value.</format></para>
            	<para>The <format type="italics">countDirection</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.CountDirection.CountUp"/></format> or <format type="italics"><see cref="F:MccDaq.CountDirection.CountDown"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:13:26 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadOutControl">
            <summary>
            Error code: <c>67</c>
            	<para>Message: <format type="italics">Invalid Output Control value.</format></para>
            	<para>The <format type="italics">outputControl</format> parameter to <see cref="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)"/> method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.C9513OutputControl.AlwaysLow"/></format>, <format type="italics"><see cref="F:MccDaq.C9513OutputControl.Disconnected"/></format>, <format type="italics"><see cref="F:MccDaq.C9513OutputControl.HighPulseOnTc"/></format>, <format type="italics"><see cref="F:MccDaq.C9513OutputControl.LowPulseOnTc"/></format>, or <format type="italics"><see cref="F:MccDaq.C9513OutputControl.ToggleOnTc"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:54:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBitNumber">
            <summary>
            Error code: <c>68</c>
            	<para>Message: <format type="italics">Invalid BitNum specified.</format></para>
            	<para>The BitNum parameter to <see cref="M:MccDaq.MccBoard.DBitIn(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState@)"/> method or <see cref="M:MccDaq.MccBoard.DBitOut(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState)"/> method is not valid. The valid range of bit numbers depends on the selected Measurement Computing device. If it is a DIO24 compatible Measurement Computing device, the maximum bit number is 23. If it's a DIO96 Measurement Computing device, the maximum bit number is 95. (See Measurement Computing device-specific information.)</para>
            </summary>
            <lastupdated>2/15/2006 11:05:31 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoneEnabled">
            <summary>
            Error code: <c>69</c>
            	<para>Message: <format type="italics">None of the counter channels were enabled.</format></para>
            	<para>None of the counter channels were marked as <format type="italics"><see cref="F:MccDaq.CounterControl.Enabled"/></format> in the <format type="italics">cntrControl</format> array that was passed to <see cref="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)"/> method. At least one of the counter channels must be <format type="italics">Enabled</format>.</para>
            </summary>
            <lastupdated>3/27/2006 3:21:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCtrControl">
            <summary>
            Error code: <c>70</c>
            	<para>Message: <format type="italics">An element of Cntr Control array not set to ENABLED or DISABLED.</format></para>
            	<para>One of the elements of the <format type="italics">cntrControl</format> array that was passed to <see cref="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)"/> method was set to something other than <format type="italics"><see cref="F:MccDaq.CounterControl.Enabled"/></format> or <format type="italics"><see cref="F:MccDaq.CounterControl.Disabled"/></format>. The array must have the same number of elements as the number of counters on the Measurement Computing device, and all elements must be set to either <format type="italics">Enabled</format> or <format type="italics">Disabled</format>.</para>
            </summary>
            <lastupdated>4/6/2006 10:34:18 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadExpChan">
            <summary>
            Error code: <c>71</c>
            	<para>Message: <format type="italics">Invalid EXP channel specified.</format></para>
            	<para>An invalid channel was passed to one of the thermocouple input commands. The channel number when using a Measurement Computing EXP device must be &gt;= 16. The maximum allowable channel number depends on which Measurement Computing EXP device is being used (and how many of them). Refer to the Measurement Computing device manual to find the number of channels.</para>
            </summary>
            <lastupdated>2/15/2006 5:21:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.WrongAdRange">
            <see cref="F:MccDaq.ErrorInfo.ErrorCode.WrongAdRange"/>
            <summary>
            Error code: <c>72</c>
            	<para>Message: <format type="italics">Board set to wrong A/D range for reading thermocouples.</format></para>
            	<para>A thermocouple input method was called to read a Measurement Computing EXP device input. The Measurement Computing EXP device is connected to an A/D board with hardware selected gain that is set to the wrong range. When using Measurement Computing EXP devices with thermocouples, the A/D must be set to the -5 to +5 volt range when available. When using RTD sensors, the range is 0 to 10 V when available.</para>
            </summary>
            <lastupdated>2/16/2006 10:17:15 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OutOfRange">
            <summary>
            Error code: <c>73</c>
            	<para>Message: <format type="italics">Temperature input is out of range.</format></para>
            	<para>A thermocouple input method returned an invalid temperature. This usually indicates an open thermocouple on a temperature input channel.</para>
            </summary>
            <lastupdated>3/26/2006 8:28:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTempScale">
            <summary>
            Error code: <c>74</c>
            	<para>Message: <format type="italics">Invalid temperature scale specified.</format></para>
            	<para>The <format type="italics">scale</format> parameter to a thermocouple input method is not valid. It must be set to either <format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, or <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:23:13 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadErrCode">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:37:38 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoQueue">
            <summary>
            Error code: <c>76</c>
            	<para>Message: <format type="italics">Specified board does not have channel/gain queue.</format></para>
            	<para>The method that was called requires that the Measurement Computing device has a channel/gain queue. The specified Measurement Computing device does not have a queue.</para>
            </summary>
            <lastupdated>2/16/2006 9:20:55 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ContinuousCount">
            <summary>
            Error code: <c>77</c>
            	<para>Message: <format type="italics">Count must be &gt; packet size to use recycle mode.</format></para>
            	<para>The count parameter is not valid for continuous mode. Using <format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> mode, the <format type="italics">count</format> parameter must be large enough to cause at least one interrupt. This is usually half the size of the Measurement Computing devices FIFO (typical sizes are 256, 512 and 1024). See Measurement Computing device-specific information for details.</para>
            </summary>
            <lastupdated>3/26/2006 10:24:44 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Underrun">
            <summary>
            Error code: <c>78</c>
            	<para>Message: <format type="italics">D/A FIFO went empty during output.</format></para>
            	<para>The specified D/A output rate could not be sustained. This error should not normally occur.</para>
            </summary>
            <lastupdated>2/16/2006 9:33:56 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadMemMode">
            <summary>
            Error code: <c>79</c>
            	<para>Message: <format type="italics">Invalid memory mode specified.</format></para>
            	<para>The memory mode that was selected with the <see cref="M:MccDaq.MccBoard.MemSetDTMode(MccDaq.DTMode)"/> method is not one of the valid modes.</para>
            </summary>
            <lastupdated>3/26/2006 10:16:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.FreqOverrun">
            <summary>
            Error code: <c>80</c>
            	<para>Message: <format type="italics">Measured frequency too high for selected gating interval.</format></para>
            	<para>The gating interval used with <see cref="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)"/> method is too long to measure the frequency of the signal connected to the counter. The counter is overflowing. Decrease the gating interval to eliminate the error.</para>
            </summary>
            <lastupdated>2/22/2006 9:58:11 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoCjcChan">
            <summary>
            Error code: <c>81</c>
            	<para>Message: <format type="italics">A CJC Channel must be configured to make temperature measurements.</format></para>
            	<para>When the Measurement Computing device was installed (with the InstaCal installation program) no CJC channel was selected. To use the temperature measurement methods with thermocouples you must first select a CJC channel on the A/D Measurement Computing device and then rerun the installation program.</para>
            </summary>
            <lastupdated>2/16/2006 9:15:13 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadChipNum">
            <summary>
            Error code: <c>82</c>
            	<para>Message: <format type="italics">Invalid ChipNum specified.</format></para>
            	<para>An invalid <format type="italics">chipNum</format> parameter was used with the <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method. If the Measurement Computing device is a five-channel Measurement Computing counter device, then <format type="italics">chipNum</format> should be set to 0. If it is a 10-channel counter device, <format type="italics">chipNum</format> should be either 0 or 1.</para>
            </summary>
            <lastupdated>3/26/2006 9:58:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DigNotEnabled">
            <summary>
            Error code: <c>83</c>
            	<para>Message: <format type="italics">The digital I/O on this board is not enabled.</format></para>
            	<para>When the Measurement Computing device was installed (with the <format type="italics">Insta</format>Cal installation program), the expansion digital I/O was set to <format type="italics">disabled</format>. To use these digital I/O lines you must enable the digital I/O on the Measurement Computing device (with a jumper), re-run the installation program and set the digital I/O to <format type="italics">enabled</format>.</para>
            </summary>
            <lastupdated>3/27/2006 1:03:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Convert16Bits">
            <summary>
            Error code: <c>84</c>
            	<para>Message: <format type="italics">CONVERT option can not be used with 16 bit A/D converters.</format></para>
            	<para>When using a 16-bit A/D Measurement Computing device, if you try to use the CONVERT option with <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or call <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method you will get this error. (This has been updated so that it is ignored for Measurement Computing devices for which it is inappropriate in later versions of the library.)</para>
            </summary>
            <lastupdated>2/16/2006 9:54:14 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoMemBoard">
            <summary>
            Error code: <c>85</c>
            	<para>Message: <format type="italics">The EXTMEMORY option requires that a MEGA-FIFO be attached.</format></para>
            	<para>Attempt to use a <format type="bold">Mem__</format> method without a MEGA-FIFO Measurement Computing device installed. Install MEGA-FIFO through <format type="italics">Insta</format>Cal.</para>
            </summary>
            <lastupdated>3/27/2006 3:22:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DtActive">
            <summary>
            Error code: <c>86</c>
            	<para>Message: <format type="italics">No memory read/write allowed while DT transfer in progress.</format></para>
            	<para>A read or write to a memory Measurement Computing device was attempted while data was being transferred via DT Connect.</para>
            </summary>
            <lastupdated>2/15/2006 5:48:24 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotMemConf">
            <summary>
            Error code: <c>87</c>
            	<para>Message: <format type="italics">Specified board is not a memory board.</format></para>
            	<para>The specified Measurement Computing device is not a memory device. This method only works with memory Measurement Computing devices.</para>
            </summary>
            <lastupdated>2/16/2006 9:24:58 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OddChan">
            <summary>
            Error code: <c>88</c>
            	<para>Message: <format type="italics">The first channel in scan and number of channels must be even (0, 2, 4, etc).</format></para>
            	<para>Some Measurement Computing devices use a channel/gain queue that require the first channel in the queue and the number of channels in the queue always be an even channel. This error can occur even when you are not in the process of loading the queue. Some Measurement Computing devices use the queue automatically with the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. On those Measurement Computing devices, the low channel must be an even number.</para>
            </summary>
            <lastupdated>3/27/2006 2:59:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CtrNoInit">
            <summary>
            Error code: <c>89</c>
            	<para>Message: <format type="italics">Counter was not configured or initialized.</format></para>
            	<para>You attempted to use the <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method or <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> method before initializing and configuring the counter.</para>
            </summary>
            <lastupdated>3/27/2006 1:07:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Not8536Ctr">
            <summary>
            Error code: <c>90</c>
            	<para>Message: <format type="italics">This board does not have an 8536 counter chip.</format></para>
            	<para>Attempt to use 8536 initialization or configuration on Measurement Computing device without 8536 chip.</para>
            </summary>
            <lastupdated>2/16/2006 9:22:57 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.FreeRunning">
            <summary>
            Error code: <c>91</c>
            	<para>Message: <format type="italics">Board doesn't time A/D sampling. Collecting at fastest possible speed.</format></para>
            	<para>This Measurement Computing device does not have an A/D pacer mechanism and you have called the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. The A/D is sampled in a tight software loop as fast as the CPU can execute the instructions. The sampling speed of sampling depends on the computer and the concurrent tasks.</para>
            </summary>
            <lastupdated>4/6/2006 1:58:50 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Interrupted">
            <summary>
            Error code: <c>92</c>
            	<para>Message: <format type="italics">Operation interrupted with Ctrl-C key.</format></para>
            	<para>A foreground operation was stopped before completion because either the Ctrl-C or Ctrl-Break keys were pressed.</para>
            </summary>
            <lastupdated>2/15/2006 5:50:56 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoSelectors">
            <summary>
            Error code: <c>93</c>
            	<para>Message: <format type="italics">No selector could be allocated.</format></para>
            	<para>A Windows selector required by the library could not be allocated. Close any unneeded open Windows applications and try again.</para>
            </summary>
            <lastupdated>2/16/2006 9:21:08 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoBurstMode">
            <summary>
            Error code: <c>94</c>
            	<para>Message: <format type="italics">This board does not support burst mode.</format></para>
            	<para>An attempt was made to use the <format type="italics"><see cref="F:MccDaq.ScanOptions.BurstMode"/></format> option on a Measurement Computing device which does not support that option.</para>
            </summary>
            <lastupdated>3/27/2006 3:33:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotWindowsFunc">
            <summary>
            Error code: <c>95</c>
            	<para>Message: <format type="italics">This method is not available in Windows library.</format></para>
            	<para>The library method you called is not supported in the current revision of Universal Library for Windows Languages. It may be supported in the future. Contact technical support.</para>
            </summary>
            <lastupdated>2/16/2006 9:26:43 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotSimulConf">
            <summary>
            Error code: <c>96</c>
            	<para>Message: <format type="italics">Board not configured for SIMULTANEOUS option.</format></para>
            	<para>The configuration file of the D/A Measurement Computing device in InstaCal must be set for simultaneous update before you use the <format type="italics"><see cref="F:MccDaq.ScanOptions.Simultaneous"/></format> option.</para>
            </summary>
            <lastupdated>3/27/2006 3:14:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.EvenOddMismatch">
            <summary>
            Error code: <c>97</c>
            	<para>Message: <format type="italics">An even channel is in an odd slot in the queue, or vice versa.</format></para>
            	<para>The channel gain queue on some A/D Measurement Computing devices has a restriction that the channel numbers must be in even queue positions and odd channel numbers must be in odd queue positions.</para>
            </summary>
            <lastupdated>2/15/2006 5:49:26 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.M1RateWarning">
            <summary>
            Error code: <c>98</c>
            	<para>Message: <format type="italics">Sampling speed to system memory MAY be too fast.</format></para>
            	<para>The A/D Measurement Computing device sampling speed you have requested may be too fast for the computer system bus transfer to complete before the next packet is ready for transfer. If this is the case, data is overrun and sample data is corrupted. This warning is initiated whenever you request a sample rate over 625 kHz, AND the sample set is larger than the FIFO buffer on the Measurement Computing device, AND an external memory Measurement Computing device, such as a MEGA-FIFO is not being used. Your system may be able to handle the rate requested. Determine the correct sampling speed through experimentation. Your system may be capable of the full 1 MHz rate directly to system memory.</para>
            </summary>
            <lastupdated>2/16/2006 10:07:50 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotRS485">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:47 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotDosFunc">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:42 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.RangeMismatch">
            <summary>
            Error code: <c>101</c>
            	<para>Message: <format type="italics">Bipolar and unipolar ranges cannot be used together in A/D queue.</format></para>
            	<para>The channel/gain queue should only be loaded (via the <see cref="M:MccDaq.MccBoard.ALoadQueue(System.Int16[],MccDaq.Range[],System.Int32)"/> method) with all unipolar or bipolar ranges</para>
            </summary>
            <lastupdated>3/27/2006 2:57:07 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ClockTooSlow">
            <summary>
            Error code: <c>102</c>
            	<para>Message: <format type="italics">Sampling rate is too high for clock speed, change clock jumper on board.</format></para>
            	<para>The sampling rate that you requested is too fast. The A/D Measurement Computing device pacer might be capable of running at a higher rate. Check the Measurement Computing device for an XTAL jumper and, if it is not set for the highest rate, place the jumper in the position for the highest rate. Once the jumper is set, re-run InstaCal.</para>
            </summary>
            <lastupdated>2/15/2006 5:40:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCalFactors">
            <summary>
            Error code: <c>103</c>
            	<para>Message: <format type="italics">Calibration factors are invalid - Disabling software calibration.</format></para>
            	<para>The selected Measurement Computing device uses software calibration and the stored calibration factors are invalid. Run <format type="italics">Insta</format>Cal and calibrate the Measurement Computing device before using it.</para>
            </summary>
            <lastupdated>3/26/2006 9:57:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadConfigType">
            <summary>
            Error code: <c>104</c>
            	<para>Message: <format type="italics">Invalid configuration information type specified.</format></para>
            	<para>An invalid <format type="italics">configType</format> parameter was passed to either <see cref="M:MccDaq.MccBoard.GetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.String@,System.Int32@)"/> method or <see cref="M:MccDaq.MccBoard.SetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.Int32)"/> method.</para>
            </summary>
            <lastupdated>3/26/2006 10:04:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadConfigItem">
            <summary>
            Error code: <c>105</c>
            	<para>Message: <format type="italics">Invalid configuration item specified.</format></para>
            	<para>An invalid <format type="italics">configItem</format> parameter was passed to either <see cref="M:MccDaq.MccBoard.GetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.String@,System.Int32@)"/> method or <see cref="M:MccDaq.MccBoard.SetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.Int32)"/> method.</para>
            </summary>
            <lastupdated>3/26/2006 10:03:54 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoPcmciaBoard">
            <summary>
            Error code: <c>106</c>
            	<para>Message: <format type="italics">Cannot access the PCMCIA board.</format></para>
            	<para>Cannot access the specified PCMCIA Measurement Computing device. Make sure that the PCMCIA Card and Socket Services are installed correctly and that the Measurement Computing device was installed in the system correctly via <format type="italics">Insta</format>Cal.</para>
            </summary>
            <lastupdated>3/26/2006 8:35:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoBackground">
            <summary>
            Error code: <c>107</c>
            	<para>Message: <format type="italics">Board does not support background operation.</format></para>
            	<para>The <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> option was used and the specified Measurement Computing device does not support background operation.</para>
            </summary>
            <lastupdated>3/27/2006 3:34:50 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.StringTooShort">
            <summary>
            Error code: <c>108</c>
            	<para>Message: <format type="italics">The string parameter is too short for the string being returned.</format></para>
            	<para>The string parameter passed to a library method is too small to contain the string that is being returned. Increase the size of the string to the minimum size specified for the method that you are using.</para>
            </summary>
            <lastupdated>3/26/2006 8:31:47 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ConvertExtMem">
            <summary>
            Error code: <c>109</c>
            	<para>Message: <format type="italics">CONVERTDATA is not allowed with EXTMEMORY option.</format></para>
            	<para>You requested both the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> and <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> option. These options can not be used together. Collect the data without the <format type="italics">ConvertData</format> option. Once the data has been collected, read it back from the memory card by using the <see cref="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)"/> method or the <see cref="M:MccDaq.MccBoard.MemReadPretrig(System.Int16@,System.Int32,System.Int32)"/> method, and then use the <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to convert the data.</para>
            </summary>
            <lastupdated>3/27/2006 1:24:03 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadEuAdd">
            <summary>
            Error code: <c>110</c>
            	<para>Message: <format type="italics">Program error - bad values used in <see cref="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.Int16@)"/> method or <see cref="M:MccDaq.MccBoard.ToEngUnits(MccDaq.Range,System.Int16,System.Single@)"/> method.</format></para>
            	<para>Invalid floating point data was used in <see cref="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.Int16@)"/> method or <see cref="M:MccDaq.MccBoard.ToEngUnits(MccDaq.Range,System.Int16,System.Single@)"/> method. Check the parameters passed to the relevant method.</para>
            </summary>
            <lastupdated>3/26/2006 10:15:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Das16JrRateWarning">
            <summary>
            Error code: <c>111</c>
            	<para>Message: <format type="italics">Rates greater than 125 kHz must use the onboard 10 MHz clock.</format></para>
            	<para>If a rate greater than 125 kHz is selected and the Measurement Computing device jumper is set for 1 MHz, this warning is generated. Place the jumper on the 10 MHz position and update your <format type="italics">Insta</format>Cal settings.</para>
            </summary>
            <lastupdated>3/27/2006 1:06:34 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Das08TooLowRate">
            <summary>
            Error code: <c>112</c>
            	<para>Message: <format type="italics">The desired sample rate is below hardware minimum.</format></para>
            	<para>Increase the value of the rate parameter in <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. The lowest pacer frequency is the clock frequency (usually 8 MHz / 2) divided by 65535.</para>
            </summary>
            <lastupdated>3/27/2006 1:06:49 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.AmbigSensorOnGp">
            <summary>
            Error code: <c>114</c>
            	<para>Message: <format type="italics">More than one temperature sensor type defined for EXP-GP.</format></para>
            	<para>Thermocouple and RTD types are both defined for a Measurement Computing EXP device. The <see cref="M:MccDaq.MccBoard.TIn(System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> method and <see cref="M:MccDaq.MccBoard.TInScan(System.Int32,System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> methods require that only one be defined to operate. Set one of the sensor types to "Not Installed" within the appropriate InstaCal menu.</para>
            </summary>
            <lastupdated>2/16/2006 10:36:01 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoSensorTypeOnGp">
            <summary>
            Error code: <c>115</c>
            	<para>Message: <format type="italics">No temperature sensor type defined for EXP-GP.</format></para>
            	<para>Neither Thermocouple nor RTD types are defined for an EXP-GP. The <see cref="M:MccDaq.MccBoard.TIn(System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> method and <see cref="M:MccDaq.MccBoard.TInScan(System.Int32,System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> methods require that one and only one be defined to operate. Set one of the sensor types to a predefined type within the appropriate <format type="italics">Insta</format>Cal menu.</para>
            </summary>
            <lastupdated>3/27/2006 3:17:43 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoConversionNeeded">
            <summary>
            Error code: <c>116</c>
            	<para>Message: <format type="italics">Selected 12-bit board already returns converted data.</format></para>
            	<para>Some 12-bit Measurement Computing devices do not need to have their data converted after a call to <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method with the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> option. These Measurement Computing devices return no channel tags and therefore return data in its proper format. </para>
            </summary>
            <lastupdated>3/27/2006 3:32:28 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoExtContinuous">
            <summary>
            Error code: <c>117</c>
            	<para>Message: <format type="italics">CONTINUOUS mode cannot be used with EXTMEMORY.</format></para>
            	<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> mode is ignored when used with the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> option.</para>
            </summary>
            <lastupdated>3/27/2006 3:31:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidPretrigConvert">
            <summary>
            Error code: <c>118</c>
            	<para>Message: <see cref="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16@,System.Int16@)"/> method called after <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method failed.</para>
            	<para>The data you are attempting to convert with <see cref="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16@,System.Int16@)"/> method cannot be converted because the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method did not return a complete data set—probably due to an early trigger.</para>
            </summary>
            <lastupdated>3/27/2006 3:38:17 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCtrReg">
            <summary>
            Error code: <c>119</c>
            	<para>Message: <format type="italics">Bad counter parameter passed to <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method.</format></para>
            	<para>The RegNum parameter passed to <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method is not a valid register.</para>
            </summary>
            <lastupdated>2/15/2006 5:17:23 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTrigThreshold">
            <summary>
            Error code: <c>120</c>
            	<para>Message: <format type="italics">Low trigger threshold is greater than high threshold.</format></para>
            	<para>The <format type="italics">lowThreshold</format> parameter to <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method must be less than the <format type="italics">highThreshold</format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:26:31 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPcmSlotRef">
            <summary>
            Error code: <c>121</c>
            	<para>Message: <format type="italics">NO PCM Card was found in the specified slot.</format></para>
            	<para>This is usually caused by swapping PCMCIA cards and not re-running <format type="italics">Insta</format>Cal. Please run <format type="italics">Insta</format>Cal.</para>
            </summary>
            <lastupdated>3/26/2006 8:55:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.AmbigPcmSlotRef">
            <undocumented condition="always">
            	<summary>
            Obsolete.
            </summary>
            </undocumented>
            <lastupdated>4/7/2006 1:57:07 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadSensorType">
            <summary>
            Error code: <c>123</c>
            	<para>Message: <format type="italics">Invalid sensor type selected in InstaCal.</format></para>
            	<para>The specified sensor type is not part of the allowed list of thermocouple/RTD types. Set the sensor type to a predefined type within the appropriate <format type="italics">Insta</format>Cal menu.</para>
            </summary>
            <lastupdated>3/26/2006 9:11:42 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DelBoardNotExist">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:37:43 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoBoardNameFile">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:31 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CfgFileNotFound">
            <summary>
            Error code: <c>126</c>
            	<para>Message: <format type="italics">Cannot find CB.CFG file.</format></para>
            	<para>The CB.CFG file could not be found. This file should be located in the same directory that you installed the software in.</para>
            </summary>
            <lastupdated>2/15/2006 5:37:28 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoVddInstalled">
            <summary>
            Error code: <c>127</c>
            	<para>Message: <format type="italics">The CBUL.386 virtual device driver is not installed.</format></para>
            	<para>The Windows device driver CBUL.386 is not installed on your system. Normally, it will be automatically installed when you run the standard installation program. The following line should be in your \windows\system.ini file in the [386Enh] section.</para>
            	<para>
            		<c> device=c:\mcc\cbul.386</c></para>
            </summary>
            <lastupdated>2/16/2006 9:27:26 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoWindowsMemory">
            <summary>
            Error code: <c>128</c>
            	<para>Message: <format type="italics">Requested amount of Windows page-locked memory is not available.</format></para>
            	<para>The Windows device driver could not allocate the required amount of physical memory. This error should not normally occur unless you are collecting very large amounts of data or your system is very memory constrained. If you are collecting a very large block of memory, try collecting a smaller amount. If this is not an option, than consider using <see cref="M:MccDaq.MccBoard.FileAInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> instead of <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. Also, if you are running other programs, try shutting them down.</para>
            </summary>
            <lastupdated>2/16/2006 9:27:37 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OutOfDosMemory">
            <summary>
            Error code: <c>129</c>
            	<para>Message: <format type="italics">Not enough DOS memory available.</format></para>
            	<para>Try closing down any unneeded programs that are running.</para>
            </summary>
            <lastupdated>2/16/2006 9:29:02 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.ObsoleteOption">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:52 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoPcmRegKey">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:36 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoCbul32Sys">
            <summary>
            Error code: <c>132</c>
            	<para>Message: <format type="italics">CBUL32.SYS device driver is not installed.</format></para>
            	<para>The Windows device driver CBUL32.SYS or CBULWDM.SYS is not installed on your system. Normally, it is automatically installed when you run <format type="italics">Insta</format>Cal. Contact technical support for assistance.</para>
            </summary>
            <lastupdated>3/27/2006 3:33:17 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoDmaMememory">
            <summary>
            Error code: <c>133</c>
            	<para>Message: <format type="italics">No DMA memory available to device driver.</format></para>
            	<para>The Windows device driver could not allocate the minimum required amount of memory for DMA. If you are sampling at slower speeds, you can specify SINGLEIO in the Options parameter to <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This will prevent the library from attempting to use DMA. In general though, this error should not ordinarily occur. Contact technical support with the details.</para>
            </summary>
            <lastupdated>2/16/2006 9:16:38 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.IrqNotAvailable">
            <summary>
            Error code: <c>134</c>
            	<para>Message: <format type="italics">IRQ not available.</format></para>
            	<para>The interrupt level that was specified for the Measurement Computing device in <format type="italics">Insta</format>Cal conflicts with another device in your computer. Try switching to a different interrupt level.</para>
            </summary>
            <lastupdated>3/27/2006 3:36:15 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Not7266Ctr">
            <summary>
            Error code: <c>135</c>
            	<para>Message: <format type="italics">This board does not have an LS7266 counter.</format></para>
            	<para>This method can only be used with a Measurement Computing device that contains an LS7266 chip. These chips are used on various Measurement Computing quadrature encoder input devices.</para>
            </summary>
            <lastupdated>3/27/2006 3:17:26 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadQuadrature">
            <summary>
            Error code: <c>136</c>
            	<para>Message: <format type="italics">Invalid Quadrature parameter passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">quadrature</format> parameter must be set to either <format type="italics"><see cref="F:MccDaq.Quadrature.NoQuad"/></format>, <format type="italics"><see cref="F:MccDaq.Quadrature.X1Quad"/></format>, <format type="italics"><see cref="F:MccDaq.Quadrature.X2Quad"/></format>, or <format type="italics"><see cref="F:MccDaq.Quadrature.X4Quad"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 9:01:36 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCountMode">
            <summary>
            Error code: <c>137</c>
            	<para>Message: <format type="italics">Invalid CountingMode parameter passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">countingMode</format> parameter must be set to <format type="italics"><see cref="F:MccDaq.CountingMode.ModuloN"/></format>, <format type="italics"><see cref="F:MccDaq.CountingMode.NoRecycle"/></format>, <format type="italics"><see cref="F:MccDaq.CountingMode.NormalMode"/></format>, or <format type="italics"><see cref="F:MccDaq.CountingMode.RangeLimit"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 10:12:09 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadEncoding">
            <summary>
            Error code: <c>138</c>
            	<para>Message: <format type="italics">Invalid DataEncoding parameter is passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">dataEncoding</format>parameter must be set to either <format type="italics"><see cref="F:MccDaq.DataEncoding.BcdEncoding"/></format>or <format type="italics"><see cref="F:MccDaq.DataEncoding.BinaryEncoding"/></format>/.</para>
            </summary>
            <lastupdated>3/26/2006 10:15:09 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadIndexMode">
            <summary>
            Error code: <c>139</c>
            	<para>Message: <format type="italics">Invalid IndexMode parameter is passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">indexMode</format> parameter must be set to either <format type="italics"><see cref="F:MccDaq.IndexMode.IndexDisabled"/></format>, <format type="italics"><see cref="F:MccDaq.IndexMode.LoadCtr"/></format>, <format type="italics"><see cref="F:MccDaq.IndexMode.LoadOutLatch"/></format>, or <format type="italics"><see cref="F:MccDaq.IndexMode.ResetCtr"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:45:42 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadInvertIndex">
            <summary>
            Error code: <c>140</c>
            	<para>Message: <format type="italics">Invalid InvertIndex parameter passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">invertIndex</format> parameter must be set to either <format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format> or <format type="italics"><see cref="F:MccDaq.OptionState.Disabled"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:50:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadFlagPins">
            <summary>
            Error code: <c>141</c>
            	<para>Message: <format type="italics"> Invalid FlagPins parameter passed to <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.</format></para>
            	<para>The <format type="italics">flagPins</format> parameter must be set to either <format type="italics"><see cref="F:MccDaq.FlagPins.CarryBorrow"/></format>, <format type="italics"><see cref="F:MccDaq.FlagPins.CompareBorrow"/></format>, <format type="italics"><see cref="F:MccDaq.FlagPins.CarryBorrowUpDown"/></format>, or <format type="italics"><see cref="F:MccDaq.FlagPins.IndexError"/></format>.</para>
            </summary>
            <lastupdated>3/26/2006 8:39:10 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoCtrStatus">
            <summary>
            Error code: <c>142</c>
            	<para>Message: <format type="italics">This board does not support <see cref="M:MccDaq.MccBoard.CStatus(System.Int32,MccDaq.StatusBits@)"/> method.</format></para>
            	<para>This Measurement Computing device does return any status information.</para>
            </summary>
            <lastupdated>2/16/2006 9:16:23 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoGateAllowed">
            <summary>
            Error code: <c>143</c>
            	<para>Message: <format type="italics">Gating may not be used when indexing is enabled.</format></para>
            	<para>Gating and indexing can not be used simultaneously with the <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method. If the <format type="italics">gateState</format> parameter is set to <format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format>, the <format type="italics">indexMode</format> parameter must be set to <format type="italics"><see cref="F:MccDaq.IndexMode.IndexDisabled"/></format>.</para>
            </summary>
            <lastupdated>3/27/2006 3:30:16 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoIndexAllowed">
            <summary>
            Error code: <c>144</c>
            	<para>Message: <format type="italics">Indexing not allowed in non-quadrature mode.</format></para>
            	<para>Indexing is not supported when the <format type="italics">quadrature</format> parameter is set to <format type="italics"><see cref="F:MccDaq.Quadrature.NoQuad"/></format>.</para>
            </summary>
            <lastupdated>3/27/2006 3:23:04 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OpenConnection">
            <summary>
            Error code: <c>145</c>
            	<para>Message: <format type="italics">Temperature input has open connection.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BmContinuousCount">
            <summary>
            Error code: <c>146</c>
            	<para>Message: <format type="italics">Count must be an integer multiple of packetsize for recycle mode.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/15/2006 5:34:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCallbackFunc">
            <summary>
            Error code: <c>147</c>
            	<para>Message: <format type="italics">Invalid pointer to callback method passed as parameter.</format></para>
            </summary>
            <lastupdated>2/15/2006 5:11:03 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.MbusInUse">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:21 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.MbusNoCtlr">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:26 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadEventType">
            <summary>
            Error code: <c>150</c>
            	<para>Message: <format type="italics">Invalid event type specified for this board.</format></para>
            	<para>Although this Measurement Computing device does support the <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method, it does not support one or more of the event types specified.</para>
            </summary>
            <lastupdated>3/26/2006 10:15:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.AlreadyEnabled">
            <summary>
            Error code: <c>151</c>
            	<para>Message: <format type="italics">An event handler has already been enabled for this event type.
            .</format></para>
            	<para>An event handler is bound to one or more of the events specified. To attach the new handler to the event type, first disable and disconnect the current handler using the <see cref="M:MccDaq.MccBoard.DisableEvent(MccDaq.EventType)"/> method.</para>
            </summary>
            <lastupdated>3/26/2006 9:40:31 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadEventSize">
            <summary>
            Error code: <c>152</c>
            	<para>Message: <format type="italics">Invalid event count has been specified.</format></para>
            	<para>The <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> event type requires an event count greater than 0.</para>
            </summary>
            <lastupdated>3/26/2006 8:34:44 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CantInstallEvent">
            <summary>
            Error code: <c>153</c>
            	<para>Message: <format type="italics">Unable to install event handler.</format></para>
            	<para>An internal error occurred while trying to setup the event handling.</para>
            </summary>
            <lastupdated>2/15/2006 5:40:06 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBufferSize">
            <summary>
            Error code: <c>154</c>
            	<para>Message: <format type="italics">Buffer is too small for operation.</format></para>
            	<para>The memory allocated by <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method is too small to hold all the data specified in the operation.</para>
            </summary>
            <lastupdated>2/15/2006 5:09:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadAiMode">
            <summary>
            Error code: <c>155</c>
            	<para>Message: <format type="italics">Invalid analog input mode (RSE, NRSE, DIFF).</format></para>
            	<para>The specified analog input mode is not valid.</para>
            </summary>
            <lastupdated>4/6/2006 12:30:32 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadSignal">
            <summary>
            Error code: <c>156</c>
            	<para>Message: <format type="italics">Invalid signal type specified.</format></para>
            	<para>The specified signal type does not exist, or is not valid for signal direction specified.</para>
            </summary>
            <lastupdated>2/15/2006 5:32:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadConnection">
            <summary>
            Error code: <c>157</c>
            	<para>Message: <format type="italics">Invalid connection specified.</format></para>
            	<para>The specified connection does not exist, or is not valid for the signal type and direction specified.</para>
            </summary>
            <lastupdated>2/15/2006 5:15:14 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadIndex">
            <summary>
            Error code: <c>158</c>
            	<para>Message: <format type="italics">Invalid connector index specified.</format></para>
            	<para>For index &gt; 0, indicates that the specified index is beyond the end of the internal list of output connections assigned to the specified signal type.</para>
            </summary>
            <lastupdated>3/26/2006 8:40:23 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoConnection">
            <summary>
            Error code: <c>159</c>
            	<para>Message: <format type="italics">No connection is assigned to the specified signal.</format></para>
            	<para>The specified signal does not have a connection assigned.</para>
            </summary>
            <lastupdated>3/27/2006 1:02:16 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadBurstIoCount">
            <summary>
            Error code: <c>160</c>
            	<para>Message: <format type="italics">Count cannot be greater than the FIFO size for BURSTIO mode.</format></para>
            	<para>When using <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> mode, the count entered cannot be larger than the FIFO size.</para>
            </summary>
            <lastupdated>3/26/2006 9:57:23 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DeadDev">
            <summary>
            Error code: <c>161</c>
            	<para>Message: <format type="italics">Device has stopped responding. Please check connections.</format></para>
            	<para>Check cable connections to the Measurement Computing USB device and to your computer's USB port.</para>
            </summary>
            <lastupdated>3/27/2006 1:04:59 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadConfigVal">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:37:26 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidAccess">
            <summary>
            Error code: <c>163</c>
            	<para>Message: <format type="italics">Required access or privilege not acquired for specified operation. Please check for other users of device and restart application.</format></para>
            	<para>You are currently not the device owner and therefore cannot change the state or configuration of the Ethernet device with methods such as <see cref="M:MccDaq.MccBoard.AOut(System.Int32,MccDaq.Range,System.Int16)"/> method, <see cref="M:MccDaq.MccBoard.DBitOut(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState)"/> method, <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.FlashLED"/> method, and others. However, you can still read the state or configuration of the Ethernet device with methods such as <see cref="M:MccDaq.MccBoard.AIn(System.Int32,MccDaq.Range,System.Int16@)"/> method, <see cref="M:MccDaq.MccBoard.DBitIn(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState@)"/> method, and so on.</para>
            </summary>
            <lastupdated>2/15/2006 5:51:10 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.Unavailable">
            <summary>
            Error code: <c>164</c>
            	<para>Message: <format type="italics">Device unavailable at time of request. Please repeat operation.</format></para>
            	<para>You requested an operation that conflicts with an operation in progress on the device. This error usually occurs in multithreaded applications or if you are running multiple applications that access the device. Both types of operations are not supported.</para>
            </summary>
            <lastupdated>2/16/2006 9:33:42 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NotReady">
            <summary>
            Error code: <c>165</c>
            	<para>Message: <format type="italics">Device is not ready to send data. Please repeat operation.</format></para>
            	<para>You requested an operation that conflicts with an operation in progress on the device.  This error can occur during device initialization.</para>
            </summary>
            <lastupdated>2/16/2006 9:25:37 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OwnershipRefused">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:39:05 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.OwnershipFailed">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:59 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BitUsedForAlarm">
            <summary>
            Error code: <c>169</c>
            	<para>Message: <format type="italics">The specified bit is used for alarm.</format></para>
            	<para>Returned when you call <see cref="M:MccDaq.MccBoard.DBitOut(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState)"/> method for a bit that is set as an alarm.
            </para>
            	<para>Alarm bits are read only and cannot be used for output.</para>
            </summary>
            <lastupdated>2/22/2006 12:07:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.PortUsedForAlarm">
            <summary>
            Error code: <c>170</c>
            	<para>Message: <format type="italics">One or more bits on the specified port are used for alarm.</format></para>
            	<para>Returned when you call <see cref="M:MccDaq.MccBoard.DOut(MccDaq.DigitalPortType,System.Int16)"/> method to write to a port containing a bit that is set as an alarm.
            </para>
            	<para>Alarm bits are read only and cannot be used for output.</para>
            </summary>
            <lastupdated>2/22/2006 12:07:31 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.PacerOverRun">
            <summary>
            Error code: <c>171</c>
            	<para>Message: <format type="italics">Pacer overrun, external clock rate too fast.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDebounceTime">
            <summary>
            Error code: <c>177</c>
            	<para>Message: <format type="italics">Invalid debounce time specified.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadDebounceTrigMode">
            <summary>
            Error code: <c>178</c>
            	<para>Message: <format type="italics">Invalid debounce trigger mode specified.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadMappedCounter">
            <summary>
            Error code: <c>179</c>
            	<para>Message: <format type="italics">Invalid mapped counter specified.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadCounterMode">
            <summary>
            Error code: <c>180</c>
            	<para>Message: <format type="italics">This function can not be used with the current mode of the specified counter.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadTCChanMode">
            <summary>
            Error code: <c>181</c>
            	<para>Message: <format type="italics">Single-Ended mode can not be used for temperature input.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadFrequency">
            <summary>
            Error code: <c>182</c>
            	<para>Message: <format type="italics">Invalid frequency specified.</format></para>
            	<para></para>
            </summary>
            <lastupdated>2/16/2006 9:28:30 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadEventParam">
            <summary>
            Error code: <c>183</c>
            	<para>Message: Invalid parameter event specified.</para>
            	<para>The specified event parameter is not supported by the Measurement Computing board.</para>
            </summary>
            <lastupdated>11/13/2006 5:28:35 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.MismatchSetpointCount">
            <summary>
            Error code: <c>188</c>
            	<para>Message: <format type="italics">Number of setpoints is not equal to number of channels with a setpoint flag set.</format></para>
            	<para>
            Set the number of setpoints equal to the number of channels with a setpoint flag set.
            </para>
            </summary>
            <lastupdated>6/26/2007 3:35:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidSetpointLevel">
            <summary>
            Error code: <c>189</c>
            	<para>Message: <format type="italics">Setpoint level is outside channel range.</format></para>
            	<para>
            You specified a setpoint level that is outside of the range supported by the Measurement Computing device.
            </para>
            </summary>
            <lastupdated>6/26/2007 3:36:18 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidSetpointOutputType">
            <summary>
            Error code: <c>190</c>
            	<para>Message: <format type="italics">Setpoint Output Type is invalid.</format></para>
            	<para>
            You specified a setpoint output type that is not supported by the Measurement Computing device.
            </para>
            </summary>
            <lastupdated>6/26/2007 3:39:00 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidSetpointOutputValue">
            <summary>
            Error code: <c>191</c>
            	<para>Message: <format type="italics">Setpoint Output Value is outside channel range.</format></para>
            	<para>
            You specified a setpoint output value that is outside of the range supported by the Measurement Computing device.
            </para>
            </summary>
            <lastupdated>6/26/2007 3:39:55 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidSetpointLimits">
            <summary>
            Error code: <c>192</c>
            	<para>Message: <format type="italics">Setpoint Comparison limit B greater than Limit A.</format></para>
            	<para>
            Set the setpoint comparison value for limit A to be larger than the value set for limit B.
            </para>
            </summary>
            <lastupdated>6/26/2007 3:37:22 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.StringTooLong">
            <summary>
            Error code: <c>193</c>
            	<para>Message: <format type="italics">String Too Long.</format></para>
            	<para>The string entered is too long for this operation with this device.</para>
            </summary>
            <lastupdated>10/9/2007 3:37:22 PM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidLogin">
            <summary>
            Error code: <c>194</c>
            	<para>Message: <format type="italics">Invalid Login Settings</format></para>
            	<para>You entered an invalid user name or password for this device.</para>
            </summary>
            <lastupdated>10/9/2007 3:37:22 PM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.SessionInUse">
            <summary>
            Error code: <c>195</c>
            	<para>Message: <format type="italics">Device Session Already in Use</format></para>
            	<para>Another user or PC is already logged into this device's session.</para>
            </summary>
            <lastupdated>10/9/2007 3:37:22 PM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CantLockDmaBuf">
            <summary>
            Error code: <c>201</c>
            	<para>Message: <format type="italics">DMA buffer could not be locked.</format></para>
            	<para>There is not enough physical memory to lock down enough DMA memory for this operation. Try closing out other applications, or installing additional RAM.</para>
            </summary>
            <lastupdated>2/15/2006 5:35:36 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DmaInUse">
            <summary>
            Error code: <c>202</c>
            	<para>Message: <format type="italics">DMA already controlled by another driver.</format></para>
            	<para>The DMA controller is currently being used by another device, such as another DMA Measurement Computing device or the floppy drive.</para>
            </summary>
            <lastupdated>2/15/2006 5:46:48 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadMemHandle">
            <summary>
            Error code: <c>203</c>
            	<para>Message: <format type="italics">Invalid Windows memory handle.</format></para>
            	<para>The memory handle supplied is invalid. Memory handles supplied to library methods should be allocated using the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and should not be de-allocated until <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> operations using this buffer are complete or cancelled with <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method.</para>
            </summary>
            <lastupdated>3/26/2006 10:16:33 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoMoreFiles">
            <summary>
            Error code: <c>344</c>
            	<para>Message: <format type="italics">No more files in the directory.</format></para>
            	<para>The end of the log file was reached before the file header was read.</para>
            </summary>
            <lastupdated>2/16/2006 9:18:04 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadFileNumber">
            <summary>
            Error code: <c>345</c>
            	<para>Message: <format type="italics">No file exists for the specified file number.</format></para>
            	<para>The specified file number does not exist in the binary file.</para>
            </summary>
            <lastupdated>2/15/2006 5:21:53 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidStructSize">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:16 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.LossOfData">
            <summary>
            Error code: <c>347</c>
            	<para>Message: <format type="italics">This file may not contain all of the data from the logging session because the logging session was not terminated properly.</format></para>
            	<para>The specified file number does not exist in the binary file.</para>
            </summary>
            <lastupdated>2/15/2006 5:54:19 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidBinaryFile">
            <summary>
            Error code: <c>348</c>
            	<para>Message: <format type="italics">The file is not a valid Measurement Computing binary file.</format></para>
            	<para>The binary file was not logged from a Measurement Computing USB device with data logging capability, or the binary file was logged during a data logging session that was not properly terminated and is missing information.</para>
            </summary>
            <lastupdated>2/15/2006 5:51:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidDelimiter">
            <summary>
            Error code: <c>349</c>
            	<para>Message: <format type="italics">An invlid delimiter was specified for CSV file .</format></para>
            	<para>A comma is the only valid delimiter when converting to a CSV file.</para>
            </summary>
            <lastupdated>3/26/2006 10:20:37 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InternalErr32">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:10 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CfgFileReadFailure">
            <summary>
            Error code: <c>304</c>
            	<para>Message: <format type="italics">Error reading from configuration file.</format></para>
            	<para>The program was unable to read configuration file CB.CFG Confirm that CB.CFG was not deleted, moved, or renamed since the software installation.</para>
            </summary>
            <lastupdated>2/15/2006 5:37:46 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CfgFileWriteFailure">
            <summary>
            Error code: <c>305</c>
            	<para>Message: <format type="italics">Error writing to configuration file.</format></para>
            	<para>The program was unable to write to the configuration file CB.CFG Confirm that CB.CFG is present and that its attributes are not set for read-only. Also, check that not more than one application is trying to access this file.</para>
            </summary>
            <lastupdated>3/26/2006 10:21:02 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CfgFileCantOpen">
            <summary>
            Error code: <c>308</c>
            	<para>Message: <format type="italics">Cannot open configuration file.</format></para>
            	<para>The program was unable to open the configuration file CB.CFG Confirm that CB.CFG was not deleted, moved, or renamed since the software installation.</para>
            </summary>
            <lastupdated>2/15/2006 5:37:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadRtdConversion">
            <summary>
            Error code: <c>325</c>
            	<para>Message: <format type="italics">Overflow of RTD conversion.</format></para>
            	<para>Either <see cref="M:MccDaq.MccBoard.TIn(System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> method or <see cref="M:MccDaq.MccBoard.TInScan(System.Int32,System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)"/> method returned an invalid temperature conversion. Confirm that the configuration matches the RTD type, and physical Measurement Computing EXP device settings; pay particular attention to gain settings and RTD base resistance. Also, check that the RTD leads are securely attached to the EXP terminals. Finally, confirm that the Measurement Computing device is measuring reasonable voltages via <see cref="M:MccDaq.MccBoard.AIn(System.Int32,MccDaq.Range,System.Int16@)"/> method.</para>
            </summary>
            <lastupdated>2/16/2006 9:07:42 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoPciBios">
            <summary>
            Error code: <c>326</c>
            	<para>Message: <format type="italics">PCI BIOS not present on the PC.</format></para>
            	<para>Could not locate the BIOS for the PCI bus. Consult PC supplier for proper installation of the PCI BIOS.</para>
            </summary>
            <lastupdated>2/16/2006 9:12:40 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.BadPciIndex">
            <summary>
            Error code: <c>327</c>
            	<para>Message: <format type="italics">Specified PCI board not detected.</format></para>
            	<para>The specified Measurement Computing PCI board was not detected. Check that the Measurement Computing PCI board is securely installed into the PCI slot. Also, run <format type="italics">Insta</format>Cal to locate/set valid base address and configuration.</para>
            </summary>
            <lastupdated>3/26/2006 8:54:46 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoPciBoard">
            <summary>
            Error code: <c>328</c>
            	<para>Message: <format type="italics">Specified PCI board not detected.</format></para>
            	<para>The specified Measurement Computing PCI board was not detected. Check that the Measurement Computing PCI board is securely installed into the PCI slot. Also, run <format type="italics">Insta</format>Cal to locate/set valid base address and configuration.</para>
            </summary>
            <lastupdated>3/27/2006 3:20:22 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.CantInstallInt">
            <summary>
            Error code: <c>334</c>
            	<para>Message: <format type="italics">Cannot install interrupt handler. IRQ already in use.</format></para>
            	<para>The device driver could not enable requested interrupt. Check that the selected IRQ is not already in use by another device. This error can also occur if a foreground scan was aborted; in such cases, rebooting the PC corrects the problem.</para>
            </summary>
            <lastupdated>3/26/2006 10:20:37 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.PcmciaErrs">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:39:09 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DosFileNotFound">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:37:51 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DosPathNotFound">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:37:55 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.DosReadFault">
            <exclude/>
            <summary>
            Obsolete.
            </summary>
            <lastupdated>4/6/2006 11:38:00 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.WinCannotEnableInt">
            <summary>
            Error code: <c>603</c>
            	<para>Message: <format type="italics">Cannot enable interrupt. IRQ already in use.</format></para>
            	<para>
            The device driver could not enable requested interrupt. Check that the selected IRQ is not already in use by another device. This error can also occur if a foreground scan was aborted.
            </para>
            	<para>In such cases, rebooting the PC corrects the problem.</para>
            </summary>
            <lastupdated>3/27/2006 2:53:53 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.WinCannotDisableInt">
            <summary>
            Error code: <c>605</c>
            	<para>Message: <format type="italics">Cannot disable interrupts.</format></para>
            	<para>The device driver was unable to disable the IRQ. This can occur when interrupts are generated too fast for the PC to complete servicing. For example, sampling at high frequencies (above ~2 kHz) with scan mode set for <format type="italics"><see cref="F:MccDaq.ScanOptions.SingleIo"/></format> can lead to this error. Frequently, an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format> error accompanies this condition.</para>
            </summary>
            <lastupdated>3/27/2006 2:55:23 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.WinCantPageLockBuffer">
            <summary>
            Error code: <c>606</c>
            	<para>Message: <format type="italics">Insufficient memory to page lock data buffer.</format></para>
            	<para>There is not enough physical memory to lock down the entire data buffer. Try closing out other applications, selecting smaller data buffers, or installing additional RAM.</para>
            </summary>
            <lastupdated>2/16/2006 9:34:42 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.NoPcmCard">
            <summary>
            Error code: <c>630</c>
            	<para>Message: <format type="italics">PCM card not detected.</format></para>
            	<para>The specified PCMCIA card was not detected. Confirm that the PCM card is securely plugged into PCMCIA slot. If the Measurement Computing device continues to return this error, run <format type="italics">Insta</format>Cal to reset the configuration. </para>
            </summary>
            <lastupdated>3/27/2006 3:20:05 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidGainArrayLength">
            <summary>
            Error code: <c>801</c>
            	<para>Message: <format type="italics">The number of elements in the gain array must equal the number of channels in the scan.</format></para>
            	<para><see cref="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)"/> method was called with the number of elements in <paramref name="GainArray"/> not equal to the number of channels specified by the <paramref name="NumChannels"/> parameter.</para>
            	<para>Make sure that the number of elements in the array is the same as the number of channels in the scan.</para>
            	<para>Make sure that the length of dimension 0 in the array is the same as the number of channels in the scan.</para>
            	<para>The Universal Library does not print or stop if this error occurs, regardless of the error handling
            configuration specified by the call to the <see cref="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)"/> method. These errors must be checked by examining
            the ErrorInfo object returned from the <see cref="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)"/> method.</para>
            </summary>
            <lastupdated>3/27/2006 1:34:03 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.ErrorInfo.ErrorCode.InvalidDimension0Length">
            <summary>
            Error code: <c>802</c>
            	<para>Message: <format type="italics">The length of dimension 0 in the data array must equal the number of channels in the scan.</format></para>
            	<para>Either the <see cref="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range,System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)"/> method or the <see cref="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)"/> method was called with the length of dimension 0 of the <paramref name="EngUnits"/> array not equal to the number of channels specified by the <paramref name="NumChannels"/> parameter.</para>
            	<para>Make sure that the length of dimension 0 in the array is the same as the number of channels in the scan.</para>
            	<para>The Universal Library does not print or stop if this error occurs, regardless of the error handling
            configuration specified by the call to the <see cref="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)"/> method. These errors must be checked by examining
            the ErrorInfo object returned from the <see cref="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range,System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)"/> method or the <see cref="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)"/> method.</para>
            </summary>
            <lastupdated>4/6/2006 2:32:34 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.cBoardConfig">
            <summary>
            Provides all of the members responsible for getting and setting board-level configuration items.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            All instances of cBoardConfig are derived from the MccBoard.<see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Dim Status As ErrorInfo
            Dim Board0 As MccBoard
            Dim BoardType As Integer
            Dim NumAdChans As Integer
             
            Board0 = New MccBoard(0)
            Status = Board0.BoardConfig.GetNumAdChans(NumAdChans)
            NumAdChans = 8
            Status = Board0.BoardConfig.SetNumAdChans(NumAdChans)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            MccBoard board0;
            ErrorInfo status;
            MccBoard board0 = new MccBoard (0);
            int BoardType;
            int NumAdChans;
             
            Status = Board0.BoardConfig.GetNumAdChans(out NumAdChans);
            NumAdChans = 8;
            Status = Board0.BoardConfig.SetNumAdChans(NumAdChans);
             
            </code>
            </example>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <lastupdated>3/7/2006 10:43:01 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.#ctor(MccDaq.MccBoard)">
            <summary>
            Creates a <see cref="T:MccDaq.cBoardConfig"/>.
            </summary>
            <param name="mccBoard">
            	<see cref="T:MccDaq.MccBoard"/> instance whose configuration you want to set and get.
            </param>
            <lastupdated>10/18/2006 2:36:01 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDACUpdateMode(System.Int32@)">
            <summary>Returns the update mode for a digital-to-analog converter (DAC). 
            </summary>
            <param name="configVal">
            Returns a number indicating the DAC update mode (0 = <format type="italics">immediate</format>, 1 = <format type="italics">on command</format>).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="M:MccDaq.cBoardConfig.DACUpdate"/>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:19:02 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetPANID(System.Int32@)">
            <summary>
            Returns the personal area network (PAN) identifier for wireless communication session involving a Measurement Computing wireless device.
            </summary>
            <param name="configVal">
            Upon return, contains the PAN identifier, which is a number from 0 to 65534.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/22/2006 2:04:59 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetPANID(System.Int32)">
            <summary>Sets the personal area network (PAN) identifier used for a wireless communication session involving a Measurement Computing wireless device.
            </summary>
            <param name="configVal">
            The PAN identifier assigned to the Measurement Computing device. This is a number from 0 to 65534.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/22/2006 2:05:12 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetRFChannel(System.Int32@)">
            <summary>
            Returns the radio frequency (RF) channel used by a Measurement Computing wireless device for communication. 
            </summary>
            <param name="configVal">
            Upon return, contains the number (12 to 23) of the RF channel selected for wireless communication.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/20/2006 3:50:32 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetRFChannel(System.Int32)">
            <summary>Sets the radio frequency (RF) channel used by a Measurement Computing wireless device for communication. 
            </summary>
            <param name="configVal">
            The number (12 to 23) of the RF channel selected for wireless communication.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/13/2006 5:20:01 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetRSS(System.Int32@)">
            <summary>
            Returns the received signal strength (RSS) of the remote device that is communicating with a Measurement Computing wireless device.
            </summary>
            <param name="configVal">
            Upon return, contains the RSS in units of decibels referenced to 1.0 milliwatt (dBm) of the remote device.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/20/2006 3:50:40 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDeviceNotes(System.Int32,System.String@,System.Int32@)">
            <summary>
            Returns the device notes stored in a Measurement Computing device's memory. 
            </summary>
            <param name="start">
            Sets the address in the device's memory to begin reading.
            </param>
            <param name="configVal">
            Upon return, contains the text of the notes stored in the device's memory.
            </param>
            <param name="maxLen">
            Set the maximum number of bytes to read from the device's memory.
            <para>Also returns the number of bytes actually read.</para>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>
            Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <lastupdated>11/20/2006 3:50:02 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDeviceNotes(System.Int32,System.String,System.Int32@)">
            <summary>Sets the device notes stored in a Measurement Computing device's memory. 
            </summary>
            <param name="start">
            Sets the address in the device's memory to begin writing.
            </param>
            <param name="configVal">
            Upon return, contains the text of the notes stored in the device's memory.
            </param>
            <param name="maxLen">
            Set the maximum number of bytes to write to the device's memory.
            <para>Upon return, contains the number of bytes actually written.</para>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>
            Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <lastupdated>11/22/2006 2:18:05 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDeviceId(System.String@,System.Int32@)">
            <summary>
            Returns the name identifying the instance of a Measurement Computing device. 
            </summary>
            <param name="configVal">
            Upon return, contains the name of the Measurement Computing device.
            </param>
            <param name="maxLen">
            	Sets the maximum number of bytes to read.
            <para>Upon return, contains the number of bytes actually read.</para>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:20:58 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDeviceId(System.String,System.Int32@)">
            <summary>Sets the name identifying the instance of a Measurement Computing device. 
            </summary>
            <param name="configVal">
            The name of the Measurement Computing device.
            </param>
            <param name="maxLen">
            	Sets the maximum number of bytes to write.
            <para>Upon return, contains the number of bytes actually written.</para>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.</para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/13/2006 5:19:15 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDACStartup(System.Int32,System.Int32@)">
            <summary>
            Returns the Measurement Computing device's configuration register STARTUP bit setting. 
            </summary>
            <param name="devNum">
            Number of the channel whose startup bit setting you want to get.
            </param>
            <param name="configVal">
            Upon return, contains the setting of the startup bit (0 or 1).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>
            Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="M:MccDaq.cBoardConfig.SetDACStartup(System.Int32)"/>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:18:46 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetBaseAdr(System.Int32,System.Int32@)">
            <summary>
            The  base address used by the Universal Library to communicate with a Measurement Computing device.
            </summary>
            <param name="devNum">
            	<para>Number of the Measurement Computing device whose base address you are seeking.</para>
            </param>
            <param name="configVal">
            	<para>Upon return, contains the Measurement Computing device's base address.</para>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.</para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:20:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDACUpdateMode(System.Int32,System.Int32)">
            <summary>
            Sets the update mode for a digital-to-analog converter (DAC). 
            </summary>
            <param name="devNum">
            Specifies the number of the channel whose update mode you want set.
            </param>
            <param name="configVal">
            	<list type="bullet">
            		<item>
            			<description>
            When set to 0, the DAC update mode is <format type="italics">immediate</format>. Values written with <see cref="M:MccDaq.MccBoard.AOut(System.Int32,MccDaq.Range,System.Int16)"/> method or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method
            are automatically output by the DAC channels.
            </description>
            		</item>
            	</list>
            	<list type="bullet">
            		<item>
            			<description>
            When set to 1, the DAC update mode is <format type="italics">on command</format>. Values written with <format type="bold">AOut</format> or <format type="bold">AOutScan</format>
            are not output by the DAC channel(s) until a <see cref="M:MccDaq.cBoardConfig.DACUpdate"/> method call is made.
            </description>
            		</item>
            	</list>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/9/2006 12:25:15 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.DACUpdate">
            <summary>
            	<para>
            Updates the voltage values on analog output channels. 
            </para>
            </summary>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>
            Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.</para>
            </remarks>
            <seealso cref="M:MccDaq.cBoardConfig.SetDACUpdateMode(System.Int32,System.Int32)"/>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:19:57 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDACStartup(System.Int32)">
            <summary>
            Sets the Measurement Computing device's configuration register STARTUP bit to 0 or 1 to enable/disable the
            storing of digital-to-analog converter (DAC) startup values. 
            </summary>
            <param name="configVal">
            Enables (1) or disables (0) the storing of startup values for the channel.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <example>
            	<code lang="C#">
            DacBoard.BoardConfig.SetDACStartup(1);
            for (int i =1; i &lt;8; i++)
            {
            DacBoard.AOut(i, BIP5VOLTS, DACValue[i]);
            }
            DacBoard.BoardConfig.SetDACStartup(chanNum, 0);
            </code>
            </example>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:22:07 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetBaseAdr(System.Int32,System.Int32)">
            <summary>
            The base address used by the Universal Library to communicate with a Measurement Computing device.
            </summary>
            <param name="devNum">
            Not used.
            </param>
            <param name="configVal">
            The base address of the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:21:44 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetBoardType(System.Int32@)">
            <summary>
            Gets the unique number (device ID) assigned to the Measurement Computing device (between 0 and 8000h) indicating
            the type of device installed.
            </summary>
            <param name="configVal">
            	<para>Upon return, contains the number indicating the Measurement Computing device type.</para>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:26:34 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetIntLevel(System.Int32@)">
            <summary>
            Gets the interrupt level set for the Measurement Computing device (0 for none, or 1 to 15).
            </summary>
            <param name="configVal">
            Upon return, contains the interrupt level (0 for none, or 1 – 15).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:35:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetIntLevel(System.Int32)">
            <summary>
            Sets the  interrupt level on a Measurement Computing device. 
            boards.
            </summary>
            <param name="configVal">
            The interrupt level. Valid settings are 0 for none, or 1 – 15.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:22:31 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDmaChan(System.Int32@)">
            <summary>
            Gets the DMA channel (0, 1, or 3) set for the Measurement Computing device.
            </summary>
            <param name="configVal">
            Upon return, contains the number (0, 1, or 3) of the DMA channel set for the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:33:51 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDmaChan(System.Int32)">
            <summary>
            Sets the  DMA channel.
            </summary>
            <param name="configVal">
            Sets DMA channel to 0, 1 or 3.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 5:18:39 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetClock(System.Int32@)">
            <summary>
            Gets the counter's clock frequency in MHz (40, 10, 8, 6, 5, 4, 3, 2,
            1), or 0 for not supported.</summary>
            <param name="configVal">
            Upon return, contains the clock frequency in MHz.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:28:31 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetClock(System.Int32)">
            <summary>
            The counter's clock source frequency 
            </summary>
            <param name="configVal">
            The clock source frequency in MHz (40, 10, 8, 6, 5, 4, 3, 2, 1, or
            0 for not supported).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/9/2006 12:23:55 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetRange(MccDaq.Range@)">
            <summary>
            Gets the selected voltage range. For switch-selectable gains only.
            </summary>
            <param name="configVal">
            Upon return, contains the selected voltage <see cref="T:MccDaq.Range"/>.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 2:21:31 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetRange(MccDaq.Range)">
            <summary>
            Sets the voltage range on Measurement Computing devices for which the range is manually
            selected.
            </summary>
            <param name="configVal">
            The  voltage <see cref="T:MccDaq.Range"/> to set on the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 2:22:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetNumAdChans(System.Int32@)">
            <summary>
            Gets the number of A/D channels.
            </summary>
            <param name="configVal">
            Upon return, contains the number of A/D channels.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:36:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetAdRetrigCount(System.Int32@)">
            <summary>
            Gets the number of samples to acquire for each hardware trigger when retrigger mode is enabled.
            </summary>
            <param name="configVal">
            Upon return, contains the number of samples per trigger to aquire.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/07/2007 8:52:11 AM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetAdRetrigCount(System.Int32)">
            <summary>
            Sets the number of samples to acquire for each hardware trigger when retrigger mode is enabled.
            </summary>
            <param name="configVal">
            	<para>The number of samples per trigger to aquire. </para>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            "&gt;
            <lastupdated>2/07/2007 8:56:27 AM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDACRetrigCount(System.Int32@)">
            <summary>
            Gets the number of samples to generate for each hardware trigger when retrigger mode is enabled.
            </summary>
            <param name="configVal">
            Upon return, contains the number of samples per trigger to generate.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/07/2007 8:52:11 AM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetDACRetrigCount(System.Int32)">
            <summary>
            Sets the number of samples to generate for each hardware trigger when retrigger mode is enabled.
            </summary>
            <param name="configVal">
            	<para>The number of samples per trigger to generate. </para>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            "&gt;
            <lastupdated>2/07/2007 8:56:27 AM</lastupdated>
            <updatedby>LJB</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetNumTempChans(System.Int32@)">
            <exclude/>
            <summary>
            Gets the number of temperature channels used by the Measurement Computing device.
            </summary>
            <param name="configVal">
            Upon return, contains the number of temperature channels used by the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>11/15/2006 4:41:21 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetNumAdChans(System.Int32)">
            <summary>
            Sets the number of A/D channels available on the Measurement Computing device.
            </summary>
            <param name="configVal">
            	<para>The  number of A/D channels on the Measurement Computing device. </para><para>Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for a list of the
            A/D channels supported by each Measurement Computing device.</para>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            "&gt;
            <lastupdated>5/4/2010 2:22:40 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetUsesExps(System.Int32@)">
            <summary>
            Gets the <format type="italics">True</format>/<format type="italics">False</format> value indicating support of expansion boards.
            </summary>
            <param name="configVal">
            Upon return, contains <format type="italics">True</format> if the Measurement Computing device supports expansion boards, or <format type="italics">False</format> if the device does not
            support expansion boards.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:45:49 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDiNumDevs(System.Int32@)">
            <summary>
            Gets the number of digital devices on the Measurement Computing device.
            </summary>
            <param name="configVal">
            Upon return, contains the number of digital devices
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:32:48 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetCiNumDevs(System.Int32@)">
            <summary>
            Gets the number of counter devices on the Measurement Computing device.
            </summary>
            <param name="configVal">
            Upon return, contains the number of counter devices.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>10/18/2006 11:15:47 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetNumDaChans(System.Int32@)">
            <summary>
            Gets the number of D/A channels.
            </summary>
            <param name="configVal">
            Upon return, contains the number of D/A channels.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:36:23 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetWaitState(System.Int32@)">
            <summary>
            Gets the value of the wait state jumper</summary>
            <param name="configVal">
            Upon return, contains a 1 if the wait state jumper is enabled, or 0 if the wait state jumper is disabled.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:46:16 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.SetWaitState(System.Int32)">
            <summary>
            Sets the  value of the wait state jumper (1 = enabled, 0 = disabled).
            </summary>
            <param name="configVal">
            The  wait state on the board (1 = enabled, 0 = disabled).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 5:27:12 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetNumIoPorts(System.Int32@)">
            <summary>
            Gets the number of I/O ports used by the Measurement Computing device.
            </summary>
            <param name="configVal">
            Upon return, contains the number of I/O ports used by the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:41:02 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDtBoard(System.Int32@)">
            <summary>
            Gets the number of the Measurement Computing device with the DT-Connect interface used to connect to external
            memory boards.
            </summary>
            <param name="configVal">
            Upon return, contains the number of the Measurement Computing device connected to the external memory board.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:34:25 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetNumExps(System.Int32@)">
            <summary>
            Gets the number of expansion devices.
            </summary>
            <param name="configVal">
            Upon return, contains the number of expansion devices attached to the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:39:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetAdResolution(System.Int32@)">
            <summary>
            Gets the resolution of A/D.
            </summary>
            <param name="configVal">
            Upon return, contains the resolution of A/D.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:36:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cBoardConfig.GetDacResolution(System.Int32@)">
            <summary>
            Gets the resolution of D/A.
            </summary>
            <param name="configVal">
            Upon return, contains the resolution of D/A.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.BoardConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.BoardConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/6/2006 4:36:11 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.cBoardConfig.BoardInfo">
            <exclude/>
            <lastupdated>1/25/2006 3:06:06 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.MccService">
            <summary>
            Provides members for calling utility Universal Library methods. 
            </summary>
            <remarks>
            You do not need to create an instance of the MccService class to call these methods.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>3/9/2006 11:38:27 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccService.CurrentRevNum">
            <exclude/>
            <lastupdated>3/17/2006 1:01:07 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccService.GetFirst">
            <summary>
            Gets the first binary file in a directory.
            </summary>
            <lastupdated>3/17/2006 1:10:24 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccService.GetNext">
            <summary>
            Gets the next binary file in a directory.
            </summary>
            <lastupdated>3/17/2006 1:10:34 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccService.BoardNameLen">
            <exclude/>
            <lastupdated>3/17/2006 1:00:45 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccService.m_errorInfo">
            <exclude/>
            <summary>
            For internal use only.
            </summary>
            <lastupdated>3/17/2006 1:03:08 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.#ctor">
            <summary>
            Creates an <see cref="T:MccDaq.MccService"/>.
            </summary>
            <lastupdated>10/18/2006 3:14:24 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.GetRevision(System.Single@,System.Single@)">
            <summary>
            Gets the revision level of Universal Library DLL and the VXD.
            </summary>
            <param name="revNum">
            Upon return, contains the revision number of the Library DLL.
            </param>
            <param name="vxdRevNum">
            Upon return, contains the revision number of the Library VXD.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates if the revision levels of VXD and DLL are incompatible.
            </returns>
            <lastupdated>2/20/2006 6:45:13 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ErrHandling(MccDaq.ErrorReporting,MccDaq.ErrorHandling)">
            <summary>
            The error handling for all subsequent method calls. If the Universal Library cannot find the configuration file CB.CFG, it terminates the program, regardless of the <format type="bold">ErrHandling</format> setting.
            </summary>
            <param name="errorReporting">
            Controls when the library prints error messages on the screen. The default is DontPrint. Set to one of the constants in the "errorReporting parameter values" section below.
            </param>
            <param name="errorHandling">
            Specifies what class of error causes the program to halt. The default is DontStop. Set it to one of the constants in the "errorHandling parameter values" section below.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that always has MccDaq.ErrorInfo.<see cref="P:MccDaq.ErrorInfo.Value"/>= NoErrors
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            errorReporting parameter values:
            <para>
            All of the errorReporting settings are MccDaq.ErrorReporting enumerated constants. To set a variable to one of these constants, refer to the MccDaq object and the ErrorReporting enumeration (variable = MccDaq.ErrorReporting.DontPrint, etc.).
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorReporting.DontPrint"/> - Errors do not generate a message to the screen. In this case, your program must always check the returned error code after each library call to determine if an error occurred.
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorReporting.PrintWarnings"/> - Only warning errors generate a message to the screen. Your program must check for fatal errors.
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorReporting.PrintFatal"/> - Only fatal errors generate a message to the screen. Your program must check for warning errors. 
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorReporting.PrintAll"/> - All errors generate a message to the screen. 
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            errorHandling parameter values:
            <para>
            All of the errorReporting settings are MccDaq.ErrorHandling enumerated constants. To set a variable to one of these constants, refer to the MccDaq object and the ErrorHandling enumeration (variable = MccDaq.ErrorHandling.DontStop, and so on).
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorHandling.DontStop"/> - The program always continues executing when an error occurs.
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorHandling.StopFatal"/> - The program halts if a "fatal" error occurs.
            </para>
            					<para>
            						<see cref="F:MccDaq.ErrorHandling.StopAll"/> - Stop whenever any error occurs. You can check error codes to determine the cause of the error.
            </para>
            				</description>
            			</item>
            		</list>
            Warnings vs. fatal errors:
            <list type="bullet">
            			<item>
            				<description>
            All errors that can occur are classified as either "warnings" or "fatal."
            <para>
            Errors that can occur in normal operation in a bug free program (disk is full, too few samples before trigger occurred) are classified as "warnings."
            </para>
            					<para>
            All other errors indicate a more serious problem and are classified as "fatal."
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/13/2010 1:28:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)">
            <summary>
            Returns information about a streamer file.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="lowChan">
            Upon return, contains the number of the low channel of the channel range in the file.
            </param>
            <param name="highChan">
            Upon return, contains the number of the high channel of the channel range in the file.
            </param>
            <param name="pretrigCount">
            Upon return, contains the number of pretrigger samples in the file.
            </param>
            <param name="totalCount">
            Upon return, contains the total number of samples in the file.
            </param>
            <param name="rate">
            Upon return, contains the actual sampling rate in scans per second per channel.
            </param>
            <param name="range">
            Upon return, contains the A/D <see cref="T:MccDaq.Range"/> code. 
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            When <see cref="M:MccDaq.MccBoard.FileAInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.FilePretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> method fills the streamer file, information is stored about how the data was collected (sample rate, channels sampled etc.). This method returns that information. Refer to the Measurement Computing device-specific information in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if your device supports <format type="bold">FileAInScan</format> and/or <format type="bold">FilePretrig</format>.
            </remarks>
            </comment>
            <lastupdated>5/4/2010 2:00:32 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Int16@)">
            <summary>
            Reads data from a streamer file, and returns the data in an array.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="firstPoint">
            Index of the first point to read.
            </param>
            <param name="numPoints">
            Number of points to read from the file.
            </param>
            <param name="dataBuffer">
            An array used to store the data read from the file.
            </param>
            <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Data format: The data is returned as 16 bits. The 16 bits may represent 12 bits of analog, 12-bits of analog plus 4 bits of channel, or 16-bits of analog. Use <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to correctly load the data into an array.
            </description>
            			</item>
            			<item>
            				<description>
            Loading portions of files: The file may contain much more data than can fit in <paramref name="dataBuffer"/>. In those cases, use <paramref name="numPoints"/> and <paramref name="firstPoint"/> to read a selected piece of the file into dataBuffer. Call <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method first to find out how many points are in the file.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:02:50 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Int16[])">
            <summary>
            Reads data from a streamer file, and returns the data in an array.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="firstPoint">
            Index of the first point to read.
            </param>
            <param name="numPoints">
            Number of points to read from the file.
            </param>
            <param name="dataBuffer">
            An array used to store the data read from the file.
            </param>
            <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:22:08 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.Double[0:,0:]@,System.Int32)">
            <summary>
            Reads data from a streamer file, and returns the data in a two-dimensional array.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="firstPoint">
            Index of the first point to read.
            </param>
            <param name="numPoints">
            Number of points to read from the file.
            </param>
            <param name="dataBuffer">
            An array used to store the data read from the file.
            </param>
            <param name="numChannels">
            Number of channels to read into <paramref name="dataBuffer"/>.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            The file may contain much more data than can fit in <paramref name="dataBuffer"/>. Use <paramref name="numPoints"/> and <paramref name="firstPoint"/> to read a selected piece of the file into <paramref name="dataBuffer"/>. Call <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method first to find out how many points are in the file.
            </remarks>
            </comment>
            <lastupdated>5/4/2010 2:00:46 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:35:56 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array of doubles.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:20:08 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Double[0:,0:]@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array of doubles.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <param name="numChannels">
            Number of channels to copy into <format type="italics">dataArray</format>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:35:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.IntPtr,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array of doubles.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <param name="numChannels">
            Number of channels to copy into <format type="italics">dataArray</format>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:35:48 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.Int32,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 10:20:43 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 10:20:11 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinBufToArray(System.Int32,System.Double@,System.Int32,System.Int32)">
            <summary>
            Copies double-precion data from a Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            The memory handle that was returned by the <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)" crefType="Unqualified"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            	An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<para>This method is used in conjunction with the ScaleData scan option and <see cref="M:MccDaq.MccService.ScaledWinBufAlloc(System.Int32)" crefType="Unqualified"/>.</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 4:34:01 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinBufToArray(System.IntPtr,System.Double[],System.Int32,System.Int32)">
            <summary>
            Copies double-precion data from a Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            The memory handle that was returned by the <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)" crefType="Unqualified"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            	An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:34:05 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.Int32,System.Double[0:,0:]@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into a two-dimensional array.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <param name="numChannels">
            Number of channels to copy into <paramref name="dataArray"/>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:37:44 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.IntPtr,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into a two-dimensional array.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <param name="numChannels">
            Number of channels to copy into <paramref name="dataArray"/>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:38:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:32:41 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.Int16[],System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:23:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinArrayToBuf(System.Double@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies double-precision values from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">The array containing the data to be copied.</param>
            <param name="memHandle">The memory handle that was returned by <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)" crefType="Unqualified"/> when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">Index of the first point in the memory buffer where the data will be copied.</param>
            <param name="numPoints">Number of data points to copy.</param>
            <returns>An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:30:58 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinArrayToBuf(System.Double[],System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies double-precision values from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">The array containing the data to be copied.</param>
            <param name="memHandle">The memory handle that was returned by <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)" crefType="Unqualified"/> when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">Index of the first point in the memory buffer where the data will be copied.</param>
            <param name="numPoints">Number of data points to copy.</param>
            <returns>An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:30:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.Double[0:,0:]@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <param name="numChannels">
            Number of analog channels.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:32:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.Double[0:,0:],System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <param name="numChannels">
            Number of analog channels.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:32:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAlloc(System.Int32)">
            <summary>
            Allocates a Windows global memory buffer to use with the scan functions.
            </summary>
            <param name="numPoints">
            Size of buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <comment>
            	<remarks>
            		<para>
            This method does not return an <see cref="T:MccDaq.ErrorInfo"/> object. It returns a Windows global memory handle that can be passed to the scan functions in the library. If an error occurs, the handle comes back as 0 to indicate the error.
            </para>
            		<para>
            This method specifies how many data points (16-bit integers, NOT bytes) can be stored in the buffer.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:10:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAllocEx(System.Int32)">
            <summary>
            Allocates a Windows global memory buffer to use with the scan functions.
            </summary>
            <param name="numPoints">
            Size of buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <lastupdated>5/7/2010 10:17:42 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAlloc32(System.Int32)">
            <summary>
            Allocates a 32-bit Windows global memory buffer to use with 32-bit scan functions.
            </summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <comment>
            	<remarks>
            		<para>
            This method does not return an <see cref="T:MccDaq.ErrorInfo"/> object. It returns a Windows global memory handle that can be passed to the scan functions in the library. If an error occurs, the handle comes back as 0 to indicate the error.
            </para>
            		<para>
            This method specifies how many data points (32-bit integers, NOT bytes) can be stored in the buffer.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:10:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)">
            <summary>
            Allocates a 32-bit Windows global memory buffer to use with 32-bit scan functions.
            </summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <lastupdated>5/4/2010 4:34:39 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAlloc64(System.Int32)">
            <summary>
            Allocates a 64-bit Windows global memory buffer to use with 64-bit scan functions.</summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <comment>
            	<remarks>
            		<para>
            This method does not return an <see cref="T:MccDaq.ErrorInfo"/> object. It returns a Windows global memory handle that can be passed to the scan functions in the library. If an error occurs, the handle comes back as 0 to indicate the error.
            </para>
            		<para>
            This method specifies how many data points (64-bit integers, NOT bytes) can be stored in the buffer.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:11:06 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufAlloc64Ex(System.Int32)">
            <summary>
            Allocates a 64-bit Windows global memory buffer to use with 64-bit scan functions.</summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <lastupdated>5/4/2010 4:34:55 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinBufAlloc(System.Int32)">
            <summary>
            Allocates a Windows global memory buffer to hold scaled data obtained from scan operations in which the ScaleData scan option is selected.
            </summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <comment>
            	<remarks>
            		<para>
            This method does not return an <see cref="T:MccDaq.ErrorInfo"/> object. It returns a Windows global memory handle that can be passed to the scan functions in the library. If an error occurs, the handle comes back as 0 to indicate the error.
            </para>
            		<para>
            This method specifies how many double precision values (8-byte or 64-bit) can be stored in the buffer.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:03:40 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)">
            <summary>
            Allocates a Windows global memory buffer to hold scaled data obtained from scan operations in which the ScaleData scan option is selected.
            </summary>
            <param name="numPoints">
            Size of the buffer to allocate. 
            </param>
            <returns>
            0 if the buffer could not be allocated, or a non-zero integer handle to the buffer.
            </returns>
            <lastupdated>5/4/2010 4:23:27 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufFree(System.Int32)">
            <summary>
            Frees a Windows global memory buffer previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method.
            </summary>
            <param name="memHandle">
            Windows memory handle. This must be the memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 10:21:16 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufFreeEx(System.IntPtr)">
            <summary>
            Frees a Windows global memory buffer previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method.
            </summary>
            <param name="memHandle">
            Windows memory handle. This must be the memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 10:19:50 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.DeclareRevision(System.Single@)">
            <summary>
            Initializes the Universal Library (UL) with the revision number of the library used to write your program. 
            </summary>
            <param name="revNum">
            Revision number of the UL used to interpret method parameters.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Must be the first Universal Library method to be called by your program.
            </description>
            			</item>
            			<item>
            				<description>
            Any program that uses the 32-bit library and that does not contain this line of code defaults to UL revision 5.4 parameter assignments.
            <para>
            As new revisions of the UL  are released, bugs from previous revisions are fixed and occasionally new methods are added. It is National Instruments' goal to preserve existing programs you have written, and therefore you never have to change the order or number of parameters in a method.
            </para>
            					<para>
            With the <format type="bold">DeclareRevision</format> method, programs do not have to be rewritten in each line where new methods are used, and the program then recompiled. The revision control method initializes the DLL so that the methods are interpreted according to the format of the revision that you wrote and compiled your program in. The method works by interpreting the UL function call from your program and filling in any arguments needed to run with the new revision. 
            </para>
            					<para>
            If your program has declared you are running code written for an earlier revision and you call a new method, you must rewrite your program to include the new parameter, and declare the current revision in <format type="bold">DeclareRevision</format>.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:55:11 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.GetBoardName(System.Int32,System.String@)">
            <summary>
            Returns the name of a specified Measurement Computing device.
            </summary>
            <param name="BoardNumber">
            Upon return, refers either to the board number associated with a board when it was installed, <see cref="F:MccDaq.MccService.GetFirst"/> or <see cref="F:MccDaq.MccService.GetNext"/>.
            </param>
            <param name="boardName">
            Upon return, contains the null-terminated string variable containing the board name.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            There are two ways to use this function:
            <list type="bullet">
            			<item>
            				<description>
            Pass a board number as the <paramref name="BoardNumber"/> parameter. The string that is returned describes the type of the installed device.
            </description>
            			</item>
            			<item>
            				<description>
            			Set <paramref name="BoardNumber"/> to <format type="italics"><see cref="F:MccDaq.MccService.GetFirst"/></format> or <format type="italics"><see cref="F:MccDaq.MccService.GetNext"/></format> to get a list of all board types that are supported by the library. 
            <para>
            Set <paramref name="BoardNumber"/> to <format type="italics">GetFirst</format> to get the first device type in the list of Measurement Computing devices configured by <format type="italics">Insta</format>Cal. Subsequent calls with <paramref name="BoardNumber"/>=<format type="italics">GetNext</format> returns each of the other device types in <format type="italics">Insta</format>Cal. When you reach the end of the list, <paramref name="boardName"/> is set to an empty string.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:03:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.UInt16@)">
            <summary>
            Reads data from a streamer file, and returns the data in an array.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="firstPoint">
            Index of the first point to read.
            </param>
            <param name="numPoints">
            The number of points to read from the file.
            </param>
            <param name="dataBuffer">
            An array used to store the data read from the file.
            </param>
            <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Data format: The data is returned as 16 bits. The 16 bits may represent 12 bits of analog, 12-bits of analog plus 4 bits of channel, or 16-bits of analog. Use <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to correctly load the data into an array.
            </description>
            			</item>
            			<item>
            				<description>
            Loading portions of files: The file may contain much more data than can fit in dataBuffer. In those cases, use totalCount and firstPoint to read a selected piece of the file into dataBuffer. Call <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method first to find out how many points are in the file.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:03:07 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.FileRead(System.String,System.Int32,System.Int32@,System.UInt16[])">
            <summary>
            Reads data from a streamer file, and returns the data in an array.
            </summary>
            <param name="fileName">
            Name of the streamer file.
            </param>
            <param name="firstPoint">
            Index of the first point to read.
            </param>
            <param name="numPoints">
            Number of points to read from the file.
            </param>
            <param name="dataBuffer">
            An array used to store the data read from the file.
            </param>
            <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:22:26 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.Int32,System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:36:01 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray(System.IntPtr,System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Copies data from a Windows memory buffer into an array of doubles.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:21:35 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.Int32,System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into an array.
            </summary>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 10:20:27 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinBufToArray32(System.IntPtr,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Copies data from a 32-bit Windows memory buffer into a two-dimensional array.
            </summary>
            <param name="memHandle">
            Memory handle returned by the <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method when the buffer was allocated. The data will be copied from this buffer.
            </param>
            <param name="dataArray">
            Array that the data will be copied to.
            </param>
            <param name="firstPoint">
            Index of the first point in the memory buffer to copy data from.
            </param>
            <param name="numPoints">
            Number of data points to copy.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:22:21 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.UInt16@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:32:48 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccService.WinArrayToBuf(System.UInt16[],System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies data from an array into a Windows memory buffer.
            </summary>
            <param name="dataArray">
            Array containing the data to be copied.
            </param>
            <param name="memHandle">
            Memory handle returned by <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> method when the buffer was allocated. The data will be copied into this buffer.
            </param>
            <param name="firstPoint">
            Index of first point in memory buffer where data will be copied to.
            </param>
            <param name="numPoints">
            Number of data points to copy per analog channel.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:24:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.DataLogger">
            <summary>
            Exposes all Universal Library data logger methods to languages supported by the .Net CLR.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use a reference to this class to access and process data in binary log
            files.
            </remarks>
            <lastupdated>3/9/2006 11:35:33 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:MccDaq.DataLogger"/>.
            </summary>
            <param name="fileName">
            Name of the file used to log data.
            </param>
            <lastupdated>10/18/2006 2:54:48 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetFileName(System.Int32,System.String@,System.String@)">
            <summary>Returns the name of the <format type="italics">n</format><format type="superscript">th</format> file in the directory containing binary log files.
            </summary>
            <param name="fileNumber">
            Index of the file whose name you want to return. 
            </param>
            <param name="path">
            The full path of the directory containing the log files.
            </param>
            <param name="filename"> Upon return, contains the full path and name of the binary file. The path is null-terminated and is not longer than 256 characters.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<paramref name="fileNumber"/> parameter options
            <para>Specify one of the following:</para>
            					<list type="bullet">
            						<item>
            							<description>
            The number (<format type="italics">n</format>) that represents the location of the file in the directory (where <format type="italics">n</format>
            = 0, 1, 2, and so on)
            </description>
            						</item>
            						<item>
            							<description>
            								<see cref="F:MccDaq.MccService.GetFirst"/> - get the first file in the directory
            </description>
            						</item>
            						<item>
            							<description>
            								<see cref="F:MccDaq.MccService.GetNext"/>  - get the next file in the directory based on the current location.
            </description>
            						</item>
            					</list>
            					<para>This parameter is the index of the file in the directory, and is not part of the
            filename.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            To access all of the files in a directory, first call this method with <paramref name="fileNumber"/>
            set to <see cref="F:MccDaq.MccService.GetFirst"/>, then continue with the <paramref name="fileNumber"/> set to <see cref="F:MccDaq.MccService.GetNext"/>
            until the method returns the error code <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.NoMoreFiles"/></format>. 
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:14:05 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)">
            <summary>Sets preferences for time stamp data, analog temperature data, and
            CJC temperature data. 
            </summary>
            <param name="timeFormat">
            The  format used to display time stamp data.
            </param>
            <param name="timeZone">
            The  time zone used to store time stamp data.
            </param>
            <param name="units">Sets whether to convert temperature data to Fahrenheit or Kelvin, or return temperature data in Celsius units as they are stored in the file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The <paramref name="timeFormat"/> settings are <format type="italics"><see cref="F:MccDaq.TimeFormat.TwelveHour"/></format> (for example 2:32:51PM) and <format type="italics"><see cref="F:MccDaq.TimeFormat.TwentyFourHour"/></format> (for example 14:32:51).
            </description>
            			</item>
            			<item>
            				<description>The <paramref name="timeZone"/> settings are <format type="italics"><see cref="F:MccDaq.TimeZone.Local"/></format> and <format type="italics"><see cref="F:MccDaq.TimeZone.GMT"/></format>.
            			</description>
            			</item>
            			<item>
            				<description>The <paramref name="units"/> settings <format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, and <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>.
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:16:12 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetPreferences(MccDaq.TimeFormat@,MccDaq.TimeZone@,MccDaq.TempScale@)">
            <summary>Returns API preference settings for time stamp data, analog temperature data, and
            CJC temperature data. Returns the default values unless changed using the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method.
            </summary>
            <param name="timeFormat">
            Upon return, contains the <see cref="T:MccDaq.TimeFormat"/> used to display time stamp data.
            </param>
            <param name="timeZone">
            Upon return, contains the <see cref="T:MccDaq.TimeZone"/> used to store time stamp data.
            </param>
            <param name="units">Upon return, contains the <see cref="T:MccDaq.TempScale"/> used for analog temperature data. This value is ignored if raw data values
            are logged.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The <paramref name="timeFormat"/> settings are <format type="italics"><see cref="F:MccDaq.TimeFormat.TwelveHour"/></format> (for example 2:32:51PM) and <format type="italics"><see cref="F:MccDaq.TimeFormat.TwentyFourHour"/></format> (for example 14:32:51).
            </description>
            			</item>
            			<item>
            				<description>The <paramref name="timeZone"/> settings are <format type="italics"><see cref="F:MccDaq.TimeZone.Local"/></format> and <format type="italics"><see cref="F:MccDaq.TimeZone.GMT"/></format>.
            			</description>
            			</item>
            			<item>
            				<description>The <paramref name="units"/> settings <format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, and <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>.
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:14:24 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetFileInfo(System.Int32@,System.Int32@)">
            <summary>Returns the version level and byte size of a binary file.
            </summary>
            <param name="fileVersion">
            Upon return, contains the version level of the binary file.
            </param>
            <param name="fileSize">Upon return, contains the size in bytes of the binary file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/6/2006 5:40:07 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetSampleInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Returns the sample interval, sample count, and the date and time of the first data
            point in a binary file.
            </summary>
            <param name="sampleInterval">Upon return, contains the number of seconds between samples.
            </param>
            <param name="sampleCount">Upon return, contains the number of samples in the file.
            </param>
            <param name="startDate">Upon return, contains the date of the first data point logged in the file. Date values are packed in the
            following format:
            <list type="bullet">
            		<item>
            			<description>
            Byte 0: Day
            </description>
            		</item>
            		<item>
            			<description>
            Byte 1: Month
            </description>
            		</item>
            		<item>
            			<description>
            Bytes 2-3: Year<format type="monospace"></format>
            			</description>
            		</item>
            	</list>
            </param>
            <param name="startTime">Upon return, contains the time of the first data point logged in the file. Time values are packed in the
            following format:
            <list type="bullet">
            		<item>
            			<description>
            Byte 0: Seconds
            </description>
            		</item>
            		<item>
            			<description>
            Byte 1: Minutes
            </description>
            		</item>
            		<item>
            			<description>
            Byte 2: Hours
            </description>
            		</item>
            		<item>
            			<description>
            Byte 3: 0xff = 24-hour format
            <para>
            0x0 - AM
            </para>
            				<para>
            0x1 - PM
            </para>
            			</description>
            		</item>
            	</list>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/6/2006 5:41:32 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetAIChannelCount(System.Int32@)">
            <summary>
            Returns the total number of analog channels that were logged in a binary file.
            </summary>
            <param name="aiCount">
            Upon return, contains the number of analog input channels logged in the binary file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/6/2006 5:39:44 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetAIInfo(System.Int32[]@,System.Int32[]@)">
            <summary>Returns the channel number and unit value of each analog input channel logged in
            a binary file.
            </summary>
            <param name="channelNumbers">
            Upon return, contains an array with the analog input channel numbers logged in the file.
            </param>
            <param name="units">
            Upon return, contains an array with the <see cref="T:MccDaq.LoggerUnits"/> values set by the Measurement Computing device in <format type="italics">Insta</format>Cal for each analog
            input channel logged in the file. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>10/18/2006 11:38:57 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetCJCInfo(System.Int32@)">
            <summary>
            Returns the number of CJC temperature channels logged in a binary file.
            </summary>
            <param name="cjcCount">
            Upon return, contains the number of CJC temperature channels logged in the binary file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/6/2006 5:39:57 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.GetDIOInfo(System.Int32@)">
            <summary>
            Returns the number of digital I/O channels logged in a binary file.
            </summary>
            <param name="dioCount">
            Upon return, contains the number of digital I/O channels logged in the binary file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>2/6/2006 5:40:01 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.ReadTimeTags(System.Int32,System.Int32,System.Int32[]@,System.Int32[]@)">
            <summary>Returns date and time values logged in a binary file. This method stores date values
            in the <paramref name="dateTags"/> array, and time values in the <paramref name="timeTags"/> array.
            </summary>
            <param name="startSample">The  position of the first sample to read from the binary file.
            </param>
            <param name="count">The  number of samples to read from the binary file.
            </param>
            <param name="dateTags">Upon return, contains the date tag values. Dates are packed in the following format:
            <list type="bullet">
            		<item>
            			<description>
            Byte 0: Day
            </description>
            		</item>
            		<item>
            			<description>
            Byte 1: Month
            </description>
            		</item>
            		<item>
            			<description>
            Bytes 2-3: Year<format type="monospace"></format>
            			</description>
            		</item>
            	</list>
            </param>
            <param name="timeTags">Upon return, contains the time tag values. Time values are packed in the
            following format:
            <list type="bullet">
            		<item>
            			<description>
            Byte 0: Seconds
            </description>
            		</item>
            		<item>
            			<description>
            Byte 1: Minutes
            </description>
            		</item>
            		<item>
            			<description>
            Byte 2: Hours
            </description>
            		</item>
            		<item>
            			<description>
            Byte 3: 0xff = 24-hour format
            <para>
            0x0 - AM
            </para>
            				<para>
            0x1 - PM
            </para>
            			</description>
            		</item>
            	</list>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            			Use the  <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method to set the time zone (<paramref name="timeZone"/> parameter) and
            time format (<paramref name="timeFormat"/> parameter) used to store timestamp data. <para>Timestamp data are logged in the file if <format type="italics">Insta</format>Cal is configured to do so. If time
            stamps are not logged, the time array is filled with values calculated from the file
            header information.</para>
            				</description>
            			</item>
            			<item><description>You are responsible for allocating the size of the date and time arrays, and making sure
            that they are large enough to hold the data that is returned. You can calculate
            the array allocation using the <paramref name="sampleCount"/> parameter from the <see cref="M:MccDaq.DataLogger.GetSampleInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/> method.
            <code>int* dates  = new int[SampleCount];</code>
            					<code>int* times  = new int[SampleCount];</code>
            					<para>The figure below shows the layout of the <paramref name="dateTags"/> array, and how the elements should
            be indexed.</para>
            					<para><image src="Array_datestamp.gif"/></para><para>where <format type="italics">n</format> is (<paramref name="numberOfSamples"/> – 1).</para>
            					<para>Each sample has only one date. Use the following code fragment to access the elements of the <paramref name="dateTags"/> array:</para>
            					<example>
            						<code>
            for (i=0; i&lt;numberOfSamples; i++)
            {
                 d = dateTagsArray[i];
            }
            </code>
            					</example>
            					<para>The figure below shows the layout of the <paramref name="timeTags"/> array, and how the elements should
            be indexed.</para>
            					<para><image src="Array_timestamp.gif"/></para><para>where <format type="italics">n</format> is (<paramref name="numberOfSamples"/> – 1).</para>
            					<para>Each sample has only one time value. Use the following code fragment to access the elements of the <paramref name="timeTags"/> array:</para>
            					<example>
            						<code>
            for (i=0; i&lt;numberOfSamples; i++)
            {
                 t = timeTagsArray[i];
            }
            </code>
            					</example>
            				</description></item></list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:15:53 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.ReadAIChannels(System.Int32,System.Int32,System.Single[]@)">
            <summary>Returns analog input data from a binary file, and stores the values in an array.
            </summary>
            <param name="startSample">The  position of the first sample to read from the binary file.
            </param>
            <param name="count">The  number of samples to read from the binary file.
            </param>
            <param name="aiChannels">Upon return, contains the analog input data from the logger file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>The unit of the analog input data that is returned is set by the value of the <paramref name="units"/>
            parameter of the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method.
            <para>The units preference is only applied if the logged data is temperature data. This
            value is ignored if the data logged is raw.</para>
            				</description>
            			</item></list><list type="bullet">
            			<item><description>You are responsible for allocating the size of the analog array, and making sure
            that it is large enough to hold the data that is returned. You can calculate
            the array allocation using the <paramref name="sampleCount"/> value from the <see cref="M:MccDaq.DataLogger.GetSampleInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/> method, and the <paramref name="aiCount"/>
            value from the <see cref="M:MccDaq.DataLogger.GetAIInfo(System.Int32[]@,System.Int32[]@)"/> method.
            				<para>The figure below shows the layout of the analog array, and how the elements should
            be indexed.</para>
            					<para><image src="Array_analog.gif"/></para><para>where <format type="italics">n</format> is (<paramref name="numberOfChannels"/> – 1).</para>
            					<para>CH0 – CH<format type="italics">n</format> refer to the channels in the array, not the input channels of the device.</para>
            					<para>For example, assume that all of the even number input channels are logged. The array
            channels are mapped as shown here.</para>
            					<list type="table">
            						<listheader>
            							<term>Array channel</term>
            							<description>Device input channel</description>
            						</listheader>
            						<item>
            							<term>
            0
            </term>
            							<description>
            							0
            						</description>
            						</item><item>
            							<term>
            1
            </term>
            							<description>
            							2
            						</description>
            						</item>
            						<item>
            							<term>
            2
            </term>
            							<description>
            							4
            						</description>
            						</item>
            						<item>
            							<term>
            3
            </term>
            							<description>
            							6
            						</description>
            						</item>
            					</list>
            				</description></item></list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:14:59 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.ReadCJCChannels(System.Int32,System.Int32,System.Single[]@)">
            <summary>Returns CJC temperature data from a binary file, and stores the data in an array.
            </summary>
            <param name="startSample">The  position of the first sample to read from the binary file.
            </param>
            <param name="count">The  number of samples to read from the binary file.
            </param>
            <param name="cjcChannels">Upon return, contains the CJC temperature data from the logger file.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>The unit of the CJC temperature data that is returned is set by the value of the <paramref name="units"/>
            parameter of the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method.
            <para>The units preference is only applied if the logged data is temperature data. This
            value is ignored if the data logged is raw.</para>
            				</description>
            			</item></list><list type="bullet">
            			<item><description>You are responsible for allocating the size of the CJC array, and making sure
            that it is large enough to hold the data that is returned. You can calculate
            the array allocation using the <paramref name="sampleCount"/> value from the <see cref="M:MccDaq.DataLogger.GetSampleInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/> method, and the <paramref name="cjcCount"/>
            value from the <see cref="M:MccDaq.DataLogger.GetCJCInfo(System.Int32@)"/> method.
            				<para>The figure below shows the layout of the CJC  array, and how the elements should
            be indexed.</para>
            					<para><image src="Array_CJC.gif"/></para><para>where <format type="italics">n</format> is (<paramref name="CJCCount"/> – 1).</para>
            				</description></item></list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:15:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.ReadDIOChannels(System.Int32,System.Int32,System.Int32[]@)">
            <summary>Returns digital I/O channel data from a binary file, and stores the data in an
            array.
            </summary>
            <param name="startSample">The  position of the first sample to read from the binary file.
            </param>
            <param name="count">The  number of samples to read from the binary file.
            </param>
            <param name="dioChannels">Upon return, contains the DIO channel data from the logger file. Each element of the array contains
            the value of one bit from a digital channel.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<para>You are responsible for allocating the size of the DIO array, and making sure
            that it is large enough to hold the data that is returned. You can calculate
            the array allocation using the <paramref name="sampleCount"/> value from the <see cref="M:MccDaq.DataLogger.GetSampleInfo(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/> method, and the <paramref name="dioCount"/>
            value from the <see cref="M:MccDaq.DataLogger.GetDIOInfo(System.Int32@)"/> method.</para>
            		<para>The figure below shows the layout of the DIO array, and how the elements should
            be indexed.</para>
            		<para><image src="Array_dio.gif"/></para><para>where <format type="italics">n</format> is (<paramref name="CJCCount"/> – 1).</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 2:15:31 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.DataLogger.ConvertFile(System.String,System.Int32,System.Int32,MccDaq.FieldDelimiter)">
            <summary>
            Converts a binary log file to a comma-separated values (.CSV) text file or another
            text file format that you specify.
            </summary>
            <param name="destFileName">
            Sets name and destination path of the converted file. Use the file extension of the
            file type that you want to create.
            </param>
            <param name="startSample">
            The line number in the file containing the first sample to read.</param>
            <param name="count">
            The number of samples to read.
            </param>
            <param name="delimiter">
            	<para><see cref="T:MccDaq.FieldDelimiter"/> that sets the character to use between fields in the converted file. The character options are enumerated constants.</para>
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Time stamp data is stored according to the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method's <paramref name="timeZone"/> and <paramref name="timeFormat"/>
            parameters.
            </description>
            			</item>
            			<item>
            				<description>
            Time stamps in the converted file may be in either 12-hour or 24-hour format based
            on the value of the timeFormat preference. Time stamps can optionally be converted
            to local time based on the value of the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method's <paramref name="timeZone"/> parameter.  
            </description>
            			</item>
            			<item>
            				<description>
            AI temperature data is stored according to the <see cref="M:MccDaq.DataLogger.SetPreferences(MccDaq.TimeFormat,MccDaq.TimeZone,MccDaq.TempScale)"/> method's <paramref name="units"/> parameter.
            <para>		
            The <paramref name="units"/> parameter is only valid if the logged data is temperature data. This value
            is ignored if the data logged is raw.
            The <paramref name="units"/> parameter is always applied to CJC data, since it is always logged as
            temperature data.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>If the <paramref name="destFileName"/> parameter ends with a .CSV extension, the <paramref name="delimiter"/> parameter
            must be set to <format type="italics"><see cref="F:MccDaq.FieldDelimiter.Comma"/></format>; otherwise, an error
            occurs. 
            You can open a .CSV file directly in Microsoft Excel.
            Text files with extensions other than .CSV can only be imported into Excel.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:13:37 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.DataLogger.FileName">
            <summary>
            Gets the name of a binary log file used by an instance of the <see cref="T:MccDaq.DataLogger"/> class.
            </summary>
            <value>
            Returns the current file name associated with an instance of the <see cref="T:MccDaq.DataLogger"/> class. Default value is null string.
            </value>
            <lastupdated>3/7/2006 2:12:35 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.cExpansionConfig">
            <summary>
            Provides members for setting and getting Measurement Computing expansion device information.
            </summary>
            <remarks>
            All instances of <format type="bold">cExpansionConfig</format> are derived from the MccBoard.<see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Dim Status As ErrorInfo
            Dim Board0 As MccBoard
            Dim configVal As Integer
            Dim devNum As Integer = 1
             
            Board0 = New MccBoard(0)
            Status = Board0.ExpansionConfig.GetBoardType(devNum, configVal)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            MccBoard board0;
            ErrorInfo status;
            MccBoard board0 = new MccBoard (0);
            int devNum=1;
            int configVal ;
             
            Status = Board0.ExpansionConfig.GetBoardType(devNum, out configVal);
             
            </code>
            </example>
            <lastupdated>3/7/2006 2:00:49 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.#ctor(MccDaq.MccBoard)">
            <summary>
            Creates a <see cref="T:MccDaq.cExpansionConfig"/>.
            </summary>
            <param name="mccBoard">
            	<see cref="T:MccDaq.MccBoard"/> instance whose expansion channel configuration you want to set and get.
            </param>
            <lastupdated>10/18/2006 2:39:48 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetBoardType(System.Int32,System.Int32@)">
            <summary>
            Gets the type of Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device assigned by <format type="italics">Insta</format>Cal.
            </param>
            <param name="configVal">
            Upon return, contains the device ID code of the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.</para>
            </remarks>
            <lastupdated>5/4/2010 2:28:38 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetMuxAdChan1(System.Int32,System.Int32)">
            <summary>
            Sets the first A/D channel to connect to the Measurement Computing expansion device. 
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Number of the first A/D channel to connect to the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:36:34 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetMuxAdChan1(System.Int32,System.Int32@)">
            <summary>
            Gets the first A/D channel connected to the Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains the number of the first A/D channel connected to the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:34:46 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetMuxAdChan2(System.Int32,System.Int32)">
            <summary>
            Sets the second A/D channel to connect to the Measurement Computing expansion device. 
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Number of the second A/D channel to connect to the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:36:56 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetMuxAdChan2(System.Int32,System.Int32@)">
            <summary>
            Gets the second A/D channel connected to the Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains the number of the second A/D channel connected to the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:35:07 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetRange1(System.Int32,System.Int32)">
            <summary>
            Sets the range/gain of the low 16 channels.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            The range (gain) of the low 16 channels.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:37:11 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetRange1(System.Int32,System.Int32@)">
            <summary>
            Gets the range/gain of the low 16 channels on a Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device.
            </param>
            <param name="configVal">
            Upon return, contains the range (gain) of the low 16 channels.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:35:33 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetRange2(System.Int32,System.Int32@)">
            <summary>
            Gets the range/gain of the high 16 channels on a Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device.
            </param>
            <param name="configVal">
            Upon return, contains the range (gain) of the high 16 channels.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:35:53 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetRange2(System.Int32,System.Int32)">
            <summary>
            Sets the range/gain of the high 16 channels.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            The range (gain) of the high 16 channels.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:37:23 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetCjcChan(System.Int32,System.Int32@)">
            <summary>
            Gets the number of the channel connected to the CJC.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains the number of the channel that is connected to the CJC.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:34:20 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetCjcChan(System.Int32,System.Int32)">
            <summary>
            Sets the channel connected to the CJC.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device.
            </param>
            <param name="configVal">
            Number of the A/D channel to connect to the CJC.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:36:19 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetThermType(System.Int32,System.Int32@)">
            <summary>
            Gets the type of thermocouple or RTD configuration for the Measurement Computing device (J, K, E, T, R, S, and B types).
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device.
            </param>
            <param name="configVal">
            Upon return, contains the number indicating the type of thermocouple configured for the Measurement Computing device. 
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.</para>
            </remarks>
            <lastupdated>5/4/2010 2:29:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.SetThermType(System.Int32,System.Int32)">
            <summary>
            Sets the type of thermocouple or RTD configuration for the Measurement Computing device (J, K, E, T, R, S, and B types).
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device.
            </param>
            <param name="configVal">
            Number that sets the type of thermocouple or RTD configured for the Measurement Computing device. 
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.</para>
            </remarks>
            <lastupdated>5/4/2010 2:30:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cExpansionConfig.GetNumExpChans(System.Int32,System.Int32@)">
            <summary>
            Gets the number of channels on a Measurement Computing expansion device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing expansion device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains the number of channels on the Measurement Computing expansion device.
            </param>
            <returns>
            Returns an <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <remarks>
            Accessible from the <see cref="P:MccDaq.MccBoard.ExpansionConfig"/> property.
            </remarks>
            <lastupdated>10/18/2006 11:35:19 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.cDioConfig">
            <summary>
            Provides all members for getting and setting digital I/O configuration items on a Measurement Computing DIO device.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            All instances of <format type="bold">cDioConfig</format> are derived from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <lastupdated>3/7/2006 10:44:23 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.#ctor(MccDaq.MccBoard)">
            <summary>
            Creates a <see cref="T:MccDaq.cDioConfig"/>.
            </summary>
            <param name="mccBoard">
            	<see cref="T:MccDaq.MccBoard"/> instance whose digital I/O configuration you want to set and get.
            </param>
            <lastupdated>10/18/2006 2:38:57 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetDevType(System.Int32,System.Int32@)">
            <summary>
            Gets the type of a digital port on a Measurement Computing device.
            </summary>
            <param name="devNum">
            Number of the digital device.
            </param>
            <param name="configVal">
            Upon return, contains the constant that indicates the type of digital port (AUXPORT, FIRSTPORTA, and so on).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/7/2006 10:51:38 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetConfig(System.Int32,System.Int32@)">
            <summary>
            Gets the configuration of a Measurement Computing digital device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing digital device whose configuration setting you want to get.
            </param>
            <param name="configVal">
            Upon return, contains the current digital configuration of the Measurement Computing device ( 1 = <format type="italics">DigitalOut</format>, 2 = <format type="italics">DigitalIn</format>).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/7/2006 10:45:08 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetNumBits(System.Int32,System.Int32@)">
            <summary>
            Gets the number of bits in a digital port on a Measurement Computing device.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing digital device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains the number of bits in the digital port.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/7/2006 11:01:38 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetCurVal(System.Int32,System.Int32@)">
            <summary>
            Gets the current value of a digital output.
            </summary>
            <param name="devNum">
            Number of the Measurement Computing digital device whose digital output value you want to get.
            </param>
            <param name="configVal">
            Upon return, contains the current value of the Measurement Computing device's digital output.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>3/7/2006 10:47:49 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetDInMask(System.Int32,System.Int32@)">
            <summary>
            Gets the bits on a specified port that are configured for input.
            </summary>
            <param name="devNum">
            Number of the port whose input bit configuration you want to get.
            </param>
            <param name="configVal">
            Upon return, contains the bit configuration of the specified port. Any bits that return a value of 1 are configured for input. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="M:MccDaq.cDioConfig.GetDOutMask(System.Int32,System.Int32@)"/>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 3:06:58 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetDOutMask(System.Int32,System.Int32@)">
            <summary>
            Determines the bits on a specified port that are configured for output.
            </summary>
            <param name="devNum">
            Number of the port whose output bit configuration you want to determine.
            </param>
            <param name="configVal">
            Upon return, contains the bit configuration of the specified port. Any bits that return a value of 1 are configured for output.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <remarks>
            	<para>Accessible from the <see cref="P:MccDaq.MccBoard.DioConfig"/> property.
            </para>
            </remarks>
            <seealso cref="M:MccDaq.cDioConfig.GetDInMask(System.Int32,System.Int32@)"/>
            <seealso cref="P:MccDaq.MccBoard.DioConfig"/>
            <seealso cref="T:MccDaq.ErrorInfo"/>
            <lastupdated>5/4/2010 2:23:58 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.GetAlarmMask(System.Int32,System.Int32@)">
            <exclude/>
            <lastupdated>1/26/2006 10:41:55 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cDioConfig.SetAlarmMask(System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>1/26/2006 1:37:58 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.EventCallback">
            <summary>
            Called as a parameter of the <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method. You call the delegate by passing either its address or a pointer to it to the <paramref name="callbackFunc"/> parameter of the <format type="bold">EnableEvent</format> method.
            </summary>
            <param name="BoardNum">
            Number of the board that caused the event.
            </param>
            <param name="EventType">
            	<see cref="T:MccDaq.EventType"/> that indicates the event that occurred.
            </param>
            <param name="EventData">
            Measurement Computing device-specific data associated with this event. 
            </param>
            <param name="pUserData">
            Pointer to or reference of data supplied by the <paramref name="userData"/> parameter in the <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method. Before using this parameter value, it must be cast to the same data type as it was passed to <format type="bold">EnableEvent</format>.
            </param>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            A delegate is a data structure that refers either to a static method, or to a class instance and an instance method of that class.
            You create the data structure using the prototype shown above. 
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="EventType"/> parameter options - Describes the type of data that the <paramref name="EventData"/> parameter contains. 
            <list type="bullet">
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - <paramref name="EventData"/> contains the error code of the scan error.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - <paramref name="EventData"/> contains the number of interrupts generated since enabling the OnExternalInterrupt event.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - <paramref name="EventData"/> contains the number of pretrigger samples available at time of pretrigger. Value is invalid for some Measurement Computing devices when a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> error occurs.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - <paramref name="EventData"/> contains the number of samples acquired since the start of the scan. 
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - <paramref name="EventData"/> contains the total number of samples acquired when the scan finishes or is stopped.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - <paramref name="EventData"/> contains the total number of samples output when the scan finishes or is stopped.
            </description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/7/2010 11:44:24 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.CallbackFunction">
            <exclude/>
            <lastupdated>2/22/2006 12:04:56 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.MccBoard">
            <summary>
            Exposes all Universal Library functions to languages supported by the .NET CLR.
            </summary>
            <remarks>
            Use a reference to this class to get or set various Measurement Computing device configuration settings.
            </remarks>
            <lastupdated>3/9/2006 11:37:16 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccBoard.Idle">
            <summary>
            Indicates a background process is not currently executing. 
            </summary>
            <seealso cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/>
            <seealso cref="F:MccDaq.MccBoard.Running"/>
            <lastupdated>2/21/2006 8:54:02 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccBoard.Running">
            <summary>
            Indicates a background process is currently executing. 
            </summary>
            <seealso cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/>
            <seealso cref="F:MccDaq.MccBoard.Idle"/>
            <lastupdated>2/21/2006 8:54:12 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccBoard.NotUsed">
            <summary>
            </summary>
            <lastupdated>2/20/2006 7:52:19 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:MccDaq.MccBoard.FromHere">
            <summary>
            Pointer to the current element in an array.
            </summary>
            <seealso cref="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)"/>
            <lastupdated>2/21/2006 8:54:47 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.#ctor">
            <summary>
            Creates an <see cref="T:MccDaq.MccBoard"/>.
            </summary>
            <lastupdated>10/18/2006 3:10:30 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.#ctor(System.Int32)">
            <summary>
            Creates an <see cref="T:MccDaq.MccBoard"/>.
            </summary>
            <param name="boardNum">
            Number of the board used to create the <see cref="T:MccDaq.MccBoard"/> object.
            </param>
            <lastupdated>10/18/2006 3:12:44 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ACalibrateData(System.Int32,MccDaq.Range,System.Int16@)">
            <summary>
            Calibrates the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from devices with real-time software
            calibration when the real-time calibration has been turned off. The <format type="bold">AInScan</format> method
            returns either raw A/D data or calibrated data, depending on whether or not the
            <format type="italics"><see cref="F:MccDaq.ScanOptions.NoCalibrateData"/></format> option was used.
            </summary>
            <param name="numPoints">
            The  number of samples to calibrate.
            </param>
            <param name="range">
            The  programmable gain/range used when the data was collected.
            </param>
            <param name="adData">
            Upon return, contains the calibrated data.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            When collecting data using <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method with the <format type="italics">NoCalibrateData</format> option, use this method
            to calibrate the data after it is collected.
            <list type="bullet">
            			<item>
            				<description>
            The name of array must match that used in <format type="bold">AInScan</format>.
            </description>
            			</item>
            			<item>
            				<description>
            Applying software calibration factors in real-time on a per-sample basis eats up
            machine cycles. If your CPU is slow, or if processing time is at a premium, withhold
            calibration until after the acquisition run is complete. Turning off real-time software
            calibration saves CPU time during a high-speed acquisition run.
            </description>
            			</item>
            			<item>
            				<description>
            Processor speed is a factor for DMA transfers and for real-time software calibration.
            Processors of less than 150 megahertz (MHz) Pentium class may impose speed limits
            below the capability of the Measurement Computing device (refer to your Measurement Computing device manual or the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>). If your
            processor is less than a 150 MHz Pentium, and you need an acquisition speed in excess
            of 200 kilohertz (kHz), use the <format type="italics">NoCalibrateData</format> option to a turn off real-time software
            calibration and save CPU time. After the acquisition is run, calibrate the data with
            <format type="bold">ACalibrateData</format>.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/4/2010 1:49:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ACalibrateData(System.Int32,MccDaq.Range,System.Int16[])">
            <summary>
            Calibrates the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from devices with real-time software
            calibration when the real-time calibration has been turned off. The <format type="bold">AInScan</format> method
            returns either raw A/D data or calibrated data, depending on whether or not the
            <format type="italics"><see cref="F:MccDaq.ScanOptions.NoCalibrateData"/></format> option was used.
            </summary>
            <param name="numPoints">
            The  number of samples to calibrate.
            </param>
            <param name="range">
            The  programmable gain/range used when the data was collected.
            </param>
            <param name="adData">
            Upon return, contains the calibrated data.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/4/2010 3:21:57 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)">
            <summary>
            Converts the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method into 12-bit A/D values. The <format type="bold">AInScan</format>
            method returns either raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> option is used. For many 12-bit A/D boards, the raw data is
            a 16-bit value that contains a 12-bit A/D value and a 4-bit channel tag (refer to your Measurement Computing device manual or the UL Help. The converted data consists of just the 12-bit A/D value.
            </summary>
            <param name="numPoints">
            The  number of samples to convert.
            </param>
            <param name="adData">
            The  pointer to the start of the data array.
            </param>
            <param name="chanTags">
            Upon return, contains the pointer to the start of the channel tag array (if available).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            When collecting data using <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method without the <format type="italics">ConvertData</format> option, use this method
            to convert the data after it has been collected. There are cases where the <format type="italics">ConvertData</format>
            option is not allowed. For example, if you are using both the <format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format> and <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>
            options with <format type="bold">AInScan</format>. In those cases, this method should be used to convert the
            data after the data collection is complete.
            <para>For some boards, each raw data point consists of a 12-bit A/D value with a 4-bit
            channel number. This method pulls each data point apart and puts the A/D value into
            the adData array and the channel number into the <paramref name="chanTags"/> array.</para>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/7/2010 10:23:48 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16[],System.Int16[])">
            <summary>
            Converts the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method into 12-bit A/D values. The <format type="bold">AInScan</format>
            method returns either raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> option is used. For many 12-bit A/D boards, the raw data is
            a 16-bit value that contains a 12-bit A/D value and a 4-bit channel tag (refer to your Measurement Computing device manual or the UL Help. The converted data consists of just the 12-bit A/D value.
            </summary>
            <param name="numPoints">
            The  number of samples to convert.
            </param>
            <param name="adData">
            The  pointer to the start of the data array.
            </param>
            <param name="chanTags">
            Upon return, contains the pointer to the start of the channel tag array (if available).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/7/2010 10:24:35 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16@,System.Int16@)">
            <summary>
            Converts the raw data collected by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. 
            </summary>
            <param name="preTrigCount">
            The  number of pre-trigger samples to convert. This number must match the number returned by the <paramref name="preTrigCount"/>
            parameter in the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="totalCount">
            The  total number of samples to convert.
            </param>
            <param name="adData">The  pointer to the data array. Array name must match the name of the array used with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="chanTags">Upon return, contains the pointer to the start of the channel tag array (if available). 
            Returns NULL if using a 16-bit board or if channel tags are not available.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet"><item><description>The <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method returns either
            raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format>option
            was used. The raw data is not in the correct order as it is collected. After the
            data collection is completed, it must be rearranged into the correct order. This
            method also orders the data, starting with the first pretrigger data point and ending
            with the last post-trigger point.</description></item>
            			<item>
            				<description>
            On some 12-bit A/D boards, each raw data point consists of a 12-bit A/D value with a
            4-bit channel number. This method pulls each data point apart and puts the A/D value
            into the <paramref name="adData"/> and the channel number into the <paramref name="chanTags"/> array.
            <para>Upon returning from <format type="bold">AConvertPretrigData</format>, the <paramref name="adData"/> array contains only 12-bit A/D
            data.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            Use this method with 16-bit A/D boards only to order the data. No channel tags are returned.
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">VB .Net programmers:</format> After the data is collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, it must be copied to a BASIC array with
            the <see cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/> method. 
            <para>The entire array must be copied, which includes the extra 512 samples
            needed by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <seealso cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/>
            <lastupdated>5/7/2010 10:29:41 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16[],System.Int16[])">
            <summary>
            Converts the raw data collected by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. 
            </summary>
            <param name="preTrigCount">
            The  number of pre-trigger samples to convert. This number must match the number returned by the <paramref name="preTrigCount"/>
            parameter in the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="totalCount">
            The  total number of samples to convert.
            </param>
            <param name="adData">The  pointer to the data array. Array name must match the name of the array used with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="chanTags">Upon return, contains the pointer to the start of the channel tag array (if available). 
            Returns NULL if using a 16-bit board or if channel tags are not available.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <seealso cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/>
            <lastupdated>5/7/2010 10:32:36 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AIn(System.Int32,MccDaq.Range,System.Int16@)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a 16-bit integer value. 
            </summary>
            <param name="channel">
            The  number of the A/D channel to read. 
            </param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="dataValue">Upon return, contains the A/D value read from the channel on the Measurement Computing device.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The maximum allowable <paramref name="channel"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured.<para>Expansion boards
            are also supported by this method, so this parameter can be set to up to 272.
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on specific Measurement Computing expansion devices.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            If the selected A/D device does not have a programmable gain feature,
            the <paramref name="range"/> parameter is ignored. <para>If the A/D device does have programmable gain, set the
            <paramref name="range"/> parameter to the desired A/D range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported A/D ranges of each Measurement Computing A/D device.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:41:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AIn32(System.Int32,MccDaq.Range,System.Int32@,System.Int32)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a 32-bit integer value.
            </summary>
            <param name="channel">
            The number of the A/D channel to read.
            </param>
            <param name="range">
            A <see cref="T:MccDaq.Range" crefType="Unqualified"/> that sets the gain on the A/D board.
            </param>
            <param name="dataValue">
            Upon return, contains the A/D value read from the channel.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="T:MccDaq.Range" crefType="Unqualified"/>
            <lastupdated>5/7/2010 10:34:11 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Scans a range of A/D channels on a Measurement Computing A/D device and stores the samples in an array. 
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The  number of the last A/D channel to scan. 
            </param>
            <param name="numPoints">The  number of A/D samples to collect.</param>
            <param name="rate"><para>The  sample rate—in scans per second per channel—
             at which the scans are triggered.</para>
            	<para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to store data. This buffer must have been
            previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)"/>  method.</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The number of points scanned per channel =  <paramref name="numPoints"/>/(<paramref name="highChan"/> – <paramref name="lowChan"/> + 1)
            </description>
            			</item>
            			<item>
            				<description>
            The maximum allowable <paramref name="highChan"/>/<paramref name="lowChan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. 
            			</description>
            			</item>
            			<item>
            				<description><para>Transfer method options: The following four options determine how data is transferred from the board to 
            PC memory. If none of these options is specified (recommended), the optimum sampling mode will automatically be chosen based on board type and sampling speed.
            </para><para><format type="italics"><see cref="F:MccDaq.ScanOptions.SingleIo"/></format> - A/D transfers to memory are initiated by an interrupt. One interrupt per 
            conversion. 
            </para><para><format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format> - A/D transfers are initiated by a DMA request. 
            </para><para><format type="italics"><see cref="F:MccDaq.ScanOptions.BlockIo"/></format> - A/D transfers are handled in blocks (by REP-INSW for example).  <note type="caution">
            							<format type="italics">BlockIo</format> is not recommended for slow acquisition rates: If the rate of acquisition is very slow (say less than 200 Hz) <format type="italics">BlockIo</format> is probably not 
            the best choice for transfer mode. The reason for this is that status for the operation is not available until one packet of data has been collected (typically 512 samples). The implication is that if acquiring 100 samples at 100 Hz using <format type="italics">BlockIo</format>, the operation will not complete until 5.12 
            seconds has elapsed. 
            </note></para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.BurstIo"/></format> - Allows higher sampling rates for sample counts up to full FIFO. Data is 
            collected into the local FIFO. Data transfers to the PC are held off until 
            after the scan is complete. For <format type="italics">Background</format> scans, the count and index 
            returned by <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method remain 0 and the status equals <format type="italics">Running</format> until the 
            scan finishes. When the scan is complete and the data is retrieved, the 
            count and index are updated and the status equals <format type="italics">Idle</format> . <format type="italics">BurstIo</format> is the 
            default mode for non-<format type="italics">Continuous</format> fast scans (aggregate sample rates above 
            1000 Hz) with sample counts up to full-FIFO. To avoid the <format type="italics">BurstIo</format> 
            default, specify <format type="italics">BlockIo</format>. <format type="italics">BurstIo</format>  is not a valid option for most boards. It 
            is used mainly for USB products. 
            </para>
            				</description>
            			</item>
            			<item>
            				<description>Other <paramref name="options"/> settings
            <para><format type="italics"><see cref="F:MccDaq.ScanOptions.BurstMode"/></format> - Enables burst mode sampling. Scans from <paramref name="lowChan"/> to <paramref name="highChan"/> are clocked at the 
            maximum A/D rate between samples in order to minimize channel to channel 
            skew. Scans are initiated at the rate specified by rate. 
            <format type="italics">BurstMode</format> is not recommended for use with the <format type="italics">SingleIo</format> option. If this 
            combination is used, the count value should be set as low as possible, preferably to 
            the number of channels in the scan. Otherwise, overruns may occur. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> - If the <format type="italics">ConvertData</format> option is used for 12-bit devices, then the data that is returned to 
            the buffer is automatically converted to 12-bit A/D values. If <format type="italics">ConvertData</format>is 
            not used, then the data from 12-bit A/D devices is returned unmodified (16-bit 
            values that contain both a 12-bit A/D value and a 4-bit channel number). After the 
            data collection is complete, you can call <see cref="M:MccDaq.MccBoard.AConvertData(System.Int32,System.Int16@,System.Int16@)"/> method to convert the data 
            after the fact. <format type="italics">ConvertData</format> may not be specified if you are using the <format type="italics">Background</format>
            option and DMA transfers. This option is ignored for the 16-bit boards. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - If the <format type="italics">Background</format> option is not used, the <format type="bold">AInScan</format> method does not return to 
            your program until all of the requested data has been collected and returned to the 
            buffer. When the <format type="italics">Background</format> option is used, control returns immediately to 
            the next line in your program and the data collection from the A/D into the buffer 
            continues in the background. Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method to check on the status of the 
            background operation. Alternatively, some boards support <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method for 
            event notification of changes in status of <format type="italics">Background</format> scans. Use 
            <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method to stop the background process before it has completed. 
            <format type="bold">StopBackground</format> should be executed after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option puts the method in an endless loop. Once it collects the required 
            number of samples, it resets to the start of the buffer and begins again. The only 
            way to stop this operation is with <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. Normally this option 
            should be used in combination with <format type="italics">Background</format> so that your program regains 
            control. 
              <note type="note">
            For some Measurement Computing devices, <paramref name="numPoints"/> must be an integer multiple of the packet size. Packet size is 
            the amount of data that a Measurement Computing device transmits back to the PC's memory buffer 
            during each data transfer. Packet size can differ among Measurement Computing devices, and can 
            even differ on the same Measurement Computing product depending on the transfer method. 
            <para>In some cases, the minimum value for the <paramref name="numPoints"/> parameter may change when 
            the <format type="italics">Continuous</format> option is used. This can occur for several reasons, the most 
            common being that in order to trigger an interrupt on boards with FIFOs, the circular 
            buffer must occupy at least half the FIFO. Typical half-FIFO sizes are 256, 512 
            and 1024.</para>
            							<para>Another reason for a minimum <paramref name="numPoints"/> value is that the buffer in memory must 
            be periodically transferred to the user buffer. If the buffer is too small, data will be 
            overwritten during the transfer resulting in corrupted data.</para>
            							<para> Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on the packet 
            size for your particular Measurement Computing device. </para></note>
            						<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, then conversions are controlled by the signal on the 
            external clock input rather than by the internal pacer clock. Each conversion is
            triggered on the appropriate edge of the clock input signal (see the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing device). When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate is 
            dependent on the clock signal. Options for the device default to a transfer 
            mode that allows the maximum conversion rate to be attained unless otherwise 
            specified. </para>
            						<note type="note">If the rate of the external 
            clock is very slow (say less than 200 Hz) and the device you are using supports 
            <format type="italics">BlockIo</format>, you may want to include the <format type="italics">SingleIo</format> option. This is because that the 
            status for the operation is not available until one packet of data has been collected 
            (typically 512 samples). The implication is that, if acquiring 100 samples at 100 Hz 
            using BlockIo (the default for boards that support it if <format type="italics">ExtClock</format> is used), the 
            operation will not complete until 5.12 seconds has elapsed 
            </note>
            					</para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> - Causes the command to send the data to a connected memory device via the DT-
            Connect interface rather than returning the data to the buffer. Data for each call to 
            this method is appended unless <see cref="M:MccDaq.MccBoard.MemReset"/> method is called. The data should be 
            unloaded with the <see cref="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)"/> method before collecting new data. When 
            the <format type="italics">ExtMemory</format> option is used, the reference to the buffer (<paramref name="memHandle"/>) may be set to 
            null or 0. Continuous option cannot be used with <format type="italics">ExtMemory</format>. Do not use 
            <format type="italics">ExtMemory</format> and <format type="italics">DtConnect</format> together. The transfer modes <format type="italics">DmaIo</format>, <format type="italics">SingleIo</format> and 
            <format type="italics">BlockIo</format> have no meaning when used with this option. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> - If this option is specified, the sampling does not begin until the trigger condition is 
            met. On many devices, this trigger condition is programmable (refer to 
            <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method and the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on specific Measurement Computing A/D devices.). On other devices, only 
            "polled gate"' triggering is supported. In this case, assuming active high operation, 
            data acquisition starts immediately if the trigger input is high. If the 
            trigger input is low, acquisition is held off unit until it goes high. Acquisition 
             continues until <paramref name="numPoints"/> samples have been taken regardless of the state 
            of the trigger input. This option is most useful if the signal is a pulse with a very 
            low duty cycle (trigger signal in TTL low state most of the time) so that triggering 
            is held off until the pulse occurs. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.NoTodInts"/></format> - If this option is specified, the system's time-of-day interrupts are disabled for the 
            duration of the scan. These interrupts are used to update the systems real-time 
            clock and are also used by various other programs. 
              These interrupts can limit the maximum sampling speed of some devices. If the interrupts are turned off using this option then 
            the real-time clock falls behind by the length of time that the scan takes. 
            </para><para><format type="italics"><see cref="F:MccDaq.ScanOptions.NoCalibrateData"/></format> - Turns off real-time software calibration for boards which are software calibrated, 
            by applying calibration factors to the data on a sample by sample basis as it is 
            acquired. Turning off software calibration saves CPU time during a high speed acquisition 
            run. This may be required if your processor is less than a 150 MHz Pentium and 
            you desire an acquisition speed in excess of 200 kHz. These numbers may not 
            apply to your system. Only trial will tell for sure. DO NOT use this option if you 
            do not have to. If this option is used, the data must be calibrated after the 
            acquisition run with the <see cref="M:MccDaq.MccBoard.ACalibrateData(System.Int32,MccDaq.Range,System.Int16@)"/> method. </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> - All A/D values will be sent to the A/D board's DT-Connect port. This option is 
            incorporated into the <format type="italics">ExtMemory</format> option. Use <format type="italics">DTConnect</format> only if the external device 
            is not supported by Universal Library. 
            </para>
            				</description>
            			</item>
            		</list>
            		<note type="caution"> An error occurs if you specify a total A/D rate beyond the capability of the Measurement Computing device. For example, if you specify <paramref name="lowChan"/> = 0, <paramref name="highChan"/> = 4 (five channels total) and <paramref name="rate"/> = 20,000, and you are using a Measurement Computing device that can convert a maximum of 50,000 samples per second per channel, you will get an error. You have specified a total rate of 5*20,000 = 100,000. <para>The maximum sampling rate depends on both the A/D device being used and on the sampling mode options.</para>
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on the sampling rates of your Measurement Computing A/D device.
            </note>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/7/2010 11:17:54 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Scans a range of A/D channels on a Measurement Computing A/D device and stores the samples in an array. 
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The  number of the last A/D channel to scan. 
            </param>
            <param name="numPoints">The  number of A/D samples to collect.</param>
            <param name="rate"><para>The  sample rate-in scans per second per channel-
             at which the scans are triggered.</para>
            	<para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to store data. This buffer must have been
            previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.ScaledWinBufAllocEx(System.Int32)"/> method.</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/7/2010 11:19:41 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ALoadQueue(System.Int16[],MccDaq.Range[],System.Int32)">
            <summary>
            Loads the Measurement Computing A/D device's channel/gain queue. This method only works with A/D devices
            that have channel/gain queue hardware.
            </summary>
            <param name="chanArray">Array containing the channel values to load into the channel gain queue.
            </param>
            <param name="gainArray">Array containing A/D range values to load into the channel gain queue.
            </param>
            <param name="count">Set the number of elements in <paramref name="chanArray"/> and <paramref name="gainArray"/> to load into the channel/gain queue. A setting of 0 disables the channel/gain queue. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Some products do not support channel/gain queue, and some that do support it are
            limited on the order of elements, number of elements, gain values that can be
            included, and so on. Refer to the device-specific information in the the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for details on your Measurement Computing product.
            </description>
            			</item>
            			<item>
            				<description><paramref name="chanArray"/> and <paramref name="gainArray"/> should contain at least <paramref name="count"/> elements. The number of elements depends on the queue size
            of the A/D device's channel gain queue.
            </description>
            			</item>
            			<item>
            				<description>Normally, the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method scans a fixed range of channels (from <paramref name="lowChan"/> to <paramref name="highChan"/>)
            at a fixed A/D range. If you load the channel gain queue with this method, then all
            subsequent calls to <format type="bold">AInScan</format> cycle through the channel/range pairs that you have
            loaded into the queue.
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:40:04 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AOut(System.Int32,MccDaq.Range,System.Int16)">
            <summary>
            Sets the  value of a D/A output.
            </summary>
            <param name="channel">
            D/A channel number. The maximum allowable channel depends on the type of D/A device being used.
            </param>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the D/A range code. The output range of the D/A channel can be set to any of those supported
            by the Measurement Computing device. If the D/A device does not have programmable ranges, then this parameter
            is ignored.
            </param>
            <param name="dataValue">
            Value to set D/A to. Must be in the range 0 - <format type="italics">N</format> where <format type="italics">N</format> is the value 2<format type="superscript">Resolution</format>
            – 1 of the converter. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            Simultaneous update devices: If you set the simultaneous update jumper for simultaneous
            operation, use <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method for simultaneous update of multiple channels. <format type="bold">AOut</format> always
            writes the D/A data, then reads the D/A, which causes the D/A output to be updated.
            </remarks>
            </comment>
            <lastupdated>5/7/2010 10:34:45 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Outputs values to a range of D/A channels. This method can be used for paced analog
            output on Measurement Computing devices that support paced output. It can also be used to update all
            analog outputs at the same time when the <format type="italics"><see cref="F:MccDaq.ScanOptions.Simultaneous"/></format> option is used.
            </summary>
            <param name="lowChan">
            The  number of the first D/A channel to scan. 
            </param>
            <param name="highChan">
            The number of the last D/A channel to scan. 
            </param>
            <param name="numPoints">The  number of D/A samples to output</param>
            <param name="rate">The sample rate in scans per second.
            <para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to to output data. This buffer must first be
            allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and contain the data to be output (perhaps with the <see cref="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)"/> method).</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set  various scanning modes. </param>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The number of points scanned per channel =  <paramref name="numPoints"/>/(<paramref name="highChan"/> – <paramref name="lowChan"/> + 1)
            </description>
            			</item><item>
            				<description><paramref name="scanOptions"/> parameter settings
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option may only be used with Measurement Computing devices that support interrupt, DMA or REP-INSW
            transfer methods. This option puts the method in an endless loop. Once it outputs
            the specified number (<paramref name="numPoints"/>) of D/A values, it resets to the start of the buffer
            and begins again. The only way to stop this operation is with the <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. This
            option should only be used in combination with <format type="italics">Background</format> so that your program can
            regain control.
            </para>
            					<para><format type="italics">Background</format> - This option may only be used with Measurement Computing devices that support interrupt, DMA or REP-INSW
            transfer methods. When this option is used, the D/A operations begin running
            in the background, and control immediately returns to the next line of your program.
            Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method to check the status of a background operation. Alternatively, some
            Measurement Computing devices support <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method for event notification of changes in status of <format type="italics">Background</format>
            scans. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method to terminate background operations before they are completed.
            <format type="bold">StopBackground</format> should be executed after normal termination of all background methods
            in order to clear variables and flags. </para>
            					<para><format type="italics">Simultaneous</format> - When this option is used (if the Measurement Computing device supports it and the appropriate switches are
            set on the device), all of the D/A voltages are updated simultaneously when the
            last D/A in the scan is updated. This generally means that all the D/A values are written to the Measurement Computing device, then a read of a D/A address causes all D/As to be updated
            with new values simultaneously. </para>
            					<para>
            						<format type="italics">ExtClock</format> - When this option is used, then conversions are paced by the signal on the clock input line rather than by the internal pacer clock. Each conversion is triggered on the appropriate edge of the clock input signal (see the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing device). When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate depends on the clock signal. Options for the device default to transfer types that allow the maximum conversion rate to be attained unless otherwise specified.
             </para>
            					<para><format type="italics">ExtTrigger</format> - If this option is specified, the sampling does not begin until the trigger condition
            is met. On many Measurement Computing devices, this trigger condition is programmable (see <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method
            method and board-specific information for details).
            </para>
            				</description>
            			</item>
            		</list>
            		<note type="caution"> An error occurs if you specify a total D/A rate beyond the capability of the Measurement Computing device. For example, if you specify <paramref name="lowChan"/> = 0, <paramref name="highChan"/> = 3 (four channels total), and <paramref name="rate"/> = 100,000, and you are using a Measurement Computing device that can output a maximum of 330,000 samples per second, you get an error. You have specified a total rate of 4*100,000 = 400,000. <para>The maximum output rate depends on both the D/A device being used and on the scan options.</para>
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on the output rates of specific Measurement Computing D/A devices.
            </note>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:39:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Outputs values to a range of D/A channels. This method can be used for paced analog
            output on Measurement Computing devices that support paced output. It can also be used to update all
            analog outputs at the same time when the <format type="italics"><see cref="F:MccDaq.ScanOptions.Simultaneous"/></format> option is used.
            </summary>
            <param name="lowChan">
            The  number of the first D/A channel to scan. 
            </param>
            <param name="highChan">
            The number of the last D/A channel to scan. 
            </param>
            <param name="numPoints">The  number of D/A samples to output</param>
            <param name="rate">The sample rate in scans per second.
            <para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to to output data. This buffer must first be
            allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and contain the data to be output (perhaps with the <see cref="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)"/> method).</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set  various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <lastupdated>5/4/2010 3:30:38 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Waits for a trigger to occur and then returns a specified number of analog samples
            before and after the trigger occurred.
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The  number of the last A/D channel to scan. 
            </param>
            <param name="pretrigCount">The  number of samples to
            collect before the trigger occurs. Must be less than the (<paramref name="totalCount"/> – 512).
            <para>Upon return, contains the actual number of pre-trigger samples collected.</para></param>
            <param name="totalCount">Total number of A/D samples to collect. Must be greater than or equal to the
            <paramref name="pretrigCount"/> + 512.
            <para>Upon return, contains the actual number of samples collected.</para></param>
            <param name="rate">Sample rate in scans per second per channel.	
            <para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to to store data. This buffer must have been
            previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method.</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set  various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><note type="caution">The buffer referenced by the <paramref name="memHandle"/> data array must be big enough to hold at least
            <paramref name="totalCount"/>+512 integers. 
            </note>
            		<list type="bullet">
            			<item>
            				<description>The maximum allowable <paramref name="highChan"/>/<paramref name="lowChan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. 
            </description>
            			</item>
            			<item>
            				<description>If the trigger occurs too early, fewer than the requested number of pre-trigger 
            samples are collected, and a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> error occurs. The <paramref name="pretrigCount"/> is set to indicate how many samples were actually collected. The post-trigger samples 
            are still collected, and <paramref name="totalCount"/> is set to indicate 
            how many samples were actually collected.  
            </description>
            			</item>
            			<item>
            				<description>If only "polled gate" triggering is supported,
            the external trigger input must be at TTL low before this method is called, or a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TrigState"/></format> error occurs. The trigger occurs
            when the trigger condition is met. Refer to the <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method, your Measurement Computing device user's guide,  and the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for more details.
            </description>
            			</item>
            			<item>
            				<description><paramref name="scanOptions"/> settings
            				<para><format type="italics">ConvertData</format> - Data is collected into a "circular" buffer. When the data collection is complete,
            the data is in the wrong order. Use the <format type="italics">ConvertData</format> option to automatically reorganize
            data in the correct order—and convert to 12-bit values if required—when the data
            acquisition is complete. Otherwise, call <see cref="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16@,System.Int16@)"/> to reorganize the
            data. You cannot use the <format type="italics">ConvertData</format> option in combination with the <format type="italics">Background</format> option.
            </para>
            					<para><format type="italics">Background</format> - If the <format type="italics">Background</format> option is not used, the <format type="bold">APretrig</format> method does not return to your
            program until all of the requested data has been collected and returned to the buffer.
            When the <format type="italics">Background</format> option is used, control returns immediately to the next line
            in your program, and the data collection from the A/D into the buffer continues in
            the background. Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method to check on the status of the background operation.
            Alternatively, some Measurement Computing devices support <see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method for event notification of changes
            in status of <format type="italics">Background</format> scans. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method to terminate the background process
            before it has completed. </para>
            					<para>Call <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method after normal termination of all background methods to clear
            variables and flags. You cannot use the <format type="italics">ConvertData</format> option in combination with the
            <format type="italics">Background</format> option for this function. To correctly order and parse the data, use <see cref="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.Int16@,System.Int16@)"/> method
            after the method completes.	</para>
            					<para><format type="italics">ExtClock</format> - This option is available only for Measurement Computing devices that have separate inputs for external pacer
            and external trigger. </para><para> Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing product. </para>
            					<para><format type="italics">ExtMemory</format> - If you use this option to send the data to a MEGA-FIFO memory board, then you must
            use <see cref="M:MccDaq.MccBoard.MemReadPretrig(System.Int16@,System.Int32,System.Int32)"/> method to later read the pre-trigger data from the memory board. If
            you use <see cref="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)"/> method, the data is <format type="italics">not,</format> in the correct order. 
            </para>
            					<para>Every time this option is used, it overwrites any data already stored in the memory
            board. All data should be read from the board (with <format type="bold">MemReadPretrig</format>) before collecting
            any new data. When this option is used, the <paramref name="memHandle"/> parameter is ignored. The MEGA-FIFO
            memory must be fully populated in order to use the <format type="bold">APretrig</format> method with the <format type="italics">ExtMemory</format> 
            option.</para>
            					<para><format type="italics">DTConnect</format> - When the <format type="italics">DtConnect</format> option is used with this method the data from ALL A/D conversions
            is sent out the DT-CONNECT interface. While this method is waiting for a trigger
            to occur, it will send data out the DT-CONNECT interface continuously. If you have
            a Measurement Computing memory device plugged into the DT-CONNECT interface then you
            should use the <format type="italics">ExtMemory</format> option rather than this option.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:38:51 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Waits for a trigger to occur and then returns a specified number of analog samples
            before and after the trigger occurred.
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The  number of the last A/D channel to scan. 
            </param>
            <param name="pretrigCount">The  number of samples to
            collect before the trigger occurs. Must be less than the (<paramref name="totalCount"/> - 512).
            <para>Upon return, contains the actual number of pre-trigger samples collected.</para></param>
            <param name="totalCount">Total number of A/D samples to collect. Must be greater than or equal to the
            <paramref name="pretrigCount"/> + 512.
            <para>Upon return, contains the actual number of samples collected.</para></param>
            <param name="rate">Sample rate in scans per second per channel.	
            <para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="memHandle">Handle for the Windows buffer used to to store data. This buffer must have been
            previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method.</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set  various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 3:31:48 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ATrig(System.Int32,MccDaq.TriggerType,System.Int16,MccDaq.Range,System.Int16@)">
            <summary>
            Waits for a specified analog input channel to go above or below a specified value.
            </summary>
            <param name="chan">Set the A/D channel number. 
            </param>
            <param name="trigType">
            	A <see cref="T:MccDaq.TriggerType"/> that sets whether to
            wait for the analog input to be above or below <paramref name="trigValue"/>.
            </param>
            <param name="trigValue">The  threshold value that all A/D values are compared to. Must be in the range 0 -
            4095 for 12-bit A/D boards, or 0-65,535 for 16-bit A/D boards.
            </param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. 
            </param>
            <param name="dataValue">Upon return, contains the value of the first A/D sample to meet the trigger criteria.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<note type="caution">
            When using this method in Windows programs, all active windows, along with keyboard and mouse activity, are locked
            until the trigger condition is satisfied. <para>Pressing <format type="bold">Ctrl-C</format>does not terminate the waiting time for an analog trigger to meet the specified
            condition. There are only two ways to terminate this call: satisfy the trigger condition, or restart the computer.</para>
            		</note><list type="bullet">
            			<item><description><format type="bold">ATrig</format> continuously reads the specified channel and compares its value to the <paramref name="trigValue"/> parameter.
            Depending on whether <paramref name="trigType"/> is set to <format type="italics">TrigAbove</format> or <format type="italics">TrigBelow</format>, it waits for the
            first A/D sample that is above or below <paramref name="trigValue"/>. The first sample that meets the
            trigger criteria is returned to <paramref name="dataValue"/>.
            </description></item><item>
            				<description>
            The maximum allowable <paramref name="chan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. Refer to your Measurement Computing device user's guide and the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your Measurement Computing product.
            			</description>
            			</item>
            			<item>
            				<description>
            If the selected A/D device does not have a programmable gain feature,
            the <paramref name="range"/> parameter is ignored. <para>If the A/D device does have programmable gain, set the
            <paramref name="range"/> parameter to the desired A/D range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported A/D ranges of each Measurement Computing A/D device.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:35:41 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)">
            <summary>
            Configures a 7266 counter for desired operation. This method can only be used with
            Measurement Computing devices that contain a 7266 counter chip (quadrature encoder devices). 
            </summary>
            <param name="counterNum">The  number (1 to <format type="italics">n</format>) of the counter to configure, where <format type="italics">n</format> is the number of counters on the Measurement Computing counter device.
            </param>
            <param name="quadrature"><see cref="T:MccDaq.Quadrature"/> that sets the resolution multiplier for quadrature input, or disables quadrature input.
            </param>
            <param name="countingMode"><see cref="T:MccDaq.CountingMode"/> that sets operating mode for the counter.
            </param>
            <param name="dataEncoding"><see cref="T:MccDaq.DataEncoding"/> that sets the format used for data returned by a 7266 counter.
            </param>
            <param name="indexMode"><see cref="T:MccDaq.IndexMode"/> that sets the action to take when the index signal is received. 
            </param>
            <param name="invertIndex"><see cref="T:MccDaq.OptionState"/> that sets whether the index is an active low input (<format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format>) or active high input (<format type="italics"><see cref="F:MccDaq.OptionState.Disabled"/></format>). 
            </param>
            <param name="flagPins"><see cref="T:MccDaq.FlagPins"/> that selects the signals to route to the FLG1 and FLG2 pins.
            </param>
            <param name="gateState"><see cref="T:MccDaq.OptionState"/> that sets whether counting is gated (<see cref="F:MccDaq.OptionState.Enabled"/>) or not gated (<see cref="F:MccDaq.OptionState.Disabled"/>). 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The <format type="bold">C7266Config</format> method can only be used with Measurement Computing devices that contain a 7266 counter chip (quadrature
            encoder devices). For more information, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/LS7266R1.pdf">LS7266R1
            </see></format> data sheet.
            			</description></item><item>
            				<description><see cref="T:MccDaq.CountingMode"/> options
            <para><format type="italics"><see cref="F:MccDaq.CountingMode.NormalMode"/></format> - Each counter operates as a 24-bit counter that rolls over to 0 when the maximum count
            is reached.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.CountingMode.RangeLimit"/></format> - An upper and lower limit is set, mimicking limit switches
            in the mechanical counterpart. The upper limit is set by loading the PRESET register
            with the <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method after the counter has been configured. The lower limit is always
            0. When counting up, the counter freezes whenever the count reaches the value that
            was loaded into the PRESET register. When counting down, the counter freezes at 0.
            In either case the counting is resumed only when the count direction is reversed.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.CountingMode.NoRecycle"/></format> - The counter is disabled whenever a count overflow or underflow
            takes place. The counter is re-enabled when a reset or load operation is performed
            on the counter.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CountingMode.ModuloN"/></format> - An upper limit is set by loading the PRESET register with a maximum
            count. When counting up, if the maximum count is reached, the counter rolls-over to 0 and continues counting up. When counting down, if the
            count reaches 0, it rolls-over to the maximum count (in the PRESET register)
            and continues counting down.</para>
            				</description>
            			</item>
            			<item>
            				<description><see cref="T:MccDaq.IndexMode"/> options
            <para><format type="italics"><see cref="F:MccDaq.IndexMode.IndexDisabled"/></format> - The index signal is ignored.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.IndexMode.LoadCtr"/></format> - The counter is loaded whenever the index signal on the LCNTR pin occurs.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.IndexMode.LoadOutLatch"/></format> - The current count is latched whenever the index signal on the LCNTR pin occurs. When
            this mode is selected, the <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> method returns the same count each time it is
            called until the index signal occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.IndexMode.ResetCtr"/></format> - The counter is reset to 0 whenever the index signal on the RCNTR pin occurs.</para>
            				</description>
            			</item>
            			<item>
            				<description><see cref="T:MccDaq.FlagPins"/> options
            <para><format type="italics"><see cref="F:MccDaq.FlagPins.CarryBorrow"/></format> - FLG1 pin is <format type="italics">carry</format> output, FLG2 is <format type="italics">borrow</format> output.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FlagPins.CompareBorrow"/></format> - FLG1 pin is <format type="italics">compare</format> output, FLG2 is <format type="italics">borrow</format> output.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FlagPins.CarryBorrowUpDown"/></format> - FLG1 pin is <format type="italics">carry/borrow</format> output, FLG2 is <format type="italics">up/down</format> signal.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FlagPins.IndexError"/></format> - FLG1 is <format type="italics">index</format> output, FLG2 is <format type="italics">error</format> output.</para>
            				</description>
            			</item></list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:35:06 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C8254Config(System.Int32,MccDaq.C8254Mode)">
            <summary>
            Configures an 82C54 counter for desired operation. 
            </summary>
            <param name="counterNum">The  number (1 to <format type="italics">n</format>) of the counter to configure, where <format type="italics">n</format> is the number of counters on the Measurement Computing counter device.
            </param>
            <param name="config"><see cref="T:MccDaq.C8254Mode"/> that sets the operation mode of an 82C54 counter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The <format type="bold">C8254Config</format> method can only be used with Measurement Computing devices that contain an 82C54 counter chip. For more information, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/82C54.pdf">82C54
            </see></format> data sheet.
            			</description></item><item>
            				<description><see cref="T:MccDaq.C8254Mode"/> options
            <para><format type="italics"><see cref="F:MccDaq.C8254Mode.HighOnLastCount"/></format> - Output of counter (OUT N) transitions from low to high on terminal count and remains high until reset. See Mode 0 on 8254 data sheet.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8254Mode.OneShot"/></format> - Output of counter (OUT N) transitions from high to low on rising edge of GATE N, then back to high on terminal count. See mode 1 on 8254 data sheet.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8254Mode.RateGenerator"/></format> - Output of counter (OUT N) pulses low for one clock cycle on terminal count, reloads counter and recycles. See mode 2 on 8254 data sheet.</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8254Mode.SquareWave"/></format> - Output of counter (OUT N) is high for count less than 1/2 terminal count, and then low until terminal count, whereupon it recycles. This mode generates a square wave. See mode 3 on 8254 data sheet.</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8254Mode.SoftwareStrobe"/></format> - Output of counter (OUT N) pulses low for one clock cycle on terminal count. Count starts after counter is loaded. See mode 4 on 8254 data sheet.</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8254Mode.HardwareStrobe"/></format> - Output of counter (OUT N) pulses low for one clock cycle on terminal count. Count starts on rising edge at GATE N input. See mode 5 on 8254 data sheet.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:34:54 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C8536Config(System.Int32,MccDaq.C8536OutputControl,MccDaq.RecycleMode,MccDaq.OptionState)">
            <summary>
            Configures an 8356 counter for desired operation. 
            </summary>
            <param name="counterNum">The  number (1 to 6) of the counter to configure on the Measurement Computing counter device.
            </param>
            <param name="outputControl"><see cref="T:MccDaq.C8536OutputControl"/> that sets the action of the output signal.
            </param>
            <param name="recycleMode"><see cref="T:MccDaq.RecycleMode"/> that sets whether or not the counter automatically reloads to the starting count every time it reaches 0, and then continues counting.
            </param>
            <param name="retrigger"><see cref="T:MccDaq.OptionState"/>  that sets different trigger modes on the counter.</param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">C8536Config</format> can only be used with Measurement Computing devices that contain an 8536 counter chip. For more information, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/Z8536.pdf">Zilog 8536 product specification
            </see></format> data sheet.
            			</description></item><item>
            				<description><see cref="T:MccDaq.C8536OutputControl"/> options
            <para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.HighPulseOnTc"/></format> - Output transitions from low-to-high for one clock pulse on terminal count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.ToggleOnTc"/></format> - Output changes state on terminal count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.HighUntilTc"/></format> - Output transitions to high at the start of counting, and then goes low on terminal count.</para>
            				</description></item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.RecycleMode"/> options
            <para><format type="italics"><see cref="F:MccDaq.RecycleMode.OneTime"/></format> - Counter stops counting when it reaches 0 .	</para>
            					<para><format type="italics"><see cref="F:MccDaq.RecycleMode.Recycle"/></format> - Counter automatically reloads to the starting count every time it reaches 0, and then continues counting.	</para>
            				</description>
            			</item>
            			<item><description><paramref name="retrigger"/> options (<see cref="T:MccDaq.OptionState"/>)
            <para><format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format> - Every trigger on the counter's trigger input initiates loading of the original
            count, and counting proceeds from original count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.OptionState.Disabled"/></format> - Every trigger on the counter's trigger input does not load the original
            count.	</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:34:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C8536Config(System.Int32,MccDaq.C8536OutputControl,MccDaq.RecycleMode,MccDaq.C8536TriggerType)">
            <summary>
            Configures an 8356 counter for desired operation. 
            </summary>
            <param name="counterNum">The  number (1 to 6) of the counter to configure on the Measurement Computing counter device.
            </param>
            <param name="outputControl"><see cref="T:MccDaq.C8536OutputControl"/> that sets the action of the output signal.
            </param>
            <param name="recycleMode"><see cref="T:MccDaq.RecycleMode"/> that sets whether or not the counter automatically reloads to the starting count every time it reaches 0, and then continues counting.
            </param>
            <param name="trigType"><see cref="T:MccDaq.C8536TriggerType"/> that sets the trigger type used to trigger the counter.</param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">C8536Config</format> can only be used with Measurement Computing devices that contain an 8536 counter chip. For more information, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/Z8536.pdf">Zilog 8536 product specification
            </see></format> data sheet.
            			</description></item><item>
            				<description><see cref="T:MccDaq.C8536OutputControl"/> options
            <para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.HighPulseOnTc"/></format> - Output transitions from low-to-high for one clock pulse on terminal count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.ToggleOnTc"/></format> - Output changes state on terminal count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536OutputControl.HighUntilTc"/></format> - Output transitions to high at the start of counting, and then goes low on terminal count.</para>
            				</description></item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.RecycleMode"/> options
            <para><format type="italics"><see cref="F:MccDaq.RecycleMode.OneTime"/></format> - Counter stops counting when it reaches 0 .	</para>
            					<para><format type="italics"><see cref="F:MccDaq.RecycleMode.Recycle"/></format> - Counter automatically reloads to the starting count every time it reaches 0, and then continues counting.	</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.C8536TriggerType"/> options
            <para><format type="italics"><see cref="F:MccDaq.C8536TriggerType.HWStartTrig"/></format> - The first trigger on the counter's trigger input initiates loading of the initial count. Counting then proceeds from the initial count.</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536TriggerType.HWRetrig"/></format> - Every trigger on the counter's trigger input initiates loading of the initial count. Counting then proceeds from the initial count.</para>
            					<para><format type="italics"><see cref="F:MccDaq.C8536TriggerType.SWStartTrig"/></format> - The <see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method initiates loading of the initial count. Counting then proceeds from the initial count.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:34:41 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C9513Config(System.Int32,MccDaq.GateControl,MccDaq.CountEdge,MccDaq.CounterSource,MccDaq.OptionState,MccDaq.Reload,MccDaq.RecycleMode,MccDaq.BCDMode,MccDaq.CountDirection,MccDaq.C9513OutputControl)">
            <summary>
            Sets all of the configurable options of a 9513 counter.
            </summary>
            <param name="counterNum">
            The  number (1 to <format type="italics">n</format>) of the 9513 counter to configure, where <format type="italics">n</format> is the number of counters on the Measurement Computing counter device
            </param>
            <param name="gateControl"><see cref="T:MccDaq.GateControl"/> that sets gating options.
            </param>
            <param name="counterEdge"><see cref="T:MccDaq.CountEdge"/> that sets the edge to count. Referred to as "Source Edge" in 9513 data book.
            </param>
            <param name="counterSource"><see cref="T:MccDaq.CounterSource"/> that sets the source of the count.
            </param>
            <param name="specialGate"><see cref="T:MccDaq.OptionState"/> that enables or disables special gating.
            </param>
            <param name="reload"><see cref="T:MccDaq.Reload"/> that sets how the counter reloads when in recycle mode.
            </param>
            <param name="recycleMode"><see cref="T:MccDaq.RecycleMode"/> that sets whether or not the counter automatically reloads to the starting count every time it reaches 0, and then continues counting.
            </param>
            <param name="bcdMode"><see cref="T:MccDaq.BCDMode"/> that sets whether the counter operates in binary mode or binary coded decimal (BCD) mode.
            </param>
            <param name="countDirection"><see cref="T:MccDaq.CountDirection"/> that sets whether the counter counts up or down.
            </param>
            <param name="outputControl"><see cref="T:MccDaq.C9513OutputControl"/> that sets the type of output on the counter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">C9513Config</format> can only be used with Measurement Computing devices that contain a 9513 counter chip. For more information on this chip, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/pdfmanuals/cts9513-2.pdf">AM9513A
            </see></format> data sheet.
            	
            			</description></item><item>
            				<description><see cref="T:MccDaq.GateControl"/> options
            				<para><format type="italics"><see cref="F:MccDaq.GateControl.NoGate"/></format> - No gating.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.AHLTcPrevCtr"/></format> - Active high TCN – 1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.AHLNextGate"/></format> - Active high level gate N+1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.AHLPrevGate"/></format> - Active high level gate N – 1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.AHLGate"/></format> - Active high level gate N.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.ALLGate"/></format> - Active low level gate.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.AHEGate"/></format> - Active high edge gate N.</para>
            					<para><format type="italics"><see cref="F:MccDaq.GateControl.ALEGate"/></format> - Active low edge gate N.</para>
            				</description></item><item>
            				<description><see cref="T:MccDaq.CountEdge"/> options
            				<para><format type="italics"><see cref="F:MccDaq.CountEdge.NegativeEdge"/></format> - Count on falling edge.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CountEdge.PositiveEdge"/></format> - Count on rising edge.</para>
            				</description></item>&gt;<item>
            				<description><see cref="T:MccDaq.CounterSource"/> options
            				<para><format type="italics"><see cref="F:MccDaq.CounterSource.TcPrevCtr"/></format> - TCN – 1 (terminal count of previous counter).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput1"/></format> - SRC 1 (counter input 1).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput2"/></format> - SRC 2 (counter input 2).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput3"/></format> - SRC 3 (counter input 3).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput4"/></format> - SRC 4 (counter input 4).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput5"/></format> - SRC 5 (counter input 5).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate1"/></format> - Gate 1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate2"/></format> - Gate 2.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate3"/></format> - Gate 3.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate4"/></format> - Gate 4.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate5"/></format> - Gate 5.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq1"/></format> - F1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq2"/></format> - F2.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq3"/></format> - F3.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq4"/></format> - F4.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq5"/></format> - F5.</para>
            				</description></item>
            			<item><description><paramref name="specialGate "/>options  (<see cref="T:MccDaq.OptionState"/>) 
            				<para><format type="italics"><see cref="F:MccDaq.OptionState.Enabled"/></format> - Enable special gate.</para>
            					<para><format type="italics"><see cref="F:MccDaq.OptionState.Disabled"/></format> - Disable special gate.</para>
            				</description></item>
            			<item><description><see cref="T:MccDaq.Reload"/>  options  
            				<para><format type="italics"><see cref="F:MccDaq.Reload.LoadReg"/></format> - Reload from load.</para>
            					<para><format type="italics"><see cref="F:MccDaq.Reload.LoadAndHoldReg"/></format> - Reload from load or hold, except in mode X, which reloads only from load.</para>
            				</description></item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.RecycleMode"/> options
            				<para><format type="italics"><see cref="F:MccDaq.RecycleMode.OneTime"/></format> - Counter stops counting when it reaches 0.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.RecycleMode.Recycle"/></format> - Counter automatically reloads to the starting count every time it reaches 0, and then continues counting.	</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.BCDMode"/> options
            				<para><format type="italics"><see cref="F:MccDaq.BCDMode.Disabled"/></format> - Counter operates in Binary count.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.BCDMode.Enabled"/></format> - Counter operates in Binary coded decimal (BCD) count.	</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.CountDirection"/> options
            				<para><format type="italics"><see cref="F:MccDaq.CountDirection.CountDown"/></format> - Counter counts down.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.CountDirection.CountUp"/></format> - Counter counts up.	</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.C9513OutputControl"/> options
            				<para><format type="italics"><see cref="F:MccDaq.C9513OutputControl.AlwaysLow"/></format> - Inactive, output low.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C9513OutputControl.HighPulseOnTc"/></format> - Counter counts up.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C9513OutputControl.ToggleOnTc"/></format> - Counter counts down.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C9513OutputControl.Disconnected"/></format> - Counter counts up.	</para>
            					<para><format type="italics"><see cref="F:MccDaq.C9513OutputControl.LowPulseOnTc"/></format> - Counter counts down.	</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:33:55 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C8536Init(System.Int32,MccDaq.CtrlOutput)">
            <summary>
            Initializes the counter linking features of an 8536 counter chip on a Measurement Computing counter device. Counters 1 and 2 must be linked before enabling the counters.
            </summary>
            <param name="chipNum">The  number (1 to <format type="italics">n</format>) of the 8536 chip to initialize, where <format type="italics">n</format> is the number of 8536 chips on the Measurement Computing counter device
            </param>
            <param name="ctr1Output"><see cref="T:MccDaq.CtrlOutput"/> that sets how counter 1 is linked to counter 2, or if it is not linked at all.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">C8536Init</format> can only be used with Measurement Computing devices that contain an 8536 counter chip. To learn about the hardware affected by this mode, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/Z8536.pdf">Zilog 8536 product specification
            </see></format> data sheet.
            			</description></item><item>
            				<description><see cref="T:MccDaq.CtrlOutput"/> options
            <para><format type="italics"><see cref="F:MccDaq.CtrlOutput.NotLinked"/></format> - Counter 1 is not connected to any other counter inputs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CtrlOutput.GateCtr2"/></format> - The output of counter 1 is connected to the GATE of counter 2</para>
            					<para><format type="italics"><see cref="F:MccDaq.CtrlOutput.TrigCtr2"/></format> - The output of counter 1 is connected to the trigger of counter 2.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CtrlOutput.InCtr2"/></format> - The output of counter 1 is connected to counter 2's clock input.</para>
            				</description></item></list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:34:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)">
            <summary>
            Initializes all of the chip-level features of a 9513 counter chip. 
            </summary>
            <param name="chipNum">The  number of the 9513 chip to initialize.
            </param>
            <param name="foutDivider">F-Out divider (0-15).
            </param>
            <param name="foutSource"><see cref="T:MccDaq.CounterSource"/> that sets source of the signal for F-Out signal.
            </param>
            <param name="compare1"><see cref="T:MccDaq.CompareValue"/> that enables or disables the comparator on counter 1.
            </param>
            <param name="compare2">CompareValue that enables or disables the comparator on counter 2.
            </param>
            <param name="timeOfDay"><see cref="T:MccDaq.TimeOfDay"/> that enables or disables time-of-day mode.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">C9513Init</format> can only be used with Measurement Computing devices that contain a 9513 counter chip. For more information on this chip, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/pdfmanuals/cts9513-2.pdf">AM9513A
            </see></format> data sheet.
            	
            			</description></item><item>
            				<description>
            For a five-channel Measurement Computing counter device, set <paramref name="chipNum"/> to 1. <para>For a 10-channel Measurement Computing counter device, set <paramref name="chipNum"/> to either 1 or 2. </para><para>For a 20-channel Measurement Computing counter device, set <paramref name="chipNum"/> to 1, 2, 3, or 4.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="foutDivider"/> settings
            <para>0 - Divide by 16.</para>
            					<para>1 - Divide by 1.</para>
            					<para>2 to 15 - Divide by the specified number.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="foutSource"/> settings (<see cref="T:MccDaq.CounterSource"/>) 
            								<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput1"/></format> - SRC 1 (counter input 1).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput2"/></format> - SRC 2 (counter input 2).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput3"/></format> - SRC 3 (counter input 3).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput4"/></format> - SRC 4 (counter input 4).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.CtrInput5"/></format> - SRC 5 (counter input 5).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate1"/></format> - Gate 1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate2"/></format> - Gate 2.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate3"/></format> - Gate 3.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate4"/></format> - Gate 4.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Gate5"/></format> - Gate 5.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq1"/></format> - F1.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq2"/></format> - F2.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq3"/></format> - F3.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq4"/></format> - F4.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterSource.Freq5"/></format> - F5.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="compare1"/> options (<see cref="T:MccDaq.CompareValue"/>)
            				<para><format type="italics"><see cref="F:MccDaq.CompareValue.Disabled"/></format> - 0x0.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CompareValue.Enabled"/></format> - 0x1.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="compare2"/> options (<see cref="T:MccDaq.CompareValue"/>)
            				<para><format type="italics">Disabled</format> - 0x0.</para>
            					<para><format type="italics">Enabled" </format> - 0x1.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.TimeOfDay"/> options 
            				<para><format type="italics"><see cref="F:MccDaq.TimeOfDay.Disabled"/></format> - Time of day disabled.</para>
            					<para><format type="italics"><see cref="F:MccDaq.TimeOfDay.One"/></format> - Time of day enabled / 5 input.</para>
            					<para><format type="italics"><see cref="F:MccDaq.TimeOfDay.Two"/></format> - Time of day enabled / 6 input.</para>
            					<para><format type="italics"><see cref="F:MccDaq.TimeOfDay.Three"/></format> - Time of day enabled / 10 input.</para>
            					<para>There are no options for:</para>
            					<list type="bullet">
            						<item>
            							<description>
            0 (FOUT on) FOUT Gate
            </description>
            						</item>
            						<item>
            							<description>
            0 (data bus matches board) data bus width
            </description>
            						</item>
            						<item>
            							<description>
            			1 (disable increment) data pointer control
            </description>
            						</item>
            						<item>
            							<description>
            1 (BCD scaling) scalar control
            </description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:33:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.Int16@,System.Int32@)">
            <summary>
            Measures the frequency of a signal from a 9513 counter. 
            </summary>
            <param name="signalSource">
            	<see cref="T:MccDaq.SignalSource"/> that sets the source of the signal used to calculate the frequency.</param>
            <param name="gateInterval">
            Specifies the number of milliseconds that the counter counts. </param>
            <param name="count">
            Upon return, contains the raw count.
            </param>
            <param name="freq">
            Upon return, contains the measured frequency in Hz.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalSource"/> parameter options
            <para>One 9513 chip (chip 1 used): </para>
            					<list type="bullet">
            						<item>
            							<description>
            Gate1 through Gate4
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq5
            </description>
            						</item>
            						<item>
            							<description>
            CtrInput1 through CtrInput5
            </description>
            						</item>
            					</list>
            					<para>Two 9513 chips (chip 1 or chip 2 used):</para>
            					<list type="bullet">
            						<item>
            							<description>
            CtrInput1 through CtrInput10
            </description>
            						</item>
            						<item>
            							<description>
            Gate1 through Gate9 (excluding Gate5)
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq10
            </description>
            						</item>
            					</list>
            					<para>Four 9513 chips (chips 1- 4 can be used):</para>
            					<list type="bullet">
            						<item>
            							<description>
            CtrInput1 through CtrInput20
            </description>
            						</item>
            						<item>
            							<description>
            Gate1 through Gate19 (excluding gates 5, 10 and 15)
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq20
            </description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            This method requires an electrical connection between counter 4 output and counter 5 gate. This connection must be made between counters 4 and 5 on the chip specified by <paramref name="signalSource"/>.
            </description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            Call <format type="bold">C9513Init</format> for each <paramref name="chipNum"/> used by this method. The values of <paramref name="foutDivider"/>, <paramref name="foutSource"/>, <paramref name="compare1"/>, <paramref name="compare2"/>, and <paramref name="timeOfDay"/> are irrelevant to this method and may be any value shown in the <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method topic.</description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            If you select an external clock source for the counters, the <paramref name="gateInterval"/>, <paramref name="count"/>, and <paramref name="freq"/> settings are only valid if the external source is 1 MHz. Otherwise, you need to scale the values according to the frequency of the external clock source. 
            <para>For example, for an external clock source of 2 MHz, increase your <paramref name="gateInterval"/> setting by a factor of 2, and also double the <paramref name="count"/> and <paramref name="freq"/> values returned when analyzing your results.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:32:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)">
            <summary>
            Reads the current count from a counter.
            </summary>
            <param name="counterNum">
            The counter to read current count from. Valid settings are 1 to 20, depending on the number of counters on the board.
            </param>
            <param name="count">
            Upon return, contains the counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<format type="bold">CIn</format> vs. <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/> method: Although the <format type="bold">CIn</format> and <format type="bold">CIn32</format> methods perform the same operation, <format type="bold">CIn32</format> is the preferred method to use.
            The only difference between the two is that <format type="bold">CIn</format> returns a 16-bit count value and <format type="bold">CIn32</format> returns a 32-bit value. Both <format type="bold">CIn</format> and <format type="bold">CIn32</format> can be used, but <format type="bold">CIn32</format> is required whenever you need to read count values greater than 16 bits (counts &gt; 65535). 
            </remarks>
            </comment>
            <lastupdated>5/4/2010 1:31:49 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)">
            <summary>
            Reads the current count from a counter and returns it as a 32-bit integer.
            </summary>
            <param name="counterNum">
            The  number of the counter whose current count you want to read. Valid settings are 1 to <format type="italics">n</format>, where <format type="italics">n</format> is the number of counters on the board.</param>
            <param name="count">
            Upon return, contains the current counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> method vs. <format type="bold">CIn32</format>: Although the <format type="bold">CIn</format> and <format type="bold">CIn32</format> methods perform the same operation, <format type="bold">CIn32</format> is the preferred method to use.
            The only difference between the two is that <format type="bold">CIn</format> returns a 16-bit count value and <format type="bold">CIn32</format> returns a 32-bit value. Both <format type="bold">CIn</format> and <format type="bold">CIn32</format> can be used, but <format type="bold">CIn32</format> is required whenever you need to read count values greater than 16 bits (counts &gt; 65535). 
            </remarks>
            </comment>
            <lastupdated>5/4/2010 3:42:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn64(System.Int32,System.Int64@)">
            <summary>Reads the current count from a counter and returns it as a 64-bit double word.</summary>
            <param name="counterNum">
            The  number of the counter whose current count you want to read. Valid settings are 1 to <format type="italics">n</format>, where <format type="italics">n</format> is the number of counters on the board.</param>
            <param name="count">
            Upon return, contains the current counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:41:53 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)">
            <summary>
            Loads a specified counter's Load, Hold, Alarm, QuadCount, QuadPreset or PreScaler register with a count. 
            </summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. Count must be between 0 and 2<format type="superscript">resolution</format>–1 of the counter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><list type="bullet">
            			<item>
            				<description>
            					<paramref name="regNum"/> parameter values
            <para><format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg20"/></format> - Loads registers 1 to 20. Can span several chips.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg20"/></format> - Hold registers 1 to 20. Can span several chips (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip1"/></format> - Alarm register 1 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip1"/></format> - Alarm register 2 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip2"/></format> - Alarm register 1 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip2"/></format> - Alarm register 2 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip3"/></format> - Alarm register 1 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip3"/></format> - Alarm register 2 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip4"/></format> - Alarm register 1 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip4"/></format> - Alarm register 2 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount4"/></format> - Current count (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset4"/></format> - Preset register (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler4"/></format> - Prescaler register (LS7266 only).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            You cannot load a count-down-only counter with less than 2.
            </description>
            			</item>
            			<item>
            				<description>
            There are several counter types supported. Please refer to the data sheet for the registers available for a counter type.
            </description>
            			</item>
            			<item>
            				<description>When loading a counter with a starting value, the value is never loaded directly into the counter's count register. Instead, it is loaded into the "load" or "hold" register. From there, once the counter is enabled, it loads the count from the appropriate register—usually on the first valid pulse.
            			</description>
            			</item>
            			<item>
            				<description><format type="bold">CLoad</format> vs. <see cref="M:MccDaq.MccBoard.CLoad32(MccDaq.CounterRegister,System.Int32)"/> method: Although the <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> methods perform the same operation, the difference between the two is that <format type="bold">CLoad</format> loads a 16-bit count value and <format type="bold">CLoad32</format> loads a 32-bit value. Both <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> can be used, but <format type="bold">CLoad32</format> is required whenever you need to load count values greater than 16 bits (counts &gt; 65535). 
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:30:24 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad32(MccDaq.CounterRegister,System.Int32)">
            <summary>
            Loads a specified counter's Count, Preset or Prescaler register with a count.</summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><list type="bullet">
            			<item>
            				<description>
            					<paramref name="regNum"/> parameter values
            <para><format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg20"/></format> - Loads registers 1 to 20. Can span several chips.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg20"/></format> - Hold registers 1 to 20. Can span several chips (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip1"/></format> - Alarm register 1 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip1"/></format> - Alarm register 2 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip2"/></format> - Alarm register 1 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip2"/></format> - Alarm register 2 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip3"/></format> - Alarm register 1 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip3"/></format> - Alarm register 2 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip4"/></format> - Alarm register 1 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip4"/></format> - Alarm register 2 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount4"/></format> - Current count (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset4"/></format> - Preset register (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler4"/></format> - Prescaler register (LS7266 only).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            There are several counter types supported. Please refer to the data sheet for the registers available for a counter type.
            </description>
            			</item>
            			<item>
            				<description>When loading a counter with a starting value, the value is never loaded directly into the counter's count register. Instead, it is loaded into the "load" or "hold" register. From there, once the counter is enabled, it loads the count from the appropriate register—usually on the first valid pulse.
            			</description>
            			</item>
            			<item>
            				<description><see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method vs. <format type="bold">CLoad32</format>: Although the <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> methods perform the same operation, the difference between the two is that <format type="bold">CLoad</format> loads a 16-bit count value and <format type="bold">CLoad32</format> loads a 32-bit value. Both <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> can be used, but <format type="bold">CLoad32</format> is required whenever you need to load count values greater than 16 bits (counts &gt; 65535). 
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:29:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad64(MccDaq.CounterRegister,System.Int64)">
            <summary>
            Loads a specified counter's Count, Preset or Prescaler register with a count.</summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:45:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CStatus(System.Int32,MccDaq.StatusBits@)">
            <summary>
            Returns status information about a specified counter (7266 counters only).
            </summary>
            <param name="counterNum">
            The  number of the counter whose status bits you want to read. Valid settings are 1 to <format type="italics">n</format>, where <format type="italics">n</format> is the number of counters on the Measurement Computing counter device.
            </param>
            <param name="statusBits">
            Upon return, contains the <see cref="T:MccDaq.StatusBits"/> that indicate the current status of the counter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item><description><format type="bold">CStatus</format> can only be used with Measurement Computing devices that contain a 7266 counter chip (quadrature
            encoder devices). For more information, refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/LS7266R1.pdf">LS7266R1
            </see></format> data sheet.
            			</description></item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.StatusBits"/> parameter options:
            		<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.UnderFlow"/></format> - Set to 1 whenever the count decrements past 0. Cleared to 0 whenever <format type="bold">CStatus</format>
            is called.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.OverFlow"/></format> - Set to 1 whenever the count increments past it's upper limit. Cleared to 0 whenever
            <format type="bold">CStatus</format> is called.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.Compare"/></format> - Set to 1 whenever the count matches the preset register. Cleared to 0 whenever<format type="bold"> CStatus</format>
            is called.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.Sign"/></format> - Set to 1 whenever MSB of the count is 1. Cleared to 0 whenever the MSB of the count is set to 0.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.Error"/></format> - Set to 1 whenever an error occurs due to excessive noise on the input. Is cleared
            to 0 by calling <see cref="M:MccDaq.MccBoard.C7266Config(System.Int32,MccDaq.Quadrature,MccDaq.CountingMode,MccDaq.DataEncoding,MccDaq.IndexMode,MccDaq.OptionState,MccDaq.FlagPins,MccDaq.OptionState)"/> method.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.Updown"/></format> - Set to 1 when counting up. Cleared to 0 when counting down.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.StatusBits.Index"/></format> - Set to 1 when the index is valid. Cleared to 0 when the index is not valid.
            </para></description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:29:06 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)">
            <summary>Installs an interrupt handler that stores the current count whenever an interrupt occurs.
            </summary>
            <param name="intCount">
            The  number of interrupts that stop the counter from being read. Counters are read every time an interrupt occurs until this number of interrupts is reached. 
            </param>
            <param name="cntrControl">
            	<see cref="T:MccDaq.CounterControl"/> array that sets whether each channel's count is read or not read when an interrupt occurs.
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores the counts.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            If <paramref name="intCount"/> = 0, the method runs until <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method is called (refer to the <paramref name="memHandle"/> remark below).
            <para>
            If <paramref name="intCount"/> is not zero, the <paramref name="memHandle"/> array must be allocated to 
            (<paramref name="intCount"/>* Number of Counters).
            <para>
            For example, if <paramref name="intCount"/> is set to 100 for a Measurement Computing device with five counters, then the <paramref name="memHandle"/>array must be declared with a size of (100 * 5) = 500. This functionality keeps the user application from having to move the data out of the <paramref name="memHandle"/>buffer for every interrupt before it is overwritten. For each interrupt, the counter values are stored in adjacent memory locations in the <paramref name="memHandle"/> array.
            </para>
            Specifying <paramref name="intCount"/> as a non-zero value and failing to allocate the proper sized array results in a runtime error. There is no way for the Universal Library to determine if the array has been allocated with the proper size.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="cntrControl"/> array should have an element for each counter on the board (five elements for a five-channel Measurement Computing counter device, 10 elements for a 10-channel Measurement Computing counter device, and so on). Each element corresponds to a counter channel. Each element should be set to either <format type="italics"><see cref="F:MccDaq.CounterControl.Disabled"/></format> or <format type="italics"><see cref="F:MccDaq.CounterControl.Enabled"/></format>. 
            <para>All channels set to <format type="italics">Enabled</format> are read when an interrupt occurs. The count value is stored in the <paramref name="memHandle"/> element associated with that channel.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            If <paramref name="intCount"/> = 0, then the <paramref name="memHandle"/> array should have an element for each counter on the Measurement Computing device (five elements for a five-channel Measurement Computing counter device, 10 elements for a 10-channel Measurement Computing counter device, and so on). Each element corresponds to a counter channel. Each channel that is marked as <format type="italics">Enabled</format>in the <paramref name="cntrControl"/> array is read when an interrupt occurs. The count value is stored in the DataBuffer element associated with that channel.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:28:53 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl[],System.IntPtr)">
            <summary>Installs an interrupt handler that stores the current count whenever an interrupt occurs.
            </summary>
            <param name="intCount">
            The  number of interrupts that stop the counter from being read. Counters are read every time an interrupt occurs until this number of interrupts is reached. 
            </param>
            <param name="cntrControl">
            	<see cref="T:MccDaq.CounterControl"/> array that sets whether each channel's count is read or not read when an interrupt occurs.
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores the counts.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:47:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CInScan(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Scans a range of counter channels and stores the samples in an array. 
            </summary>
            <param name="firstCtr">
            First counter channel of scan. </param>
            <param name="lastCtr">
            Last counter channel of scan. </param>
            <param name="numPoints">
            Number of counter samples to collect.
            </param>
            <param name="rate">
            The rate (in samples per second) at which samples are taken. Counts are latched and saved in the Measurement Computing device's memory. 
            Also returns the value of the actual rate used, which may be different from the requested rate because of pacer limitations.
            </param>
            <param name="memHandle">
            The handle for the Windows buffer used to store and return data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>  method.
            </param>
            <param name="Options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Both <paramref name="firstCtr"/> and <paramref name="lastCtr"/> are zero-based, so the first counter number is 0. 
            <para>The maximum allowable channel for both <paramref name="firstCtr"/> and <paramref name="lastCtr"/> depends on how many scan counters are available on the Measurement Computing device in use.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            If more than one channel is being sampled, the number of samples collected per channel equals <paramref name="numPoints"/>/(<paramref name="lastCtr"/>- <paramref name="firstCtr"/> + 1).
            </description>
            			</item>
            			<item>
            				<description><paramref name="options"/> parameter values
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - When the <format type="italics">Background</format> option is used, control returns immediately to 
            the next line in your program and the data collection from the counter into the buffer 
            continues in the background.
            If the <format type="italics">Background</format> option is not used, the <format type="bold">CInScan</format> method does not return to 
            your program until all of the requested data has been collected and returned to the 
            buffer.  Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> to check on the status of the 
            background operation. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> with <see cref="F:MccDaq.FunctionType.CtrFunction"/> to stop the background process before it has completed. 
            Execute <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This setting puts the method in an endless loop. Once it collects the required 
            number of samples, it resets to the start of the buffer and begins again. The only way to stop this operation is by calling <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> with <see cref="F:MccDaq.FunctionType.CtrFunction"/>. Normally, you should use this setting 
            with <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> so that your program regains 
            control. </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> - If this option is specified, sampling does not begin until the trigger condition is met. You can set the trigger condition to rising edge, falling edge, or the level of the digital trigger input with the <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method. Refer to information on your Measurement Computing device in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>. 
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="memHandle"/> buffer must be previously allocated with <see cref="M:MccDaq.MccService.WinBufAlloc32(System.Int32)"/>.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/7/2010 10:40:38 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CInScan(System.Int32,System.Int32,System.Int32,System.Int32@,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Scans a range of counter channels and stores the samples in an array. 
            </summary>
            <param name="firstCtr">
            First counter channel of scan. </param>
            <param name="lastCtr">
            Last counter channel of scan. </param>
            <param name="numPoints">
            Number of counter samples to collect.
            </param>
            <param name="rate">
            The rate (in samples per second) at which samples are taken. Counts are latched and saved in the Measurement Computing device's memory. 
            Also returns the value of the actual rate used, which may be different from the requested rate because of pacer limitations.
            </param>
            <param name="memHandle">
            The handle for the Windows buffer used to store and return data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>  method.
            </param>
            <param name="Options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/7/2010 10:41:32 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CConfigScan(System.Int32,MccDaq.CounterMode,MccDaq.CounterDebounceTime,MccDaq.CounterDebounceMode,MccDaq.CounterEdgeDetection,MccDaq.CounterTickSize,System.Int32)">
            <summary>
            Configures a counter channel.
            </summary>
            <param name="counterNum">
            Number of the channel to set up.
            </param>
            <param name="mode">
            	<see cref="T:MccDaq.CounterMode"/> bit-field that controls various options.
            </param>
            <param name="debounceTime">
            	<see cref="T:MccDaq.CounterDebounceTime"/> setting used to bypass the <paramref name="debounceMode"/> setting, or to set a channel's comparitor output to one of 16 debounce times. Debounce is used to eliminate switch-induced transients typically associated with electro-mechanical devices including relays, proximity switches, and encoders.
            </param>
            <param name="debounceMode">
            	<see cref="T:MccDaq.CounterDebounceMode"/> setting that sets the mode of the debounce module.
            </param>
            <param name="edgeDetection">
            	<see cref="T:MccDaq.CounterEdgeDetection"/> setting that sets which edge to detect.
            </param>
            <param name="tickSize">
            Reserved for future use.
            </param>
            <param name="mapCounter">
            Used to select the mapped counter channel. A mapped channel is another counter input channel that can participate in the channel's input signal by gating the counter.
            </param>
            <returns>
            	<see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method only works with Measurement Computing counter devices that have counter scan capability. Refer to the <format type="italics">
            						<see href="http://www.measurementcomputing.com/PDFManuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability.
            			</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="counterNum"/> is zero based. The first counter number to clear is 0.
            			</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="mode"/> parameter options
            <para><format type="italics"><see cref="F:MccDaq.CounterMode.ClearOnRead"/></format> - The counter is cleared at the beginning of every sample.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterMode.StopAtMax"/></format> - The counter stops at the top of its count. The top of the count is FFFFFFFF hex.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterMode.DecrementOn"/></format> - Allows the mapped channel to decrement the counter. Not compatible with <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> or <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterMode.GatingOn"/></format> - Enables the counter when the mapped channel that is used to gate the counter is <format type="italics">high</format>. When the mapped channel is <format type="italics">low</format>, the counter is disabled (but holds the count value).
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterMode.LatchOnMap"/></format> - Causes the count to be latched by the signal on the mapped counter. Not compatible with <see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> or <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/>.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterMode.Bit32"/></format> - Selects a 32-bit counter.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="debounceMode"/> parameter options
            <para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceMode.TriggerAfterStable"/></format> - Use this mode to reject glitches and pass state transitions only after a specified period of stability (as set by the <paramref name="debounceTime"/> parameter). This mode is used with electro-mechanical devices like encoders and mechanical switches to reject switch bounce and disturbances due to a vibrating encoder that is not otherwise moving. The debounce time should be set short enough to accept the desired inpulse, but longer than the period of the undesired disturbance.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceMode.TriggerBeforeStable"/></format> - Use this mode when the input signal has groups of glitches, and each group is to be counted as one. The trigger before stable mode recognizes and counts the first glitch within a group, but rejects the subsequent glitches within the group if <paramref name="debounceTime"/> is set accordingly. In this case, <paramref name="debounceTime"/> is to encompass one entire group of glitches.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="debounceTime"/> parameter options
            <para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce500ns"/></format> - Sets the counter channel's comparitor output to 500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce1500ns"/></format> - Sets the counter channel's comparitor output to 1500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce3500ns"/></format> - Sets the counter channel's comparitor output to 3500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce7500ns"/></format> - Sets the counter channel's comparitor output to 7500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce15500ns"/></format> - Sets the counter channel's comparitor output to 15,500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce31500ns"/></format> - Sets the counter channel's comparitor output to 31,500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce63500ns"/></format> - Sets the counter channel's comparitor output to 63,500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce127500ns"/></format> - Sets the counter channel's comparitor output to 127,500 ns.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce100us"/></format> - Sets the counter channel's comparitor output to 100 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce300us"/></format> - Sets the counter channel's comparitor output to 300 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce700us"/></format> - Sets the counter channel's comparitor output to 700 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce1500us"/></format> - Sets the counter channel's comparitor output to 1500 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce3100us"/></format> - Sets the counter channel's comparitor output to 3100 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce6300us"/></format> - Sets the counter channel's comparitor output to 6300 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce12700us"/></format> - Sets the counter channel's comparitor output to 12,700 us.</para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterDebounceTime.Debounce25500us"/></format> - Sets the counter channel's comparitor output to 25,500 us.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="edgeDetection"/> parameter options
            <para>
            						<format type="italics"><see cref="F:MccDaq.CounterEdgeDetection.RisingEdge"/></format> - Detects the rising edge. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.CounterEdgeDetection.FallingEdge"/></format> - Detects the falling edge.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:32:59 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CConfigScan(System.Int32,MccDaq.CounterMode,MccDaq.CounterDebounceTime,MccDaq.CounterDebounceMode,MccDaq.CounterEdgeDetection,System.Int32,System.Int32)">
            <summary>
            Configures a counter channel.
            </summary>
            <param name="counterNum">
            Number of the channel to set up.
            </param>
            <param name="mode">
            	<see cref="T:MccDaq.CounterMode"/> bit-field that controls various options.
            </param>
            <param name="debounceTime">
            	<see cref="T:MccDaq.CounterDebounceTime"/> setting used to bypass the <paramref name="debounceMode"/> setting, or to set a channel's comparitor output to one of 16 debounce times. Debounce is used to eliminate switch-induced transients typically associated with electro-mechanical devices including relays, proximity switches, and encoders.
            </param>
            <param name="debounceMode">
            	<see cref="T:MccDaq.CounterDebounceMode"/> setting that sets the mode of the debounce module.
            </param>
            <param name="edgeDetection">
            	<see cref="T:MccDaq.CounterEdgeDetection"/> setting that sets which edge to detect.
            </param>
            <param name="tickSize">
            Reserved for future use.
            </param>
            <param name="mapCounter">
            Used to select the mapped counter channel. A mapped channel is another counter input channel that can participate in the channel's input signal by gating the counter.
            </param>
            <returns>
            	<see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 3:32:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CClear(System.Int32)">
            <summary>
            Clears a counter value by setting it to 0 (zero).
            </summary>
            <param name="counterNum">
            		 The number of the counter to clear.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<paramref name="CounterNum"/> is zero-based. The first counter number to clear is 0.
            </description>
            			</item>
            			<item>
            				<description>
            This method only works with Measurement Computing counter devices that have counter scan capability. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability. 
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:33:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TimerOutStart(System.Int32,System.Double@)">
            <summary>
            Starts a timer square wave output. Use the <see cref="M:MccDaq.MccBoard.TimerOutStop(System.Int32)"/> method to stop the output.
            </summary>
            <param name="timerNum">
            The timer to output the square wave from. Valid values are zero up to the number of timers – 1 on the board.
            </param>
            <param name="frequency">
            The desired square wave frequency. The 1 MHz clock is divided down by integer values to produce the frequency. The actual frequency output is returned. Valid values are 1,000,000 to 15.259 (1,000,000 / 65535).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>11/13/2006 9:17:02 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TimerOutStop(System.Int32)">
            <summary>
            Stops a timer square wave output. Use the <see cref="M:MccDaq.MccBoard.TimerOutStart(System.Int32,System.Double@)"/> method to start the output.
            </summary>
            <param name="timerNum">
            The timer to stop. Valid values are zero up to the number of timers on the board - 1.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>11/13/2006 9:17:17 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.PulseOutStart(System.Int32,System.Double@,System.Double@,System.Int32,System.Double@,MccDaq.IdleState,MccDaq.PulseOutOptions)">
            <summary>
            Starts a timer to generate digital pulses at a specified frequency and duty cycle. Use <see cref="M:MccDaq.MccBoard.PulseOutStop(System.Int32)" crefType="Unqualified"/> to stop the output.
            </summary>
            <param name="timerNum">
            The timer to output the digital pulse from. Valid values are zero up to the number of timers - 1 on the board.
            </param>
            <param name="frequency">
            The desired square wave frequency. The timer clock is divided down by integer values to produce the frequency. Upon return, contains the actual frequency that is output. Valid values are dependent on the timer's clock and the the timer resolution.
            </param>
            <param name="dutyCycle">
            The width of the pulse divided by the pulse period.
            </param>
            <param name="pulseCount">
            The number of pulses to generate.
            </param>
            <param name="initialDelay">
            The amount of time to delay before starting the timer output after enabling the output.
            </param>
            <param name="idleState">
            	<see cref="T:MccDaq.IdleState" crefType="Unqualified"/> that sets the resting state of the output.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            				The <format type="italics">dutyCycle</format> ratio is used with the <format type="italics">frequency</format> value to determine the pulse width and the interval between pulses.
            </description>
            			</item>
            			<item>
            				<description>
            Set <format type="italics">pulseCount</format> to zero to continuously generate pulses until <see cref="M:MccDaq.MccBoard.PulseOutStop(System.Int32)" crefType="Unqualified"/> is called.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:08:54 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.PulseOutStop(System.Int32)">
            <summary>
            Stops a timer output. Use the <see cref="M:MccDaq.MccBoard.PulseOutStart(System.Int32,System.Double@,System.Double@,System.Int32,System.Double@,MccDaq.IdleState,MccDaq.PulseOutOptions)" crefType="Unqualified"/> method to start the output.
            </summary>
            <param name="timerNum">
            The timer to stop. Valid values are zero up to the number of timers on the board - 1.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>12/30/2008 5:10:07 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DBitIn(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState@)">
            <summary>
            Reads the state of a single digital input bit. 
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the type of digital port from which to read a bit.
            </param>
            <param name="bitNum">
            The  number of the bit to read within the single large port. 
            </param>
            <param name="bitValue">
            Upon return, contains the bit value read (0 or 1).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method treats all of the DIO ports of a particular type on a Measurement Computing device as a single port. It lets you read the state of any individual bit within this port. Note that for some port types, such as 8255 ports, if the port is configured for DigitalOut, this method provides readback of the last output value.
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="portType"/> parameter options (<see cref="T:MccDaq.DigitalPortType"/>)
            <para>There are three general types of digital ports:</para>
            					<list type="number">
            						<item>
            							<description>
            ports that are programmable as input or output
            </description>
            						</item>
            						<item>
            							<description>
            ports that are fixed input or output
            </description>
            						</item>
            						<item>
            							<description>
            ports which you can program each bit as input or output
            </description>
            						</item>
            					</list>
            					<para>For the first of these types, set <paramref name="portType"/> to <see cref="F:MccDaq.DigitalPortType.FirstPortA"/>.</para>
            					<para> For the latter two port types, set <paramref name="portType"/> to <see cref="F:MccDaq.DigitalPortType.AuxPort"/>. For Measurement Computing devices that have both types of digital ports, set <paramref name="portType"/> to either <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.AuxPort"/>, depending on which digital inputs you want to read.</para>
            					<item>
            						<description>
            The tables below show how bit numbers are referenced throughout multiple 82C55 and 8536 digital chips. The maximum number of 82C55 chips on a single Measurement Computing product is eight, and the maximum number of 8536 chips on a single Measurement Computing product is two.
            <para><image src="DIO-ports.gif"/></para>
            							<para><image src="DIO-bits.gif"/></para>
            						</description></item>
            				</description>
            			</item>
            			<item>
            				<description>
            A <paramref name="bitValue"/> of 0 indicates a logic low reading. <para>A <paramref name="bitValue"/> of 1 indicates a logic high
            reading. </para>
            					<para>Logic high does not necessarily mean 5 V. Refer to your Measurement Computing device user's guide for chip
            input specifications.</para></description></item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:26:59 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DBitOut(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalLogicState)">
            <summary>
            Sets the state of a single digital output bit. 
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the type of digital port to which to write.
            </param>
            <param name="bitNum">
            The  number of the bit to write within the single large port. 
            </param>
            <param name="bitValue">
            The  bit value (0 or 1) to write to the specific port and bit.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method treats all of the DIO ports of a particular type on a Measurement Computing device as a single port. It lets you set the state of any individual bit within this port. <para>If the port type is not AuxPort, you must use <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method to configure the port
            for output first.</para><para> If the port type is AuxPort, you may need to use <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method or
            <format type="bold">DConfigPort</format> to configure the bit for output first.</para>  Refer to the Measurement Computing device-specific information in the the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if AuxPort
            should be configured for your product.
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="portType"/> parameter options (<see cref="T:MccDaq.DigitalPortType"/>)
            <para>There are three general types of digital ports:</para>
            					<list type="number">
            						<item>
            							<description>
            ports that are programmable as input or output
            </description>
            						</item>
            						<item>
            							<description>
            ports that are fixed input or output
            </description>
            						</item>
            						<item>
            							<description>
            ports which you can program each bit as input or output
            </description>
            						</item>
            					</list>
            					<para>For the first of these types, set <paramref name="portType"/> to <see cref="F:MccDaq.DigitalPortType.FirstPortA"/>.</para>
            					<para> For the latter two port types, set <paramref name="portType"/> to <see cref="F:MccDaq.DigitalPortType.AuxPort"/>. For Measurement Computing devices that have both types of digital ports, set <paramref name="portType"/> to either <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.AuxPort"/>, depending on which digital outputs you want to write.</para>
            					<item><description>
            The tables below show how bit numbers are referenced throughout multiple 82C55 and 8536 digital chips. The maximum number of 82C55 chips on a single Measurement Computing product is eight, and the maximum number of 8536 chips on a single Measurement Computing product is two.
            <para><image src="DIO-ports.gif"/></para>
            							<para><image src="DIO-bits.gif"/></para>
            						</description></item>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:26:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)">
            <summary>
            Configures a specific digital port as input or output. 
            </summary>
            <param name="portType">
            The number of the port to configure. 
            </param>
            <param name="direction">
            	<see cref="T:MccDaq.DigitalPortDirection"/> that configures the the entire 8-bit or 4-bit bit for output (<see cref="F:MccDaq.DigitalPortDirection.DigitalOut"/>) or input (<see cref="F:MccDaq.DigitalPortDirection.DigitalIn"/>).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method is for use with ports that may be programmed as input or output, such as those on the 82C55 chips and 8536 chips. Refer to you Measurement Computing device user's manual for details of chip operation.
            </description>
            			</item>
            			<item>
            				<description>
            For most Measurement Computing devices, AuxPort is not configurable, so please consult your Measurement Computing device user's guide. 
            The following tables show which ports and bit numbers are in which 82C55 and 8536 digital chips. The most 82C55 chips on a single Measurement Computing device is eight (8). The most 8536 chips found on a Measurement Computing device is two (2).
            <para><image src="DIO-ports.gif"/></para>
            					<ports><image src="DIO-bits.gif"/></ports>
            					<para>  
            Refer to the device-specific information in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if AuxPort
            should be configured for your product.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            				When used on ports within an 8255 chip, this method resets all ports on that chip configured for output to a zero state. If you set an output value on FirstPortA and then change the configuration on FirstPortB from output to input, the output value at FirstPortA is all zeros. You can, however, set the configuration on SecondPortX without affecting the value at FirstPortA. For this reason, this method is usually called at the beginning of the program for each port requiring configuration.
            									
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:26:17 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)">
            <summary>
            Configures a specific digital bit as input or output. 
            </summary>
            <param name="portType">
            The port (AuxPort) whose bits you want to configure. 
             
            </param>
            <param name="bitNum">
            The bit number to configure as input or output.
            </param>
            <param name="direction">
            	<see cref="T:MccDaq.DigitalPortDirection"/> that configures the specified bit for output (<see cref="F:MccDaq.DigitalPortDirection.DigitalOut"/>) or input (<see cref="F:MccDaq.DigitalPortDirection.DigitalIn"/>).
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method treats all of the DIO ports of the AuxPort type on a Measurement Computing device as a single port. It is <format type="italics">not</format> supported by 8255-type DIO ports.
            <para>  
            Refer to the Measurement Computing device-specific information in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for more information.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            				The port specified by <paramref name="portType"/> must be bitwise-configurable.
            									
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:26:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DIn(MccDaq.DigitalPortType,System.Int16@)">
            <summary>Reads a digital input port. </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to read.
            </param>
            <param name="dataValue">
            Upon return, contains the digital read from the port.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the 
            </returns>
            <comment>
            	<remarks>
            For some port types (such as 8255 ports), if the port is configured for <format type="italics"><see cref="F:MccDaq.DigitalPortDirection.DigitalOut"/></format>, this method provides readback of the last output value.
            <para>
            The size of the ports vary.
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            If it is an eight-bit port, the returned value is in the 0 - 255 range. 
            </description>
            			</item>
            			<item>
            				<description>
            If it is a four-bit port, the value is in the 0 - 15 range.
            </description>
            			</item>
            		</list>
            		<para>
            Refer to the information for your Measurement Computing device in <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn about valid <paramref name="portType"/> settings.
            </para>
            		<para>
            The following tables show which ports and bit numbers are in which 82C55 and 8536 digital chips. The most 82C55 chips on a single Measurement Computing device is eight (8). The most 8536 chips found on a Measurement Computing device is two (2).
            </para>
            		<para>
            			<image src="DIO-ports.gif"/>
            		</para>
            		<para>
            			<image src="DIO-bits.gif"/>
            		</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:25:43 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DInScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Performs multiple reads of a digital input port of a high-speed digital port on a board with a pacer clock.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to read (usually, <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.FirstPortB"/>). The selected port must be configured as an input. 
            </param>
            <param name="numPoints">
            The  number of times to read the digital input port.
            </param>
            <param name="rate">
            The number of times per second (Hz) to read the digital input port.
            <para> Upon return, contains the actual rate used in the scan.</para>
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores digital data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/> or <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/> method.
            </param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The actual sampling rate is returned to the <paramref name="rate"/> parameter because in some cases, the actual rate varies a small amount from the requested rate.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.ScanOptions"/> settings
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - If the <format type="italics">Background</format> option is not used, the <format type="bold">DInScan</format> method does not return to 
            your program until all of the requested data has been collected and returned to the 
            buffer. When the <format type="italics">Background</format> option is used, control returns immediately to 
            the next line in your program and the data collection from the digital input port into the buffer 
            continues in the background. Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method to check on the status of the 
            background operation. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method to stop the background process before it has completed. 
            <format type="bold">StopBackground</format> should be executed after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option puts the method in an endless loop. Once it transfers the required 
            number of bytes, it resets to the start of the buffer and begins again. The only 
            way to stop this operation is with <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. Normally, this option 
            is used with the <format type="italics">Background</format> option so that your program regains 
            control. 
              					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, then transfers are controlled by the signal on the 
            clock input line rather than by the internal pacer clock. Each transfer is
            triggered on the appropriate edge of the clock input signal (see the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing device). When this option is used, the <paramref name="rate"/> parameter is ignored. The transfer rate depends on the clock signal. </para>
            					</para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.WordXfer"/></format> - Normally this method writes a single (byte) port. If <format type="italics">WordXfer</format> is specified, the two adjacent ports are read on each read, and the value of both ports together is stored as the low and high byte of a single array element in the buffer.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            A transfer method cannot be specified. DMA is used.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/7/2010 10:38:17 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DInScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Performs multiple reads of a digital input port of a high-speed digital port on a board with a pacer clock.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to read (usually, <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.FirstPortB"/>). The selected port must be configured as an input. 
            </param>
            <param name="numPoints">
            The  number of times to read the digital input port.
            </param>
            <param name="rate">
            The number of times per second (Hz) to read the digital input port.
            <para> Upon return, contains the actual rate used in the scan.</para>
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores digital data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method.
            </param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:59:41 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DOut(MccDaq.DigitalPortType,System.Int16)">
            <summary>
            Writes a byte to a digital output port.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to write to.
            </param>
            <param name="dataValue">
            The  digital value to write to the port.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            If the port type is not AuxPort, you must use <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method to configure the port
            for output first.
            <para> If the port type is AuxPort, you may need to use <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method or
            <format type="bold">DConfigPort</format> to configure the bit for output first.</para><para>  Refer to the device-specific information in the the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if AuxPort
            should be configured for your product.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The size of the ports vary.
            	<list type="bullet">
            						<item>
            							<description>
            If it is an eight-bit port, the output value is in the 0 - 255 range. 
            </description>
            						</item>
            						<item>
            							<description>
            If it is a four-bit port, the output value is in the 0 - 15 range.
            </description>
            						</item>
            					</list>
            					<para>
            Refer to the information for your Measurement Computing device in <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn about valid <paramref name="portType"/> settings.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The following tables show which ports and bit numbers are in which 82C55 and 8536 digital chips. The most 82C55 chips on a single Measurement Computing device is eight (8). The most 8536 chips found on a Measurement Computing device is two (2).
            	<para>
            						<image src="DIO-ports.gif"/>
            					</para>
            					<para>
            						<image src="DIO-bits.gif"/>
            					</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:24:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DOutScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Performs multiple writes to a digital output port of a high-speed digital port on a board with a pacer clock.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to write to. Select either <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.FirstPortB"/>). The selected port must be configured as an output. 
            </param>
            <param name="count">
            The  number of times to write the digital output.
            </param>
            <param name="rate">
            The  number of times per second (Hz) to write to the port.
            <para> Upon return, contains the actual update rate used in the scan.</para>
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores digital data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method.
            </param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The actual sampling rate is returned to the <paramref name="rate"/> parameter because in some cases, the actual rate varies a small amount from the requested rate.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.ScanOptions"/> settings
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - If the <format type="italics">Background</format> option is not used, the <format type="bold">DOutScan</format> method does not return to 
            your program until all of the data has been output. When the <format type="italics">Background</format> option is used, control returns immediately to 
            the next line in your program and the transfer of the data from the buffer to the digital output port
            continues in the background. Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> method to check on the status of the 
            background operation. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method to stop the background process before it has completed. 
            <format type="bold">StopBackground</format> should be executed after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option puts the method in an endless loop. Once it transfers the required 
            number of bytes, it resets to the start of the buffer and begins again. The only 
            way to stop this operation is with <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. Normally, this option 
            is used with the <format type="italics">Background</format> option so that your program regains 
            control. 
              					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, then transfers are controlled by the signal on the 
            clock input line rather than by the internal pacer clock. Each transfer is
            triggered on the appropriate edge of the clock input signal (see the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing device). When this option is used, the <paramref name="rate"/> parameter is ignored. The transfer rate depends on the clock signal. 
            </para>
            					</para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.WordXfer"/></format> - Normally this method writes to a single (byte) port. If <format type="italics">WordXfer</format> is specified, the two adjacent ports are written to on each write, and the value of both ports together is output as the low and high byte of a single array element in the buffer.
            </para><para>ByteXfer is the default setting. Make sure you are using an array when your data is arranged in bytes. Use the <see cref="F:MccDaq.ScanOptions.WordXfer"/> option for word array transfers.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            A transfer method cannot be specified. DMA is used.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 4:00:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DOutScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Performs multiple writes to a digital output port of a high-speed digital port on a board with a pacer clock.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to write to. Select either <see cref="F:MccDaq.DigitalPortType.FirstPortA"/> or <see cref="F:MccDaq.DigitalPortType.FirstPortB"/>). The selected port must be configured as an output. 
            </param>
            <param name="count">
            The  number of times to write the digital output.
            </param>
            <param name="rate">
            The  number of times per second (Hz) to write to the port.
            <para> Upon return, contains the actual update rate used in the scan.</para>
            </param>
            <param name="memHandle">
            The  handle for the Windows buffer that stores digital data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method.
            </param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 4:01:21 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.FileAInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)">
            <summary>
            Scans a range of A/D channels and stores the samples in a disk file. 
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The number of the last A/D channel to scan. 
            </param>
            <param name="numPoints">The  number of A/D samples to collect.</param>
            <param name="rate"><para>The sample rate—in scans per second per channel—
             of the scan.</para>
            	<para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="fileName">The  name of the file used to store data. If the file does not exist, it is created. 
            </param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The maximum allowable <paramref name="highChan"/>/<paramref name="lowChan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. 
            			</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="options"/> parameter settings (<see cref="T:MccDaq.ScanOptions"/> )
            				<para><format type="italics">
            							<see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, then transfers are controlled by the signal on the 
            clock input line rather than by the internal pacer clock. Each transfer is
            triggered on the appropriate edge of the clock input signal (see the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing device). When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate depends on the clock signal.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> - If this option is specified, the sampling does not begin until the trigger condition is 
            met. On many devices, this trigger condition is programmable (refer to 
            <see cref="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)"/> method and the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on specific Measurement Computing A/D devices). 
            </para>
            					<para>On other devices, only 
            "polled gate"' triggering is supported. In this case, assuming active high operation, 
            data acquisition starts immediately if the trigger input is high. If the 
            trigger input is low, acquisition is held off unit until it goes high. Acquisition 
             continues until <paramref name="numPoints"/> samples have been taken regardless of the state 
            of the trigger input. This option is most useful if the signal is a pulse with a very 
            low duty cycle (trigger signal in TTL low state most of the time) so that triggering 
            is held off until the pulse occurs. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> - Samples are sent to the DT-Connect port if the Measurement Computing device has one.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            If an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format> error occurs,  it indicates that the data was not written to the file as fast as the data was sampled. Therefore, some data was lost. The value returned from <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method in totalCount is the number of points that were successfully collected. 
            </description>
            			</item>
            		</list>
            		<note type="caution"> An error occurs if you specify a total A/D rate beyond the capability of the Measurement Computing device. For example, if you specify <paramref name="lowChan"/> = 0, <paramref name="highChan"/> = 4 (five channels total) and <paramref name="rate"/> = 20,000, and you are using a Measurement Computing device that can convert a maximum of 50,000 samples per second per channel, you get an error. You have specified a total rate of 5*20,000 = 100,000. <para>The maximum sampling rate depends on the Measurement Computing A/D device being used.</para>
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on the sampling rates of your Measurement Computing A/D device.
            </note>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:21:33 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.FilePretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)">
            <summary>
            Waits for a trigger to occur and then returns a specified number of analog samples—including the specified number of pre-trigger samples—to a disk file. 
            </summary>
            <param name="lowChan">
            The  number of the first A/D channel to scan. 
            </param>
            <param name="highChan">
            The  number of the last A/D channel to scan. 
            </param>
            <param name="pretrigCount">The  number of samples to
            collect before the trigger occurs. Must be less than the (<paramref name="totalCount"/> – 512).
            <para>Upon return, contains the actual number of pre-trigger samples collected.</para></param>
            <param name="totalCount">Total number of A/D samples to collect. Must be greater than or equal to
            (<paramref name="pretrigCount"/> + 512).
            <para>Upon return, contains the actual number of samples collected.</para></param>
            <param name="rate">Sample rate in scans per second.	
            <para>Upon return, contains the actual sample rate in scans per second per channel.</para></param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="fileName">The  name of the file used to store data. If the file does not exist, it is created.</param>
            <param name="options"><see cref="T:MccDaq.ScanOptions"/> bit fields that set  various scanning modes. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><note type="note">This method creates a buffer in memory that can hold <paramref name="totalCount"/> + 512 integers. 
            </note>
            		<list type="bullet"><item><description><format type="bold">FilePretrig</format> waits for a trigger signal to occur on the Trigger Input. Once the trigger occurs, it returns the specified number (<paramref name="totalCount"/>) of A/D samples, including the specified number of pre-trigger points. <para>It collects the data at the specified sampling <paramref name="rate"/> and from the specified channel range (<paramref name="lowChan"/> - <paramref name="highChan"/>) of A/D channels from the specified Measurement Computing device. If the A/D device has programmable gain, then it sets the gain to the specified <paramref name="range"/>. The collected data is returned to a file.</para>
             Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if this method is supported by your device.
            </description></item>
            			<item>
            				<description>The maximum allowable <paramref name="highChan"/>/<paramref name="lowChan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. 
            </description>
            			</item>
            			<item>
            				<description>If the trigger occurs too early, fewer than the requested number of pre-trigger 
            samples are collected, and a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> error occurs. The <paramref name="pretrigCount"/> is set to indicate how many samples were actually collected. The post-trigger samples 
            are still collected, and <paramref name="totalCount"/> is set to indicate 
            how many samples were actually collected.  
            </description>
            			</item>
            			<item>
            				<description><paramref name="pretrigCount"/> must be less than <paramref name="totalCount"/> – 512. </description></item>
            			<item>
            				<description><paramref name="scanOptions"/> settings
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, then conversions are controlled by the signal on the clock input line rather than by the internal pacer clock. Each conversion is triggered on the appropriate edge of the clock input signal (refer to your Measurement Computing device user's guide). When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate depends on the clock signal.
            <para><format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> - Samples are sent to the DT-Connect port if the Measurement Computing device has one.
            </para><para> Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your particular Measurement Computing product. </para>
            					</para>
            				</description>
            			</item>
            			<item>
            				<description>
            If an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format> error occurs,  it indicates that the data was not written to the file as fast as the data was sampled. Therefore, some data was lost. The value returned from <see cref="M:MccDaq.MccService.FileGetInfo(System.String,System.Int16@,System.Int16@,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range@)"/> method in totalCount is the number of points that were successfully collected. 
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:21:06 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.FlashLED">
            <summary>Causes the LED on a Measurement Computing device to flash.
            </summary>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>11/15/2006 10:07:44 AM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.HideLoginDialog(System.Boolean)">
            <summary>
            Prevents the default login dialog from being shown when a protected function is called while not logged in.
            </summary>
            <param name="hide">
            If true, the default dialog will not be shown when a protected function is called while the user is not logged in.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Overrides <format type="italics">Insta</format>Cal's <format type="bold">Show Login Dialog </format>prompt setting.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:17:41 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DeviceLogin(System.String,System.String)">
            <summary>
            Opens a device session with a shared device.
            </summary>
            <param name="userName">
            A null-terminated string that identifies the user name used to log in to a device session.
            </param>
            <param name="password">
            A null-terminated string that identifies the password used to log in to a device session.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            If the user name or password is invalid, the <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.InvalidLogin"/></format> error is returned.
            </description>
            			</item>
            			<item>
            				<description>
            If the session is already opened by another user, the <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.SessionInUse"/></format> error is returned.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:26:04 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DeviceLogout">
            <summary>
            Releases the device session with a shared device.
            </summary>
            <lastupdated>10/15/2007 2:00:43 PM</lastupdated>
            <updatedby>Janet Suplee</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)">
            <summary>
            Returns the status about the background operation currently running.
            </summary>
            <param name="status">
            Upon return, contains a constant that indicates whether a background process is currently executing (<format type="italics"><see cref="F:MccDaq.MccBoard.Running"/></format>) or not executing (<format type="italics"><see cref="F:MccDaq.MccBoard.Idle"/></format>).
            </param>
            <param name="curCount">
            Upon return, contains the number of points that have been input or output since the <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> process started.
            </param>
            <param name="curIndex">
            Upon return, contains an index into the Windows data buffer.
            </param>
            <param name="functionType">
            	<see cref="T:MccDaq.FunctionType"/> that specifies the scan whose status information you want to retrieve.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Use the <paramref name="curCount"/> parameter to gauge how far along the operation is towards completion. Generally, <paramref name="curCount"/> returns the total number of samples transferred between the Measurement Computing device and the Windows data buffer at the time <format type="bold">GetStatus</format> was called. 
            	When you set both the <format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> and <format type="italics">Background</format> options, <paramref name="curCount"/>'s behavior depends on the Measurement Computing device model. <para>Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn how your device behaves.</para> 
            	With recent Measurement Computing DAQ designs, the <paramref name="curCount"/> parameter continually increases in increments of the packet size as Windows' circular data buffer recycles, until it reaches 2<format type="superscript">31</format>. Since the <paramref name="curCount"/> parameter is a signed integer, at 2,147,483,647 + 1, the <paramref name="curCount"/> parameter rolls back to a negative number (–2,147,483,647). The <paramref name="curCount"/> parameter resumes incrementing, eventually reaching 0 and increasing back up to 2,147,483,647. 
            	The <paramref name="curIndex"/> parameter is usually more useful than the <paramref name="curCount"/> parameter in managing data collected when you set both the <format type="italics">Continuous</format> and <format type="italics">Background</format> options. 	
            </description>
            			</item>
            			<item>
            				<description>
            The <paramref name="curIndex"/> parameter points to the start of the last completed channel scan that was transferred between the Measurement Computing device and the Windows data buffer. If no points in the buffer have been transferred, <paramref name="curIndex"/> equals –1. 
            	<para>For <format type="italics">Background</format> operations, <paramref name="curIndex"/> rolls over when the Windows data buffer is full. This rollover indicates that "new" data is now overwriting "old" data. Your goal is to process the old data before it gets overwritten. You can keep ahead of the data flow by copying the old data out of the buffer before new data overwrites it. </para>
            	The <paramref name="curIndex"/> parameter can help you access the most recently transferred data. Your application does not have to process the data exactly when it becomes available in the buffer—in fact, you should avoid doing so unless absolutely necessary. The <paramref name="curIndex"/> parameter generally increments by the packet size, but in some cases <paramref name="curIndex"/>can vary within the same scan. One instance of a variable increment is when the packet size is not evenly divisible by the number of channels.
            	You should determine the best size of the "chunks" of data that your application can most efficiently process, and then periodically check on the <paramref name="curIndex"/> value to determine when that amount of additional data has been transferred.
            <para>Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your device, particularly when using pre-trigger.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.FunctionType"/> parameter options:
            <para><format type="italics"><see cref="F:MccDaq.FunctionType.AiFunction"/></format> - Specifies analog input scans started with <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.AoFunction"/></format> - Specifies analog output scans started with <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DiFunction"/></format> - Specifies digital input scans started with <see cref="M:MccDaq.MccBoard.DInScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DoFunction"/></format> - Specifies digital output scans started with <see cref="M:MccDaq.MccBoard.DOutScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.CtrFunction"/></format> - Specifies counter background operations started with <see cref="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)"/> method or <see cref="M:MccDaq.MccBoard.CInScan(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DaqiFunction"/></format> - Specifies a synchronous input scan started with <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/>.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DaqoFunction"/></format> - Specifies a synchronous output scan started with <see cref="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.Int32,MccDaq.ScanOptions)"/>.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:19:00 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.RS485(MccDaq.OptionState,MccDaq.OptionState)">
            <exclude/>
            <lastupdated>2/21/2006 1:57:30 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)">
            <summary>
            Stops one or more subsystem background operations that are in progress for the specified Measurement Computing device. 
            </summary>
            <param name="funcType">
            	<see cref="T:MccDaq.FunctionType"/> that specifies the background operation to stop.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Use this method to stop any method that is running in the background. This includes any method that was started with the <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> option, as well as <format type="bold">CStoreOnInt</format> (which always runs in the background).
            Execute <format type="bold">StopBackground</format> after normal termination of all background functions to clear variables and flags.
            </description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.FunctionType"/> parameter options:
            <para><format type="italics"><see cref="F:MccDaq.FunctionType.AiFunction"/></format> - Specifies analog input scans started with <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.AoFunction"/></format> - Specifies analog output scans started with <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DiFunction"/></format> - Specifies digital input scans started with <see cref="M:MccDaq.MccBoard.DInScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.DoFunction"/></format> - Specifies digital output scans started with <see cref="M:MccDaq.MccBoard.DOutScan(MccDaq.DigitalPortType,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            					<para><format type="italics"><see cref="F:MccDaq.FunctionType.CtrFunction"/></format> - Specifies counter background operations started with <see cref="M:MccDaq.MccBoard.CStoreOnInt(System.Int32,MccDaq.CounterControl@,System.Int32)"/> method or <see cref="M:MccDaq.MccBoard.CInScan(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:20:27 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TIn(System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)">
            <summary>
            Reads an analog input channel, linearizes it according to the selected temperature sensor type, and returns the temperature in degrees. 
            </summary>
            <param name="chan">
            Number of the input channel to read.
            </param>
            <param name="scale">
            	<see cref="T:MccDaq.TempScale"/> that sets  the temperature scale—<format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, or <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>—used to convert the input. 
            </param>
            <param name="tempValue">
            Upon return, contains the temperature value in the selected scale.
            </param>
            <param name="options"><see cref="T:MccDaq.ThermocoupleOptions"/> bit fields that enable or disable filters. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Thermocouple resolution for <paramref name="tempValue"/> is approximately 0.25 °C, depending on scale, range and thermocouple type. RTD resolution is 0.1 °C.
            </description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.ThermocoupleOptions"/> parameter options
            <para><format type="italics"><see cref="F:MccDaq.ThermocoupleOptions.Filter"/></format> - When selected, a smoothing function is applied to temperature readings, very much like the electrical smoothing inherent in all hand-held temperature sensor instruments. This is the default. Ten samples are read from the specified channel and averaged. The average is the reading returned. Averaging removes normally distributed signal line noise.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ThermocoupleOptions.NoFilter"/></format> - When selected, the temperature readings are not smoothed, resulting in a scattering of readings around a mean.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            For Measurement Computing expansion devices, <paramref name="chan"/> is calculated using the following formula, where:
            <list type="bullet">
            						<item>
            							<description>
            "ADChan" is the A/D channel that is connected to the multiplexer.
            </description>
            						</item>
            						<item>
            							<description>
            "MuxChan" is a number ranging from 0 to 15 that specifies the channel number on a particular bank of the multiplexer.
            </description>
            						</item>
            					</list>
            					<paramref name="chan"/> = (<format type="italics">ADChan</format> * 16) + (16 + (<format type="italics">MuxChan</format> ) 
            <para>For example, you have a 16-channel Measurement Computing expansion device connected to channel 0 of an eight-channel Measurement Computing A/D device (with the channels numbered 0 -7). If you connect a thermocouple to channel 5 of the expansion device, <paramref name="chan"/> would be (0 * 16) + (16 + 5)= 0 + 21 = 21.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The Cold Junction Compensation (CJC) channel is set in the <format type="italics">Insta</format>Cal program. If you have multiple Measurement Computing expansion devices, the Universal Library (UL) applies the CJC reading to the linearization formula in the following manner:
            <list type="number">
            						<item>
            							<description>
            If you selected a CJC channel for the expansion device that contains the channel you are reading, it uses the CJC temp reading from that channel. 
            </description>
            						</item>
            						<item>
            							<description>
            If the CJC channel is not set on the expansion device that contains the channel you are reading, the UL uses the CJC reading from the next lower expansion device with a CJC channel selected.
            </description>
            						</item>
            					</list>
            For example, you have four 16-channel Measurement Computing expansion devices connected to channel 0, 1, 2 and 3 of an eight-channel Measurement Computing A/D device. You configure expansion device 1 (connected to channel 0) to have its CJC read on channel 7 of the Measurement Computing A/D device. You do not set the CJC channels on expansion devices 2, 3 and 4. Expansion devices 2, 3 and 4 all use the CJC reading from expansion device 1, and connect to channel 7 for linearization. 
            <note type="tip">
            						<list type="bullet">
            							<item>
            								<description>
            Keep the expansion devices in the same case and out of any breezes to ensure a clean CJC reading.
            </description>
            							</item>
            							<item>
            								<description>
            If a Measurement Computing expansion device is connected to an A/D device that does not have programmable gain, then the A/D device range is read from the configuration file (CB.CFG). In most cases, hardware-selectable ranges should be set to ±5 V for thermocouples and 0-10 V for RTDs. 
            <para>
            Refer to your Measurement Computing device manual or the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>. If the device does have programmable RTDs gains, the <format type="bold">TIn</format> sets the appropriate A/D range.
            </para>
            								</description>
            							</item>
            						</list>
            					</note>
            				</description>
            			</item>
            			<item>
            				<description>
            If an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.OutOfRange"/></format> or <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.OpenConnection"/></format> error occurs, the value returned is –9999.0. 
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:19:56 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TInScan(System.Int32,System.Int32,MccDaq.TempScale,System.Single@,MccDaq.ThermocoupleOptions)">
            <summary>
            Reads a range of channels from an analog input board, linearizes them according to temperature sensor type, and returns the temperatures to an array in degrees. 
            </summary>
            <param name="lowChan">
            Low mux channel of scan.
            </param>
            <param name="highChan">
            High mux channel of scan.
            </param>
            <param name="scale">
            	<see cref="T:MccDaq.TempScale"/> that sets  the temperature scale—<format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, or <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>—used to convert the input. 
            </param>
            <param name="dataBuffer">
            Upon return, an array that contains the temperature values for each channel in the scan.
            </param>
            <param name="options"><see cref="T:MccDaq.ThermocoupleOptions"/> bit fields that enable or disable filters. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Thermocouple resolution for <paramref name="dataBuffer"/> is approximately 0.25 °C, depending on scale, range and thermocouple type. RTD resolution is 0.1 °C.
            </description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.ThermocoupleOptions"/> parameter options
            <para><format type="italics"><see cref="F:MccDaq.ThermocoupleOptions.Filter"/></format> - When selected, a smoothing function is applied to temperature readings, very much like the electrical smoothing inherent in all hand-held temperature sensor instruments. This is the default. Ten samples are read from the specified channel and averaged. The average is the reading returned. Averaging removes normally distributed signal line noise.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ThermocoupleOptions.NoFilter"/></format> - When selected, the temperature readings are not smoothed, resulting in a scattering of readings around a mean.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            For Measurement Computing expansion devices, <paramref name="chan"/> is calculated using the following formula, where:
            <list type="bullet">
            						<item>
            							<description>
            "ADChan" is the A/D channel that is connected to the multiplexer.
            </description>
            						</item>
            						<item>
            							<description>
            "MuxChan" is a number ranging from 0 to 15 that specifies the channel number on a particular bank of the multiplexer.
            </description>
            						</item>
            					</list>
            					<paramref name="chan"/> = (<format type="italics">ADChan</format> * 16) + (16 + (<format type="italics">MuxChan</format> ) 
            <para>For example, you have a 16-channel Measurement Computing expansion device connected to channel 0 of an eight-channel Measurement Computing A/D device (with the channels numbered 0 -7). If you connect a thermocouple to channel 5 of the expansion device, <paramref name="chan"/> would be (0 * 16) + (16 + 5)= 0 + 21 = 21.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The Cold Junction Compensation (CJC) channel is set in the <format type="italics">Insta</format>Cal program. If you have multiple Measurement Computing expansion devices, the Universal Library (UL) applies the CJC reading to the linearization formula in the following manner:
            <list type="number">
            						<item>
            							<description>
            If you selected a CJC channel for the expansion device that contains the channel you are reading, it uses the CJC temp reading from that channel. 
            </description>
            						</item>
            						<item>
            							<description>
            If the CJC channel is not set on the expansion device that contains the channel you are reading, the UL uses the CJC reading from the next lower expansion device with a CJC channel selected.
            </description>
            						</item>
            					</list>
            For example, you have four 16-channel Measurement Computing expansion devices connected to channel 0, 1, 2 and 3 of an eight-channel Measurement Computing A/D device. You configure expansion device 1 (connected to channel 0) to have its CJC read on channel 7 of the Measurement Computing A/D device. You do not set the CJC channels on expansion devices 2, 3 and 4. Expansion devices 2, 3 and 4 all use the CJC reading from expansion device 1, and connect to channel 7 for linearization. 
            <note type="tip">
            						<list type="bullet">
            							<item>
            								<description>
            Keep the expansion devices in the same case and out of any breezes to ensure a clean CJC reading.
            </description>
            							</item>
            							<item>
            								<description>
            If a Measurement Computing expansion device is connected to an A/D device that does not have programmable gain, then the A/D device range is read from the configuration file (CB.CFG). In most cases, hardware-selectable ranges should be set to ±5 V for thermocouples and 0-10 V for RTDs. 
            <para>
            Refer to your Measurement Computing device manual or the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>. If the device does have programmable RTDs gains, the <format type="bold">TInScan</format> sets the appropriate A/D range.
            </para>
            								</description>
            							</item>
            						</list>
            					</note>
            				</description>
            			</item>
            			<item>
            				<description>
            If an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.OutOfRange"/></format> or <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.OpenConnection"/></format> error occurs, the value returned is –9999.0. 
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:19:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TInScan(System.Int32,System.Int32,MccDaq.TempScale,System.Single[],MccDaq.ThermocoupleOptions)">
            <summary>
            Reads a range of channels from an analog input board, linearizes them according to temperature sensor type, and returns the temperatures to an array in degrees. 
            </summary>
            <param name="lowChan">
            Low mux channel of scan.
            </param>
            <param name="highChan">
            High mux channel of scan.
            </param>
            <param name="scale">
            	<see cref="T:MccDaq.TempScale"/> that sets  the temperature scale-<format type="italics"><see cref="F:MccDaq.TempScale.Celsius"/></format>, <format type="italics"><see cref="F:MccDaq.TempScale.Fahrenheit"/></format>, or <format type="italics"><see cref="F:MccDaq.TempScale.Kelvin"/></format>-used to convert the input. 
            </param>
            <param name="dataBuffer">
            Upon return, an array that contains the temperature values for each channel in the scan.
            </param>
            <param name="options"><see cref="T:MccDaq.ThermocoupleOptions"/> bit fields that enable or disable filters. </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <lastupdated>5/4/2010 4:18:39 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemSetDTMode(MccDaq.DTMode)">
            <summary>
            Sets the DT-Connect mode of a Measurement Computing memory device.
            <para>
            Use this method only if the parent device is not supported by the Universal Library.
            </para>
            </summary>
            <param name="mode">
            	<see cref="T:MccDaq.DTMode"/> that sets whether to transfer data from an A/D device to a Measurement Computing memory device (<format type="italics"><see cref="F:MccDaq.DTMode.DTIn"/></format>), or to transfer data from a Measurement Computing memory device to a D/A device (<format type="italics"><see cref="F:MccDaq.DTMode.DTOut"/></format>).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<format type="bold">MemSetDTMode</format> only controls the direction of data transfer between the Measurement Computing memory device and its parent device connected to it via a DT-Connect cable.
            <para>If using the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> option for <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> or another scan method, do not use <format type="bold">MemSetDTMode</format>. The memory device mode is already set through the <format type="italics">ExtMemory</format> option. 
            </para>
            		<para>
            Use this method only if the parent device is not supported by the Universal Library. </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:10:39 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemReset">
            <summary>
            Resets a Measurement Computing memory device reference to the start of the memory. 
            </summary>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Measurement Computing memory devices are sequential devices. They contain a counter which points to the "current" word in memory. Every time a word is read or written, the counter increments to the next word.
            </description>
            			</item>
            			<item>
            				<description>
            Use this method to reset the counter back to the start of the memory. Between successive calls to the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, you should call this method so that the second <format type="bold">AInScan</format> overwrites the data from the first call. Otherwise, the data from the first <format type="bold">AInScan</format> is followed by the data from the second <format type="bold">AInScan</format> in the memory on the device.
            <para>
            Similarly, anytime you call <see cref="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)"/> method or call <see cref="M:MccDaq.MccBoard.MemWrite(System.Int16@,System.Int32,System.Int32)"/> method ,the counter is left pointing to the next memory location after the data that you read or wrote. Call <format type="bold">MemReset</format> to reset back to the start of the memory buffer before the next call to <format type="bold">AInScan</format>.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:11:39 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemRead(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Reads data from a Measurement Computing memory device into an array. 
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemRead</format> method can while a DT-Connect transfer is in progress. For example, if you call <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method to start collecting A/D data in the background to a Measurement Computing memory device (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) you cannot call <format type="bold">MemRead</format> until the <format type="bold">AInScan</format> has completed. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.</note>
            		<list type="bullet">
            			<item>
            				<description>
            To read a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics">FromHere</format> to read each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemRead</format> when working with large amounts of data.
            <para> 
            For example, to read 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard0.MemRead (dataBuffer, 0, 100000)
            DaqBoard0.MemRead (dataBuffer, FromHere, 1000000)
            DaqBoard0.MemRead (dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be read. For example, to read data sample numbers 200 through 249, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 4:12:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemRead(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Reads data from a Measurement Computing memory device into an array. 
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemRead</format> method can while a DT-Connect transfer is in progress. For example, if you call <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method to start collecting A/D data in the background to a Measurement Computing memory device (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) you cannot call <format type="bold">MemRead</format> until the <format type="bold">AInScan</format> has completed. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.</note>
            		<list type="bullet">
            			<item>
            				<description>
            To read a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics">FromHere</format> to read each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemRead</format> when working with large amounts of data.
            <para> 
            For example, to read 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard0.MemRead (dataBuffer, 0, 100000)
            DaqBoard0.MemRead (dataBuffer, FromHere, 1000000)
            DaqBoard0.MemRead (dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be read. For example, to read data sample numbers 200 through 249, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 4:12:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemWrite(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Writes data from an array into a Measurement Computing memory device. 
            </summary>
            <param name="dataBuffer">
            Contains the array of data to write to the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to write, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to write.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemWrite</format> method while a background operation (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) is accessing the Measurement Computing memory device. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.
            </note>
            		<list type="bullet">
            			<item>
            				<description>
            To write a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics">FromHere</format> to write each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemWrite</format> when working with large amounts of data.
            <para> 
            For example, to write 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard1.MemWrite (dataBuffer, 0, 100000)
            DaqBoard1.MemWrite (dataBuffer, FromHere, 1000000)
            DaqBoard1.MemWrite (dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be written. For example, to write data sample numbers 200 through 249, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:10:25 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemWrite(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes data from an array into a Measurement Computing memory device. 
            </summary>
            <param name="dataBuffer">
            Contains the array of data to write to the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to write, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to write.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:14:44 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemReadPretrig(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Reads the pre-trigger data that was collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a Measurement Computing memory device, and then rearranges the data in the correct order (pre-trigger data first, then post-trigger data).
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            The number of data samples (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemReadPretrig</format> method while a DT-Connect transfer is in progress. For example, if you call the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method to start collecting A/D data in the background to a Measurement Computing memory device (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) you cannot call <format type="bold">MemReadPretrig</format> until the <format type="bold">APretrig</format> method has completed. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.</note>
            		<list type="bullet">
            			<item>
            				<description>
            Only use <format type="bold">MemReadPretrig</format> to retrieve data that has been collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method with <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> enabled in the <paramref name="options"/> parameter. After each <format type="bold">APretrig</format> call, unload all data from the Measurement Computing memory device with this method. If any more data is sent to the memory device, then the pre-trigger data is lost.
            </description>
            			</item>
            			<item>
            				<description>
            To read a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics">FromHere</format> to read each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemRead</format> when working with large amounts of data.
            <para> 
            For example, to read 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard0.MemReadPretrig(dataBuffer, 0, 100000)
            DaqBoard0.MemReadPretrig(dataBuffer, FromHere, 1000000)
            DaqBoard0.MemReadPretrig(dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be read. For example, to read data sample numbers 200 through 249, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:12:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemReadPretrig(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Reads the pre-trigger data that was collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a Measurement Computing memory device, and then rearranges the data in the correct order (pre-trigger data first, then post-trigger data).
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            The number of data samples (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:13:51 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.InByte(System.Int32)">
            <summary>
            Reads a byte from a hardware register on a Measurement Computing device.
            </summary>
            <param name="portNum">
            Number of the Measurement Computing device register to read.
            </param>
            <returns>
            The current value of the selected register.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">InByte</format> is used to read 8-bit ports. <see cref="M:MccDaq.MccBoard.InWord(System.Int32)"/> method is used to read 16-bit ports. 
            This method was designed for use with ISA bus boards. Use with PCI bus boards is not recommended.
            </description>
            			</item>
            			<item>
            				<description>
            The registers on Measurement Computing devices are at addresses that are offsets from the base address of the device  (BaseAdr + 0, BaseAdr + 2, and so on).
            Set the <paramref name="portNum"/> parameter to the offset for the desired register. This method takes care of adding the base address to the offset, so that the device's address can be changed without changing the code.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:14:20 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.OutByte(System.Int32,System.Int32)">
            <summary>
            Writes a byte to a hardware register on a Measurement Computing device.
            </summary>
            <param name="portNum">
            Number of the Measurement Computing device register to write to.
            </param>
            <param name="portVal">
            Value to write to the register.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">OutByte</format> is used to write to 8-bit ports. <see cref="M:MccDaq.MccBoard.OutWord(System.Int32,System.Int32)"/> method is used to write to 16-bit ports. 
            This method was designed for use with ISA bus boards. Use with PCI bus boards is not recommended.
            </description>
            			</item>
            			<item>
            				<description>
            The registers on Measurement Computing devices are at addresses that are offsets from the base address of the device  (BaseAdr + 0, BaseAdr + 2, and so on).
            Set the <paramref name="portNum"/> parameter to the offset for the desired register. This method takes care of adding the base address to the offset, so that the device's address can be changed without changing the code.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:09:23 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.InWord(System.Int32)">
            <summary>
            Reads a word from a hardware register on a Measurement Computing device.
            </summary>
            <param name="portNum">
            Number of the Measurement Computing device register to read.
            </param>
            <returns>
            The current value of the selected register.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="M:MccDaq.MccBoard.InByte(System.Int32)"/> method is used to read 8-bit ports. <format type="bold">InWord</format> is used to read 16-bit ports. 
            This method was designed for use with ISA bus boards. Use with PCI bus boards is not recommended.
            </description>
            			</item>
            			<item>
            				<description>
            The registers on Measurement Computing devices are at addresses that are offsets from the base address of the device  (BaseAdr + 0, BaseAdr + 2, and so on).
            Set the <paramref name="portNum"/> parameter to the offset for the desired register. This method takes care of adding the base address to the offset, so that the device's address can be changed without changing the code.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:14:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.OutWord(System.Int32,System.Int32)">
            <summary>
            Writes a word to a hardware register on a Measurement Computing device.
            </summary>
            <param name="portNum">
            Number of the Measurement Computing device register to write to.
            </param>
            <param name="portVal">
            Value to write to the register.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="M:MccDaq.MccBoard.OutByte(System.Int32,System.Int32)"/> method is used to write to 8-bit ports. <format type="bold">OutWord</format> is used to write to 16-bit ports. 
            This method was designed for use with ISA bus boards. Use with PCI bus boards is not recommended.
            </description>
            			</item>
            			<item>
            				<description>
            The registers on Measurement Computing devices are at addresses that are offsets from the base address of the device  (BaseAdr + 0, BaseAdr + 2, and so on).
            Set the <paramref name="portNum"/> parameter to the offset for the desired register. This method takes care of adding the base address to the offset, so that the device's address can be changed without changing the code.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:09:11 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.String@,System.Int32@)">
            <exclude/>
            <lastupdated>12/31/2008 10:59:56 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetConfig(MccDaq.InfoType,System.Int32,System.Int32,System.Int32@)">
            <exclude/>
            <lastupdated>12/31/2008 10:59:51 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ToEngUnits(MccDaq.Range,System.Int16,System.Single@)">
            <summary>
            Converts an integer A/D count value to an equivalent single-precision voltage (or current) value.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the A/D voltage (or current) range.
            </param>
            <param name="dataVal">
            Integer A/D count returned from an A/D board.
            </param>
            <param name="engUnits">
            Upon return, contains the single-precision voltage (or current) value that is equivalent to <paramref name="dataVal"/>. 
            </param>
            <comment>
            	<returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            	<remarks>
            Some Measurement Computing A/D devices have programmable voltage ranges, while others set the voltage range via switches. In either case, the selected range must be passed to this method. Refer to the <see cref="T:MccDaq.Range"/> hyperlink in the <paramref name="range"/> parameter description.
            <para>Some Measurement Computing A/D devices supports different voltage and/or current ranges. Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which ranges your device supports.</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:18:52 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ToEngUnits32(MccDaq.Range,System.Int32,System.Double@)">
            <summary>
            Converts an integer count value to an equivalent double-precision voltage (or current) value.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range" crefType="Unqualified"/> that sets the A/D voltage (or current) value.
            </param>
            <param name="dataVal">
            Integer A/D count returned from the A/D board.
            </param>
            <param name="engUnits">
            Upon return, contains the double-precision voltage (or current) value that is equivalent to <format type="italics">dataVal</format>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method is typically used to obtain a voltage (or current) value from data received from an A/D with methods such as <see cref="M:MccDaq.MccBoard.AIn32(System.Int32,MccDaq.Range,System.Int32@,System.Int32)" crefType="Unqualified"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use this method for devices with a resolution of 20-bits or more.
            <para>
            The default resolution of this method is 32-bits, so if the device has neither analog input nor analog output, the result is a 32-bit conversion.
            </para>
            					<para>If the device has both analog input and analog output, the resolution and transfer function of the D/A converter on the device is used for the conversion.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:18:21 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.Int16@)">
            <summary>
            Converts a single-precision voltage (or current) in engineering units to an integer D/A count value for output to a D/A.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the D/A voltage (or current) range.
            </param>
            <param name="engUnits">
            The single-precision voltage (or current) value used to to set the D/A. Set this parameter within the range specified by the <paramref name="range"/> parameter.
            </param>
            <param name="dataVal">
            Upon return, contains an integer D/A count that is equivalent to the <paramref name="engUnits"/> parameter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            Some Measurement Computing D/A devices have programmable voltage ranges, while others set the voltage range via switches. In either case, the selected range must be passed to this method. Refer to the <see cref="T:MccDaq.Range"/> hyperlink in the <paramref name="range"/> parameter description.
            <para>
            Each Measurement Computing D/A device supports different voltage and/or current ranges. Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which ranges your device supports.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:20:23 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.Int16,System.Int16)">
            <summary>
            Selects the trigger source and sets up the parameters used to initiate analog-to-digital conversions for the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method (if the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> option is selected), <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.FilePretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> method, and <see cref="M:MccDaq.MccBoard.CInScan(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method (if the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> option is selected).
            </summary>
            <param name="trigType">
            	<see cref="T:MccDaq.TriggerType"/> that sets the type of triggering based on the external trigger source
            </param>
            <param name="lowThreshold">
            The low threshold used when the trigger input is analog.
            </param>
            <param name="highThreshold">
            The high threshold used when the trigger input is analog.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="T:MccDaq.TriggerType"/> parameter options:
            <para>
            						<image src="TrigTypes.gif"/>
            					</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="lowThreshold"/> and <paramref name="highThreshold"/> ranges depend upon the resolution of the trigger circuitry. Must be 0 to 255 for 8-bit trigger circuits, 0 to 4095 for 12-bit trigger circuits, and 0 to 65535 for 16-bit trigger circuits.
            <para>
            If you are using signed integer types, the thresholds range from –32768 to 32767 for 16-bit Measurement Computing devices, instead of from 0 to 65535. In this case, the unsigned value of 65535 corresponds to a value of –1, 65534 corresponds to –2, …, 32768 corresponds to –32768.
            </para>
            					<para>
            For most Measurement Computing devices that support analog triggering, you can pass the required trigger voltage level and the appropriate Range to <see cref="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.Int16@)"/> method to calculate the <paramref name="highThreshold"/> and <paramref name="lowThreshold"/> values. 
            </para>
            					<para>
            For some Measurement Computing devices (refer to the "Analog Input Boards" chapter in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>), you must manually calculate the threshold by first calculating the least significant bit (LSB) for a particular range for the trigger resolution of your device. You then use the LSB to find the threshold in counts based on an analog voltage trigger threshold.
            </para>
            					<para>
            To calculate the threshold, do the following:
            <list type="number">
            							<item>
            								<description>
            Calculate the LSB by dividing the full scale range (FSR) by 2<format type="superscript">resolution</format>. FSR is the entire span from – FS to +FS of your Measurement Computing device for a particular range. For example, the full scale range of ±10 V is 20 V.
            </description>
            							</item>
            							<item>
            								<description>
            Calculate how many times you need to add the LSB calculated in step 1 to the negative full scale (–FS) to reach the trigger threshold value. 
            </description>
            							</item>
            						</list>
            						<para>The maximum threshold value is 2<format type="superscript">resolution</format> – 1. The formula is shown here:</para>
            						<para><format type="monospace">Abs (–FS – threshold in volts) ÷ (LSB) = threshold in counts</format></para>
            						<para>Here are two examples that use this formula—one for 8-bit trigger resolution and one for 12-bit trigger resolution.</para>
            						<list type="bullet">
            							<item>
            								<description>
            8-bit example using the ±10 V range with a –5 V threshold:
            <para>Calculate LSB: LSB = 20 ÷ 2<format type="superscript">8</format> = 20 ÷ 256 = 0.078125</para>
            									<para>Calculate threshold: Abs(–10 – (–5)) ÷ .078125 = 5 ÷ 0.078125 = 64 (round this result if it is not an integer). A count of 64 translates to a voltage threshold of –5.0 V.</para>
            								</description>
            							</item>
            							<item>
            								<description>
            12-bit example using the ±10 V range with a +1 V threshold:
            <para>
            Calculate LSB: LSB = 20 ÷ 2<format type="superscript">12</format> = 20 ÷ 4096 = 0.00488
            </para>
            									<para>
            Calculate threshold: Abs(–10 – 1) ÷ .00488 = 11 ÷ 0.00488 = 2254 (rounded from 2254.1). A count of 2254 translates to a voltage threshold of 0.99952 V.
            </para>
            								</description>
            							</item>
            						</list>
            					</para>
            					<para>
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your Measurement Computing device.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:21:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)">
            <summary>
            Binds one or more event conditions to a user-defined callback function.
            Upon detection of an event condition, the user-defined function is invoked with Measurement Computing device- and event-specific data. 
            </summary>
            <param name="eventType">
            	<see cref="T:MccDaq.EventType"/> that sets one or more event conditions to bind to the user-defined callback function. 
            </param>
            <param name="eventParameter">
            Sets additional data needed to specify some event conditions, such as the  
            <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> event. 
            </param>
            <param name="callbackFunc">
            Specifies a delegate type that is the user-defined callback function to handle the <paramref name="eventType"/> parameter 
            type(s). 
            </param>
            <param name="userData">
            Pointer to user-defined data that is passed to the <see cref="T:MccDaq.EventCallback"/> delegate. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> detects event conditions in response to interrupts. Therefore, it is typically used with interrupt-driven processes such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.EventType"/> parameter options
            <para>You can set more than one <paramref name="eventType"/> options by bitwise <format type="italics">OR</format>ing the <paramref name="evenType"/>. If you specify an event that has not been enabled, no error occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - Generates an event that occurs when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>  input and output scans. This includes <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - For some Measurement Computing digital and counter devices, this option generates an event that occurs when a pulse at the External Interrupt pin is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, generates an event that occurs when the first trigger is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - Generates an event that occurs when the number of samples acquired during an analog input scan increases by <paramref name="eventParam"/> (<see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method parameter) samples or more. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - Generates an event that occurs upon completion or fatal error of an <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - Generates an event that occurs upon completion or fatal error of an <format type="bold">AOutScan</format>. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>For <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format>  events, <paramref name="eventParameter"/> is used to determine 
            the minimum number of samples to acquire during an analog input scan before generating the event. 
            <para>Most event conditions ignore this value. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            		
            A delegate is a data structure that refers either to a static method, or to a 
            class instance and an instance method of that class. 
            The <paramref name="callbackFunc"/> parameter needs the same parameters as the <see cref="T:MccDaq.EventCallback"/> delegate 
            declaration. 
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> cannot be called while any background operations (<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method) are active. If a background operation is in progress, when <format type="bold">EnableEvent</format> is called, it returns an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.AlreadyActive"/></format> error. You should perform a <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> before calling <format type="bold">EnableEvent</format>.
            <para>Events can be generated no faster than the user callback function can handle them. If an event type becomes multi-signaled before the event handler returns, events are merged, such that the event handler is called once per event type, and the event handler is supplied with the event data corresponding to the latest event. </para>In addition, if more than one event type becomes signaled, the event handler for each event type is called in the same order in which they are listed above.
            Events are generated while handling Measurement Computing device-generated interrupts. As a consequence, using <format type="bold">StopBackground</format> to abort background operations does not generate <format type="italics">OnEndOfAoScan</format> or <format type="italics">OnEndOfAiScan</format> events. However, the event handlers can be called directly immediately after calling <format type="bold">StopBackground</format>.
            </description>
            			</item>
            			<item>
            				<description>
            The <paramref name="userData"/> 
            parameter is <format type="italics">not</format> de-referenced by the library or its drivers; therefore, you can pass it a 
            NULL pointer.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:22:59 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.CallbackFunction,System.IntPtr)">
            <summary>
            Binds one or more event conditions to a user-defined callback function.
            Upon detection of an event condition, the user-defined function is invoked with Measurement Computing device- and event-specific data. 
            </summary>
            <param name="eventType">
            	<see cref="T:MccDaq.EventType"/> that sets one or more event conditions to bind to the user-defined callback function. 
            </param>
            <param name="eventParameter">
            Sets additional data needed to specify some event conditions, such as the  
            <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> event. 
            </param>
            <param name="callbackFunc">
            Specifies a delegate type that is the user-defined callback function to handle the <paramref name="eventType"/> parameter 
            type(s). 
            </param>
            <param name="userData">
            Pointer to user-defined data that is passed to the <see cref="T:MccDaq.EventCallback"/> delegate. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> detects event conditions in response to interrupts. Therefore, it is typically used with interrupt-driven processes such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.EventType"/> parameter options
            <para>You can set more than one <paramref name="eventType"/> options by bitwise <format type="italics">OR</format>ing the <paramref name="eventType"/>. If you specify an event that has not been enabled, no error occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - Generates an event that occurs when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>  input and output scans. This includes <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - For some Measurement Computing digital and counter devices, this option generates an event that occurs when a pulse at the External Interrupt pin is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, generates an event that occurs when the first trigger is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - Generates an event that occurs when the number of samples acquired during an analog input scan increases by <paramref name="eventParam"/> (<see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method parameter) samples or more. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - Generates an event that occurs upon completion or fatal error of an <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - Generates an event that occurs upon completion or fatal error of an <format type="bold">AOutScan</format>. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>For <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format>  events, <paramref name="eventParameter"/> is used to determine 
            the minimum number of samples to acquire during an analog input scan before generating the event. 
            <para>Most event conditions ignore this value. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            		
            A delegate is a data structure that refers either to a static method, or to a 
            class instance and an instance method of that class. 
            The <paramref name="callbackFunc"/> parameter needs the same parameters as the <see cref="T:MccDaq.EventCallback"/> delegate 
            declaration. 
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> cannot be called while any background operations (<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method) are active. If a background operation is in progress, when <format type="bold">EnableEvent</format> is called, it returns an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.AlreadyActive"/></format> error. You should perform a <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> before calling <format type="bold">EnableEvent</format>.
            <para>Events can be generated no faster than the user callback function can handle them. If an event type becomes multi-signaled before the event handler returns, events are merged, such that the event handler is called once per event type, and the event handler is supplied with the event data corresponding to the latest event. </para>In addition, if more than one event type becomes signaled, the event handler for each event type is called in the same order in which they are listed above.
            Events are generated while handling Measurement Computing device-generated interrupts. As a consequence, using <format type="bold">StopBackground</format> to abort background operations does not generate <format type="italics">OnEndOfAoScan</format> or <format type="italics">OnEndOfAiScan</format> events. However, the event handlers can be called directly immediately after calling <format type="bold">StopBackground</format>.
            </description>
            			</item>
            			<item>
            				<description>
            The <paramref name="userData"/> 
            parameter is <format type="italics">not</format> de-referenced by the library or its drivers; therefore, you can pass it a 
            NULL pointer.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:23:15 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,MccDaq.EventParameter,MccDaq.CallbackFunction,System.IntPtr)">
            <summary>
            Binds one or more event conditions to a user-defined callback function.
            Upon detection of an event condition, the user-defined function is invoked with Measurement Computing device- and event-specific data. 
            </summary>
            <param name="eventType">
            	<see cref="T:MccDaq.EventType"/> that sets one or more event conditions to bind to the user-defined callback function. 
            </param>
            <param name="eventParameter">
            Sets additional data needed to specify some event conditions, such as the <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> event.<para>For <format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> events, <see cref="T:MccDaq.EventParameter"/> sets the options for latching data on supported Measurement Computing hardware.</para>
            </param>
            <param name="callbackFunc">
            Specifies a delegate type that is the user-defined callback function to handle the <paramref name="eventType"/> parameter 
            type(s). 
            </param>
            <param name="userData">
            Pointer to user-defined data that is passed to the <see cref="T:MccDaq.EventCallback"/> delegate. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> detects event conditions in response to interrupts. Therefore, it is typically used with interrupt-driven processes such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.EventType"/> parameter options
            <para>You can set more than one <paramref name="eventType"/> options by bitwise <format type="italics">OR</format>ing the <paramref name="eventType"/>. If you specify an event that has not been enabled, no error occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - Generates an event that occurs when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>  input and output scans. This includes <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - For some Measurement Computing digital and counter devices, this option generates an event that occurs when a pulse at the External Interrupt pin is detected.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, generates an event that occurs when the first trigger is detected.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - Generates an event that occurs when the number of samples acquired during an analog input scan increases by <paramref name="eventParam"/> (<see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method parameter) samples or more. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - Generates an event that occurs upon completion or fatal error of an <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - Generates an event that occurs upon completion or fatal error of an <format type="bold">AOutScan</format>. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>For <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format>  events, <paramref name="eventParameter"/> is used to determine 
            the minimum number of samples to acquire during an analog input scan before generating the event. 
            <para>Most event conditions ignore this value. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            		
            A delegate is a data structure that refers either to a static method, or to a 
            class instance and an instance method of that class. 
            The <paramref name="callbackFunc"/> parameter needs the same parameters as the <see cref="T:MccDaq.EventCallback"/> delegate 
            declaration. 
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> cannot be called while any background operations (<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method) are active. If a background operation is in progress, when <format type="bold">EnableEvent</format> is called, it returns an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.AlreadyActive"/></format> error. You should perform a <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> before calling <format type="bold">EnableEvent</format>.
            <para>Events can be generated no faster than the user callback function can handle them. If an event type becomes multi-signaled before the event handler returns, events are merged, such that the event handler is called once per event type, and the event handler is supplied with the event data corresponding to the latest event. </para>In addition, if more than one event type becomes signaled, the event handler for each event type is called in the same order in which they are listed above.
            Events are generated while handling Measurement Computing device-generated interrupts. As a consequence, using <format type="bold">StopBackground</format> to abort background operations does not generate <format type="italics">OnEndOfAoScan</format> or <format type="italics">OnEndOfAiScan</format> events. However, the event handlers can be called directly immediately after calling <format type="bold">StopBackground</format>.
            </description>
            			</item>
            			<item>
            				<description>
            The <paramref name="userData"/> 
            parameter is <format type="italics">not</format> de-referenced by the library or its drivers; therefore, you can pass it a 
            NULL pointer.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:23:36 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DisableEvent(MccDaq.EventType)">
            <summary>
            Disables one or more event conditions, and disconnects their user-defined handlers.
            </summary>
            <param name="eventType">
            	<see cref="T:MccDaq.EventType"/> that sets one or more event conditions to disable. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description><see cref="T:MccDaq.EventType"/> parameter options
            <para>You can set more than one <paramref name="eventType"/> options by bitwise <format type="italics">OR</format>ing the <see cref="T:MccDaq.EventType"/> parameter. If you specify an event that has not been enabled, no error occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - Disables the event that occurs when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>  input and output scans. This includes <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - For some Measurement Computing digital and counter devices, this option disables the event that occurs when a pulse at the External Interrupt pin is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, disables the event that occurs when the first trigger is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - Disables the event that occurs when the number of samples acquired during an analog input scan increases by <paramref name="eventParam"/> (<see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method parameter) samples or more. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - Disables the event that occurs upon completion or fatal error of an <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - Disables the event that occurs upon completion or fatal error of an <format type="bold">AOutScan</format>. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.AllEventTypes"/></format> - Disables all events in a single call.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            For most event types, this method cannot be called while any background operations (<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method) are active. Perform a <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> before calling <format type="bold">DisableEvent</format>. 
            <para>
            However, for <format type="italics">OnExternalInterrupt</format> events, you can call <format type="bold">DisableEvent</format> while the Measurement Computing device is actively generating events.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:24:35 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.SelectSignal(MccDaq.SignalDirection,MccDaq.SignalType,MccDaq.ConnectionPin,MccDaq.SignalPolarity)">
            <summary>
            Configures timing and control signals to use specific Auxiliary or DAQ Sync connections as a source or destination.
            <note type="note">
            This method is intended for advanced users. Except for the <format type="italics"><see cref="F:MccDaq.SignalType.SyncClk"/></format> input, you can easily configure all the timing and control signals using <format type="italics">Insta</format>Cal.
            </note>
            </summary>
            <param name="direction">
            	<see cref="T:MccDaq.SignalDirection"/> that sets the direction of the signal type to assign to the connector pin (<format type="italics">
            		<see cref="F:MccDaq.SignalDirection.SignalIn"/></format> = source signal, <format type="italics">
            		<see cref="F:MccDaq.SignalDirection.SignalOut"/></format> = destination signal).  
            </param>
            <param name="signalType">
            	<see cref="T:MccDaq.SignalType"/> that sets the signal to associate with the connector pin.
            </param>
            <param name="connectionPin">
            	<see cref="T:MccDaq.ConnectionPin"/> that sets the connection pin to associate with the <paramref name="signalType"/> and <paramref name="direction"/> for the specified signal (<paramref name="signalType"/>).
            </param>
            <param name="polarity">
            	<see cref="T:MccDaq.SignalPolarity"/> that sets the polarity for the specified <paramref name="signalType"/> and <paramref name="connectionPin"/>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            For the <paramref name="signalType"/> settings of <format type="italics"><see cref="F:MccDaq.SignalType.SyncClk"/></format>, <format type="italics"><see cref="F:MccDaq.SignalType.AdcTbSrc"/></format> and <format type="italics"><see cref="F:MccDaq.SignalType.DacTbSrc"/></format>, you can also disable the external source by setting <paramref name="direction"/> = <format type="italics"><see cref="F:MccDaq.SignalDirection.Disabled"/></format> (<format type="italics">Disabled</format>=0), so that it is neither input nor output. Set it in conjunction with the <paramref name="signalType"/>, <paramref name="connectionPin"/>, and <paramref name="polarity"/> parameters using the tables in the "SignalDirection, ConnectionPin, and SignalPolarity parameter options" remark below.
            		</description>
            			</item>
            			<item>
            				<description>
            Since individual pin selection is not allowed for the DAQ-Sync connectors, set the <paramref name="connectionPin"/> parameter to <format type="italics"><see cref="F:MccDaq.ConnectionPin.DsConnector"/></format> for all DAQ-Sync pin connections. The Auxiliary input pins <format type="italics"> (<see cref="F:MccDaq.ConnectionPin.AuxIn0"/></format> through <format type="italics">
            						<see cref="F:MccDaq.ConnectionPin.AuxIn5"/>)</format> and output pins <format type="italics"> (<see cref="F:MccDaq.ConnectionPin.AuxOut0"/></format> through <format type="italics">
            						<see cref="F:MccDaq.ConnectionPin.AuxOut2"/>)</format> and settings match their corresponding Measurement Computing device pin names.
            </description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalType"/> parameter options
            <para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcConvert"/>
            						</format> - A/D conversion pulse or clock. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcGate"/>
            						</format> - External gate for A/D conversions. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcScanClk"/>
            						</format> - A/D channel scan signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcScanStop"/>
            						</format> - A/D scan completion signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcSsh"/>
            						</format> - A/D simultaneous sample and hold signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStartScan"/>
            						</format> - Start of A/D channel-scan sequence signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStartTrig"/>
            						</format> - A/D scan start trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStopTrig"/>
            						</format> - A/D stop- or pre- trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcTbSrc"/>
            						</format> - A/D pacer timebase source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.Ctr1Clk"/>
            						</format> - CTR1 clock source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.Ctr2Clk"/>
            						</format> - CTR2 clock source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacStartTrig"/>
            						</format> - D/A start trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacTbSrc"/>
            						</format> - D/A pacer timebase source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacUpdate"/>
            						</format> - D/A update signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DGnd"/>
            						</format> - Digital ground. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.SyncClk"/>
            						</format> - STC timebase signal. 
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="signalType"/> of <format type="italics"><see cref="F:MccDaq.SignalType.AdcTbSrc"/>
            					</format>and <format type="italics"><see cref="F:MccDaq.SignalType.DacTbSrc"/>
            					</format> input signals (<paramref name="direction"/> = <format type="italics"><see cref="F:MccDaq.SignalDirection.SignalIn"/>
            					</format>) can be set for either rising edge (<format type="italics"><see cref="F:MccDaq.SignalPolarity.PositiveEdge"/>
            					</format>) or falling edge (<format type="italics"><see cref="F:MccDaq.SignalPolarity.NegativeEdge"/>
            					</format>) signals. The AuxOut connections can be set to <format type="italics"><see cref="F:MccDaq.SignalPolarity.Inverted"/>
            					</format> or <format type="italics"><see cref="F:MccDaq.SignalPolarity.NonInverted"/>
            					</format> from their internal polarity. 
            		</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalDirection"/>, <see cref="T:MccDaq.ConnectionPin"/>, and <see cref="T:MccDaq.SignalPolarity"/> parameter options.
            <para>The following tables show the valid settings for the <paramref name="direction"/>, <paramref name="connectionPin"/>, and <paramref name="signalPolarity"/> parameters based on how the <paramref name="signalType"/> parameter is set.</para>
            					<para><image src="SignalDirection-SignalIn.gif"/></para>
            					<para><image src="SignalDirection-SignalOut.gif"/></para>
            					<para><image src="SignalDirection-Disabled.gif"/></para>
            					<list type="bullet">
            						<item>
            							<description>
            You can view and edit the above timing and control configuration information from <format type="italics">Insta</format>Cal. Open <format type="italics">Insta</format>Cal, click on the Measurement Computing device, and click on the <format type="bold">Configure... </format>button or menu item. If the Measurement Computing device supports DAQ Sync and Auxiliary Input/Output signal connections, an <format type="bold">Advanced Timing &amp; Control Configuration</format> button displays. Click on that button to open a form for viewing and modifying the above timing and control signals.
            </description>
            						</item>
            						<item>
            							<description>
            Except for the <format type="italics">AdcTbSrc</format>, <format type="italics">DacTbsSrc</format> and <format type="italics">SyncClk</format> signals, selecting an input signal connection does not necessarily activate it. Alternately, assigning an output signal to a connection does activate the signal upon performing the respective operation. For instance, when running an <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format>
            								<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <format type="italics">AdcConvert </format>
            								<format type="italics">SignalIn</format> selects the connection to use as an external clock to pace the A/D conversions; if <format type="bold">AInScan</format> is run without setting the <format type="italics">ExtClock</format> option, however, the selected connection is not activated and the signal at that connection is ignored. In both cases, the <format type="italics"><see cref="F:MccDaq.SignalType.AdcConvert"/></format> signal is output the connection(s) selected for the <format type="italics">AdcConvert </format>
            								<format type="italics">SignalOut</format>. Since there are no scan options for enabling the Timebase Source and the <format type="italics">SyncClk</format>, selecting an input for the A/D or D/A Timebase Source, or <format type="italics">SyncClk</format> does activate the input source for the next respective operations.
            </description>
            						</item>
            						<item>
            							<description>
            Multiple input signals can be mapped to the same <format type="italics">AuxIn</format> connection by successive calls to <format type="bold">SelectSignal</format>; however, only one connection can be mapped to each input signal. If another connection had already been assigned to an input signal, the former selection is de-assigned and the new connection is assigned.
            </description>
            						</item>
            						<item>
            							<description>
            Only one output signal can be mapped to the same <format type="italics">AuxOut</format>n connection; however, multiple connections can be mapped to the same output signal by successive calls to <see cref="M:MccDaq.MccBoard.SelectSignal(MccDaq.SignalDirection,MccDaq.SignalType,MccDaq.ConnectionPin,MccDaq.SignalPolarity)"/> method. If an output signal had already been assigned to a connection, then the former output signal is de-assigned and the new output signal is assigned to the connection.
            </description>
            						</item>
            						<item>
            							<description>
            When selecting <format type="italics"><see cref="F:MccDaq.ConnectionPin.DsConnector"/></format> for a signal, only one direction per signal type can be defined at a given time. Attempting to assign both directions of a signal to the <format type="italics">DsConnector</format> results in only the latest selection being applied. If the signal type had formerly been assigned an input direction from the <format type="italics">DsConnector</format>, assigning the output direction for that signal type results in the input signal being reassigned to its default connection.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics"><see cref="F:MccDaq.SignalType.AdcTbSrc"/></format> and <format type="italics"><see cref="F:MccDaq.SignalType.DacTbSrc"/></format> are intended to synchronize the timebase of the analog input and output pacers across two or more boards. Internal calculations of sampling and update rates assume that the external timebase has the same frequency as its internal clock. Adjust sample rates to compensate for differences in clock frequencies.
            <para>For instance, if the external timebase has a frequency of 10 MHz on a board that has a internal clock frequency of 40 MHz, the scan function samples or updates at a rate of about ¼
            the rate entered. However, while compensating for differences in external timebase and internal clock frequency, if the rate entered results in an invalid pacer count, the method returns a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.BadRate"/></format> error.</para>
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:08:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetSignal(MccDaq.SignalDirection,MccDaq.SignalType,System.Int32,MccDaq.ConnectionPin@,MccDaq.SignalPolarity@)">
            <summary>
            Gets the configured Auxiliary or DAQ Sync connection and polarity for the specified timing and control 
            signal. 
            </summary>
            <param name="direction">
            	<see cref="T:MccDaq.SignalDirection"/> that sets whether to retrieve the source signal (<format type="italics">
            		<see cref="F:MccDaq.SignalDirection.SignalIn"/></format>) or 
            the destination signal (<format type="italics">
            		<see cref="F:MccDaq.SignalDirection.SignalOut"/></format>).  
            </param>
            <param name="signalType">
            	<see cref="T:MccDaq.SignalType"/> that sets the signal connection to retrieve.
            </param>
            <param name="index">
            Indicates the connection to reference when there is more than one 
            connection associated with the output <paramref name="signalType"/>. 
            </param>
            <param name="connectionPin">
            Upon return, contains the connection (<see cref="T:MccDaq.ConnectionPin"/>) for the specified signal (<paramref name="signalType"/>).
            </param>
            <param name="signalPolarity">
            Upon return, contains the polarity (<see cref="T:MccDaq.SignalPolarity"/>) for the specified <paramref name="signalType"/> and returned <paramref name="connectionPin"/>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalType"/> parameter options
            <para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcConvert"/>
            						</format> - A/D conversion pulse or clock. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcGate"/>
            						</format> - External gate for A/D conversions. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcScanClk"/>
            						</format> - A/D channel scan signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcScanStop"/>
            						</format> - A/D scan completion signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcSsh"/>
            						</format> - A/D simultaneous sample and hold signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStartScan"/>
            						</format> - Start of A/D channel-scan sequence signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStartTrig"/>
            						</format> - A/D scan start trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcStopTrig"/>
            						</format> - A/D stop- or pre- trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.AdcTbSrc"/>
            						</format> - A/D pacer timebase source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.Ctr1Clk"/>
            						</format> - CTR1 clock source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.Ctr2Clk"/>
            						</format> - CTR2 clock source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacStartTrig"/>
            						</format> - D/A start trigger. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacTbSrc"/>
            						</format> - D/A pacer timebase source. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DacUpdate"/>
            						</format> - D/A update signal. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.DGnd"/>
            						</format> - Digital ground. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.SignalType.SyncClk"/>
            						</format> - STC timebase signal. 
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            When querying output signals, 
            increment the <paramref name="index"/> parameter until a <format type="italics">
            						<see cref="F:MccDaq.ErrorInfo.ErrorCode.BadIndex"/></format> error or 0 is returned via the connection 
            parameter to determine all the output <paramref name="connectionPin"/>s for the specified output 
            signal. The first <paramref name="connectionPin"/> is indexed by 0. 
            <para>For input signals (direction= MccDaq.SignalDirection.SignalIn), always set 
            <paramref name="index"/> to 0. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalDirection"/>, <see cref="T:MccDaq.ConnectionPin"/>, and <see cref="T:MccDaq.SignalPolarity"/> parameter options.
            <para>The following tables show the valid settings for the <paramref name="direction"/>, <paramref name="connectionPin"/>, and <paramref name="signalPolarity"/> parameters based on how the <paramref name="signalType"/> parameter is set.</para>
            					<para><image src="SignalDirection-SignalIn.gif"/></para>
            					<para><image src="SignalDirection-SignalOut.gif"/></para>
            					<para><image src="SignalDirection-Disabled.gif"/></para>
            				</description>
            			</item>
            			<item>
            				<description>
            You can view and edit the above timing and control configuration information from <format type="italics">Insta</format>Cal. Open <format type="italics">Insta</format>Cal, click on the Measurement Computing device, and click on the <format type="bold">Configure... </format>button or menu item. If the Measurement Computing device supports DAQ Sync and Auxiliary Input/Output signal connections, an <format type="bold">Advanced Timing &amp; Control Configuration</format> button displays. Click on that button to open a form for viewing and modifying the above timing and control signals.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:19:54 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from integer values to engineering unit values uses the A/D resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="Gain">
            The range to use for converting the scan data. This range should be the same as the range specified for the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="MemHandle">
            The handle to the memory buffer holding the raw data to be converted to engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="EngUnits">
            Array containing A/D input values converted to the equivalent engineering units based on the <paramref name="Gain"/> parameter. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert to engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> – <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels to return in the <paramref name="EngUnits"/> array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">WinBufToEngArray</format> is usually used to get values from a Windows buffer containing data from a method such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>, and make the data compatible with Measurement Studio waveform display controls. The converted values are transferred to the two-dimensional array based on the <paramref name="Gain"/>, <paramref name="FirstPoint"/>, <paramref name="Count"/>, and <paramref name="NumChannels"/> parameter settings.
            </description>
            			</item>
            			<item>
            				<description>
            The first dimension of the <paramref name="EngUnits"/> array should equal <paramref name="NumChannels"/>. The second dimension should equal <paramref name="Count"/>.
            </description>
            			</item>
            			<item>
            				<description>
            The index into the raw memory that holds the first sample of the first channel to be converted equals <paramref name="FirstPoint"/> * <paramref name="NumChannels"/> so that converted data always starts with the first channel specified in the scan.
            <para> 
            For example, if <paramref name="FirstPoint"/>  is 14 and <paramref name="NumChannels"/> is 8, the index of the first converted sample is 112.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 4:19:40 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range,System.IntPtr,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from integer values to engineering unit values uses the A/D resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="Gain">
            The range to use for converting the scan data. This range should be the same as the range specified for the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="MemHandle">
            The handle to the memory buffer holding the raw data to be converted to engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="EngUnits">
            Array containing A/D input values converted to the equivalent engineering units based on the <paramref name="Gain"/> parameter. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert to engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> - <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels to return in the <paramref name="EngUnits"/> array.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:20:08 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range[],System.Int32,System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from integer values to engineering unit values uses the A/D resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object
            </summary>
            <param name="GainArray">
            The array containing the A/D range values used during the analog input scan. 
            </param>
            <param name="GainCount">
            The number of elements in <paramref name="GainArray"/>. 
            </param>
            <param name="MemHandle">
            The handle to the memory buffer holding the raw data to be converted to engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="EngUnits">
            The array to hold the converted data. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert to engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> – <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels to return in the <paramref name="EngUnits"/> array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">WinBufToEngArray</format> is usually used to get values from a Windows buffer containing data from a method such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>, and make the data compatible with Measurement Studio waveform display controls. The converted values are transferred to the two-dimensional array based on the <paramref name="GainArray"/>, <paramref name="FirstPoint"/>, <paramref name="Count"/>, and <paramref name="NumChannels"/> parameter settings.
            </description>
            			</item>
            			<item>
            				<description>
            				If a gain queue was not used for the scan, <paramref name="GainArray"/> should only contain one element whose value matches the gain used during the scan.
            <para>
            If a gain queue was used during the scan, <paramref name="GainArray"/> should match the <format type="italics">gainArray</format> setting used by <see cref="M:MccDaq.MccBoard.ALoadQueue(System.Int16[],MccDaq.Range[],System.Int32)"/>.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            Set <paramref name="GainCount"/> to 1 when no gain queue is used during the scan.
            <para>
            If a gain queue was used during the scan, <paramref name="GainCount"/> should match the number of gain queue pairs used by <see cref="M:MccDaq.MccBoard.ALoadQueue(System.Int16[],MccDaq.Range[],System.Int32)"/>.
            </para>
            					<para>
            If <paramref name="GainCount"/> is greater than 1, the conversions cycle through <paramref name="GainArray"/> until <paramref name="Count"/> samples have been converted
            </para>
            					<para>
            If <paramref name="GainCount"/> equals 1, the gain is applied to all conversions. Data is returned in engineering units as a two-dimensional array.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The first dimension of the <paramref name="EngUnits"/> array should equal <paramref name="NumChannels"/>. The second dimension should equal <paramref name="Count"/>.
            </description>
            			</item>
            			<item>
            				<description>
            The index into the Windows memory buffer that holds the first sample of the first channel to be converted equals <paramref name="FirstPoint"/> * <paramref name="NumChannels"/> so that converted data always starts with the first channel specified in the scan.
            <para> 
            For example, if <paramref name="FirstPoint"/>  is 14 and <paramref name="NumChannels"/> is 8, the index of the first converted sample is 112.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:16:26 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.WinBufToEngArray(MccDaq.Range[],System.Int32,System.IntPtr,System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from integer values to engineering unit values uses the A/D resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="GainArray">
            The array containing the A/D range values used during the analog input scan. 
            </param>
            <param name="GainCount">
            The number of elements in <paramref name="GainArray"/>. 
            </param>
            <param name="MemHandle">
            The handle to the memory buffer holding the raw data to be converted to engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="EngUnits">
            The array to hold the converted data. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert to engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> - <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels to return in the <paramref name="EngUnits"/> array.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:21:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range,System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers a two-dimensional array of engineering unit values to a Windows memory buffer as integer values.
            </summary>
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from engineering unit values  to integer values uses the D/A resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="Gain">
            The range to use for converting the scan data. This range should be the same as the range specified for the <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="EngUnits">
            The array of data to convert to binary units and store in the Windows memory buffer. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="MemHandle">
            The handle to the memory buffer used to hold the raw data converted from engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert from engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> – <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels of data to be transferred from the <paramref name="EngUnits"/> array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EngArrayToWinBuf</format> is usually used to get values compatible with the <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a two-dimensional array of engineering units, such as those provided by Measurement Studio signal generation methods. The converted values are transferred to the buffer based on the <paramref name="Gain"/>, <paramref name="FirstPoint"/>, <paramref name="Count"/>, and <paramref name="NumChannels"/> parameter settings.
            </description>
            			</item>
            This method is usually used to obtain values compatible with the AOutScan() method from a 2D array of engineering unit values, such as those provided by Measurement Studio signal generation methods. The converted values are transferred to the buffer based on the gain, firstPoint, count, and numChannels parameters.
            		<item>
            				<description>
            The first dimension of the <paramref name="EngUnits"/> array should equal <paramref name="NumChannels"/>. The second dimension should equal <paramref name="Count"/>.
            </description>
            			</item>
            			<item>
            				<description>
            The index into the Windows memory buffer that holds the first sample of the first channel to be converted equals <paramref name="FirstPoint"/> * <paramref name="NumChannels"/> so that converted data always starts with the first channel specified in the scan.
            <para> 
            For example, if <paramref name="FirstPoint"/>  is 14 and <paramref name="NumChannels"/> is 8, the index of the first converted sample is 112.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:22:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range,System.Double[0:,0:],System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers a two-dimensional array of engineering unit values to a Windows memory buffer as integer values.
            </summary>
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from engineering unit values  to integer values uses the D/A resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="Gain">
            The range to use for converting the scan data. This range should be the same as the range specified for the <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="EngUnits">
            The array of data to convert to binary units and store in the Windows memory buffer. Allocate this array to be large enough to hold <paramref name="Count"/> samples.
            </param>
            <param name="MemHandle">
            The handle to the memory buffer used to hold the raw data converted from engineering units. Should equal the value returned by the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method, and is provided to the scan function for storing data.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert from engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> - <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels of data to be transferred from the <paramref name="EngUnits"/> array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:02:45 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range[],System.Int32,System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers a two-dimensional array of engineering unit values to a Windows memory buffer as integer values.
            </summary>
            <summary>
            Transfers integer values from a Windows memory buffer to a two-dimensional array as engineering units. The conversion from engineering unit values  to integer values uses the D/A resolution of the Measurement Computing device associated with the <see cref="T:MccDaq.MccBoard"/> object.
            </summary>
            <param name="GainArray">
            The array containing the D/A range values used during the analog output scan.
            </param>
            <param name="GainCount">
            The number of array elements in gainArray.  Set  to 1 when no gain queue is used. If a gain queue is used for the scan, this number should match the number of gain queue pairs defined in <see cref="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.Int32,MccDaq.ScanOptions)"/>.
            </param>
            <param name="EngUnits">
            The array of data to convert to binary units and store in the windows memory buffer. Channel numbers are stored in the first dimension, and the number of points/channel is stored in the second dimension.
            </param>
            <param name="MemHandle">
            The handle to the windows memory buffer that holds the binary data that is output. This value should be large enough to hold (<paramref name="Count"/>  x  <paramref name="NumChannels"/>) samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert from engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> – <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels of data to be transferred from the existing array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EngArrayToWinBuf</format> is usually used to get values compatible with the <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a two-dimensional array of engineering units, such as those provided by Measurement Studio signal generation methods. The converted values are transferred to the buffer based on the <paramref name="Gain"/>, <paramref name="FirstPoint"/>, <paramref name="Count"/>, and <paramref name="NumChannels"/> parameter settings.
            </description>
            			</item>
            			<item>
            				<description>
            If a gain queue is not used for the scan, <paramref name="GainArray"/> should only contain 1 element whose value matches the gain used during the scan. If a gain queue is used, <paramref name="GainArray"/> should match the value of the <paramref name="GainArray"/> parameter set with <see cref="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.Int32,MccDaq.ScanOptions)"/>.
            	If the corresponding range in the gainArray is set to NotUsed (MccDaq.Range.NotUsed), engineering unit values are returned as integer values.
            </description>
            			</item>
            			<item>
            				<description>
            The first dimension of the <paramref name="EngUnits"/> array should equal <paramref name="NumChannels"/>. The second dimension should equal <paramref name="Count"/>.
            </description>
            			</item>
            			<item>
            				<description>
            The index into the Windows memory buffer that holds the first sample of the first channel to be converted equals <paramref name="FirstPoint"/> * <paramref name="NumChannels"/> so that converted data always starts with the first channel specified in the scan.
            <para> 
            For example, if <paramref name="FirstPoint"/>  is 14 and <paramref name="NumChannels"/> is 8, the index of the first converted sample is 112.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:21:51 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EngArrayToWinBuf(MccDaq.Range[],System.Int32,System.Double[0:,0:],System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transfers a two-dimensional array of engineering unit values to a Windows memory buffer as integer values.
            </summary>
            <param name="GainArray">
            The array containing the D/A range values used during the analog output scan.
            </param>
            <param name="GainCount">
            The number of array elements in gainArray.  Set  to 1 when no gain queue is used. If a gain queue is used for the scan, this number should match the number of gain queue pairs defined in <see cref="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.Int32,MccDaq.ScanOptions)"/>.
            </param>
            <param name="EngUnits">
            The array of data to convert to binary units and store in the windows memory buffer. Channel numbers are stored in the first dimension, and the number of points/channel is stored in the second dimension.
            </param>
            <param name="MemHandle">
            The handle to the windows memory buffer that holds the binary data that is output. This value should be large enough to hold (<paramref name="Count"/>  x  <paramref name="NumChannels"/>) samples.
            </param>
            <param name="FirstPoint">
            The index into the windows memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="Count">
            The number of samples per channel to convert from engineering units. <paramref name="Count"/> should not exceed the Windows buffer size/(<paramref name="NumChannels"/> - <paramref name="FirstPoint"/>).
            </param>
            <param name="NumChannels">
            The number of channels of data to be transferred from the existing array.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:06:03 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Scans analog, digital, counter, and temperature input channels synchronously, and stores the samples in an array. 
            </summary>
            <param name="chanArray">
            Array containing values from analog/temperature input channels, digital ports, and/or counters on the Measurement Computing device.
            </param>
            <param name="chanTypeArray">
            Array of <see cref="T:MccDaq.ChannelType"/> elements, with each element defining the type of the corresponding element in <paramref name="chanArray"/>. 
            </param>
            <param name="gainArray">
            Array of <see cref="T:MccDaq.Range"/> A/D range codes. 
            </param>
            <param name="chanCount">
            Number of elements in each array parameter—<paramref name="chanArray"/>, <paramref name="chanTypeArray"/>, and <paramref name="gainArray"/>.
            </param>
            <param name="rate">
            Sets the rate (in samples per second) at which samples are taken.
            <para>Also returns the value of the actual rate used, which may be different from the requested rate because of pacer limitations.</para>
            </param>
            <param name="pretrigCount">
            Sets the number of pre-trigger samples to collect before the trigger occurs.
            Also returns the value of the actual pre-trigger count, which may be different from the requested pre-trigger count, because <paramref name="pretrigCount"/> must be a multiple of the <paramref name="chanCount"/>.
            </param>
            <param name="totalCount">
            Sets the total number of samples to collect and store in the buffer. 
            </param>
            <param name="memHandle">
            Sets the handle for the Windows buffer used to store and return data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.WinBufAlloc64Ex(System.Int32)"/> method.</param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that control various options.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            DaqInScan only works with Measurement Computing devices that support synchronous input. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability. 
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="chanTypeArray"/> parameter options
            <para><format type="italics"><see cref="F:MccDaq.ChannelType.Analog"/></format> - Analog input channel.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Digital8"/></format> - 8-bit digital input port.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Digital16"/></format> - 16-bit digital input port.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Ctr16"/></format> - 16-bit counter.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Ctr32Low"/></format> - Lower 16 bits of a 32-bit counter.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Ctr32High"/></format> - Upper 16 bits of a 32-bit counter.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.CJC"/></format> - CJC channel</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.TC"/></format> - Thermocouple channel.</para>
            					<para>
            The TC channels must immediately follow their associated CJC channels in the channel array.
            </para>
            					<para>
            Use <see cref="M:MccDaq.MccBoard.GetTCValues(System.Int16[],MccDaq.ChannelType[],System.Int32,System.Int32,System.Int32,System.Int32,MccDaq.TempScale,System.Single@)"/> to convert raw thermocouple data to data on a temperature scale (Celsius, Fahrenheit, or Kelvin). If at least one TC channel is listed in the channel array, and averaging is enabled for that channel, the averaging is applied to all of the channels in the channel array.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            A <paramref name="gainArray"/> element is only valid if the corresponding element in <paramref name="chanArray"/> is an analog input channel; otherwise, the range code for this channel is ignored.
            <para>Refer to the section covering your Measurement Computing device in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which <paramref name="gainArray"/> settings are supported. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            This method won't run in pre-trigger mode if <paramref name="pretrigCount"/> is set to zero, or if <paramref name="pretrigCount"/> is less than <paramref name="totalCount"/>. 
            <para>The <paramref name="pretrigCount"/> setting is ignored if the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> option is not specified.</para>
            					<para><paramref name="pretrigCount"/> must be evenly divisible by the number of channels being scanned (<paramref name="chanCount"/>). If it is not, this method adjusts the number (down) to the next valid value, and returns that value to the <paramref name="pretrigCount"/> parameter.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="totalCount"/> setting must be greater than the <paramref name="pretrigCount"/> setting.
            <para><paramref name="totalCount"/> must be evenly divisible by the number of channels being scanned (<paramref name="chanCount"/>). If it is not, this method adjusts the number (down) to the next valid value and returns that value to the <paramref name="totalCount"/> parameter.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="memHandle"/> buffer must be previously allocated with <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> or <see cref="M:MccDaq.MccService.WinBufAlloc32(System.Int32)"/>.
            </description>
            			</item>
            			<item>
            				<description><paramref name="options"/> parameter values
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - When the <format type="italics">Background</format> option is used, control returns immediately to 
            the next line in your program and the data collection from the counter into the buffer 
            continues in the background.
            If the <format type="italics">Background</format> option is not used, the <format type="bold">DaqInScan</format> method does not return to 
            your program until all of the requested data has been collected and returned to the 
            buffer.  Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> with <format type="italics"><see cref="F:MccDaq.FunctionType.DaqiFunction"/></format> to check on the status of the 
            background operation. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> to stop the background process before it has completed. 
            Execute <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option puts the method in an endless loop. Once it collects the required 
            number of samples, it resets to the start of the buffer and begins again. The only 
            way to stop this operation is with the <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method. Normally, you should use this setting 
            with <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> so that your program regains 
            control. </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> - If this option is specified, sampling does not begin until the trigger condition is met. You can set the trigger condition to rising edge, falling edge, or the level of the digital trigger input with the <see cref="M:MccDaq.MccBoard.DaqSetTrigger(MccDaq.TriggerSource,MccDaq.TriggerSensitivity,System.Int32,MccDaq.ChannelType,MccDaq.Range,System.Single,System.Single,MccDaq.TriggerEvent)"/> method. Refer to information on your Measurement Computing device in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, conversions are controlled by the signal on the external clock input rather than by the internal pacer clock. Each conversion is triggered on the appropriate edge of the clock input signal. When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate depends on the clock signal. Options for the board default to a transfer mode that allows the maximum conversion rate to be attained unless otherwise specified.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/7/2010 11:22:02 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Scans analog, digital, counter, and temperature input channels synchronously, and stores the samples in an array. 
            </summary>
            <param name="chanArray">
            Array containing values from analog/temperature input channels, digital ports, and/or counters on the Measurement Computing device.
            </param>
            <param name="chanTypeArray">
            Array of <see cref="T:MccDaq.ChannelType"/> elements, with each element defining the type of the corresponding element in <paramref name="chanArray"/>. 
            </param>
            <param name="gainArray">
            Array of <see cref="T:MccDaq.Range"/> A/D range codes. 
            </param>
            <param name="chanCount">
            Number of elements in each array parameter-<paramref name="chanArray"/>, <paramref name="chanTypeArray"/>, and <paramref name="gainArray"/>.
            </param>
            <param name="rate">
            Sets the rate (in samples per second) at which samples are taken.
            <para>Also returns the value of the actual rate used, which may be different from the requested rate because of pacer limitations.</para>
            </param>
            <param name="pretrigCount">
            Sets the number of pre-trigger samples to collect before the trigger occurs.
            Also returns the value of the actual pre-trigger count, which may be different from the requested pre-trigger count, because <paramref name="pretrigCount"/> must be a multiple of the <paramref name="chanCount"/>.
            </param>
            <param name="totalCount">
            Sets the total number of samples to collect and store in the buffer. 
            </param>
            <param name="memHandle">
            Sets the handle for the Windows buffer used to store and return data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.WinBufAlloc64Ex(System.Int32)"/> method.</param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that control various options.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/7/2010 11:22:52 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqSetTrigger(MccDaq.TriggerSource,MccDaq.TriggerSensitivity,System.Int32,MccDaq.ChannelType,MccDaq.Range,System.Single,System.Single,MccDaq.TriggerEvent)">
            <summary>
            Configures the trigger source used for synchronous data output.
            </summary>
            <param name="trigSource">
            External <see cref="T:MccDaq.TriggerSource"/> type used to start data acquisition.
            </param>
            <param name="trigSense">
            	<see cref="T:MccDaq.TriggerSensitivity"/>  mode used to set trigger sensitivity.
            </param>
            <param name="trigChan">
            Trigger channel. This channel must be a configured channel included in the <paramref name="chanAray"/> parameter set with <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/>. 
            </param>
            <param name="chanType">
            	<see cref="T:MccDaq.ChannelType"/> setting of the configured trigger channel. <paramref name="chanType"/> must match the configured channel type set with <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/>.
            </param>
            <param name="gain">
            Trigger channel gain code.
            </param>
            <param name="level">
            The level in engineering units to detect the trigger event. Used for input channel comparisons to detect the start trigger or stop trigger event
            </param>
            <param name="variance">
            The amount in engineering units that the trigger event can vary from the level parameter.
            </param>
            <param name="trigEvent">
            	<see cref="T:MccDaq.TriggerEvent"/> mode that sets the type of trigger event.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation. 
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            DaqSetTrigger only works with Measurement Computing devices that support synchronous input. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability. 
            </description>
            			</item>
            			<item>
            				<description>
            If the Measurement Computing device has programmable gain, the <paramref name="gain"/>  parameter should match the gain code setting of the channel configured with the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method. 
            <para><paramref name="gain"/> is ignored if <paramref name="trigChan"/> is not an analog channel.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="trigSource"/> parameter values
            <para><see cref="F:MccDaq.TriggerSource.TrigImmediate"/> - Start trigger event only. Aquisition begins immediately when <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method is invoked. No pre-trigger data acquisition with this trigger type.</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigExtTTL"/> - Start trigger event only. Acquisition begins on the selectable edge of an external TTL signal. No pre-trigger data acquisition with this trigger type.</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigAnalogHW"/> - Start trigger event only. Acquisition begins on the selected input signal criteria (above level, below level, rising edge, etc.) <paramref name="trigChan"/> must be defined as the first channel in the channel scan group. No pre-trigger data acquisition with this trigger type.</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigAnalogSW"/> - Post-trigger data acquisition begins on the selected input signal criteria (above level, below level, rising edge, etc.)</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigDigPattern"/> - Post-trigger data acquisition when a specified digital pattern is received on a specified digital port.</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigCounter"/> - Post-trigger data acquisition begins when specified counter criteria is detected.</para>
            					<para><see cref="F:MccDaq.TriggerSource.TrigScanCount"/> - Stop trigger event only. Stops collecting post-trigger data when the specified number of post-trigger scans are completed.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="trigSense"/> parameter values
            <para><see cref="F:MccDaq.TriggerSensitivity.RisingEdge"/> - Triggers when the signal goes from low to high (TTL trigger) or rises through a specified level (hardware analog, software analog, and counter).</para>
            					<para><see cref="F:MccDaq.TriggerSensitivity.FallingEdge"/> - Triggers when the signal goes from high to low (TTL trigger) or falls through a specified level (hardware analog, software analog, and counter).</para>
            					<para><see cref="F:MccDaq.TriggerSensitivity.AboveLevel"/> - Triggers when the signal is above a specified level (hardware analog, software analog, counter, and digital pattern).</para>
            					<para><see cref="F:MccDaq.TriggerSensitivity.BelowLevel"/> - Triggers when the signal is below a specified level (hardware analog, software analog, counter, and digital pattern).</para>
            					<para><see cref="F:MccDaq.TriggerSensitivity.EqLevel"/> - Triggers when the signal is equal to a specified level (hardware analog, software analog, counter, and digital pattern).</para>
            					<para><see cref="F:MccDaq.TriggerSensitivity.NeLevel"/> - Triggers when the signal is not equal to a specified level (hardware analog, software analog, counter, and digital pattern).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<paramref name="trigEvent"/> parameter values
            <para><see cref="F:MccDaq.TriggerEvent.Start"/> - Defines the conditions under which post-trigger acquisition data collection is initiated or triggered. The start trigger event can vary in complexity from starting immediately, to starting on complex channel value definitions.</para>
            					<para><see cref="F:MccDaq.TriggerEvent.Stop"/> - Signals the current data acquisition process to terminate. The stop trigger event can be as simple as that of a scan count, or as complex as involving a channel value level condition.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            Possible values of the <paramref name="level"/> parameter based on the trigger source
            <para><format type="italics">TrigAnalogHW</format> - The voltage used to define the trigger level. Trigger detection is performed in hardware.</para>
            					<para><format type="italics">TrigAnalogSW</format> - The voltage used to define the trigger level. Trigger detection is performed in software.</para>
            					<para><format type="italics">TrigDigPattern</format> - The bit pattern for the digital channel trigger. Choices are 0.0 (no bits set) or 255.0 (all bits set) for 8-bit digital ports, and 0.0 (no bits set) or 65,535.0 (all bits set) for 16-bit digital ports. </para>
            					<para><format type="italics">TrigCounter</format> - Selects either Pulse or Totalize counter values (0.0 – 65,535).</para>
            					<para><format type="italics">TrigImmediate</format> - Ignored</para>
            					<para><format type="italics">TrigScanCount</format> - Ignored</para>
            				</description>
            			</item>
            			<item>
            				<description>
            Trigger start and stop criteria based on the selected trigger type (<paramref name="trigSource"/>) and trigger sensitivity (<paramref name="trigSense"/>)
            <para><paramref name="trigSource"/> is <format type="italics">TrigAnalogHW</format> (Start trigger event only) and <paramref name="trigSense"/> is:  </para>
            					<list type="bullet">
            						<item>
            							<description>
            								<format type="italics">RisingEdge</format>: Triggers when the signal value is less than <paramref name="level"/> - <paramref name="variance"/>. Then, the signal value is greater than <paramref name="level"/>. 
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">FallingEdge</format>: Triggers when the signal value is greater than <paramref name="level"/> + <paramref name="variance"/>. Then, the signal value is less than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">AboveLevel</format>: Triggers when the signal value is greater than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">BelowLevel</format>: Triggers when the signal value is less than <paramref name="level"/>.
            </description>
            						</item>
            					</list>
            					<para><paramref name="trigSource"/> is <format type="italics">TrigAnalogSW</format> and <paramref name="trigSense"/> is:</para>
            					<list type="bullet">
            						<item>
            							<description>
            								<format type="italics">RisingEdge</format>: Triggers/stops when the signal value is less than <paramref name="level"/> - <paramref name="variance"/>. Then, the signal value is greater than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">FallingEdge</format>: Triggers/stops when the signal value is greater than <paramref name="level"/> + <paramref name="variance"/>. Then, the signal value is less than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">AboveLevel</format>: Triggers/stops when the signal value is greater than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">BelowLevel</format>: Triggers/stops when the signal value is less than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">EqLevel</format>: Triggers/stops when (<paramref name="level"/> - <paramref name="variance"/>) is less than the signal value, AND the signal value is less than (<paramref name="level"/> + <paramref name="variance"/>).
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">NeLevel</format>: Triggers/stops when the signal value is less than (<paramref name="level"/> - <paramref name="variance"/>), OR when the signal value is greater than (<paramref name="level"/> + <paramref name="variance"/>).
            </description>
            						</item>
            					</list>
            					<para><paramref name="trigSource"/> is <format type="italics">TrigDigPattern</format> and <paramref name="trigSense"/> is:</para>
            					<list type="bullet">
            						<item>
            							<description>
            								<format type="italics">AboveLevel</format>: Triggers/stops when the (digital port value AND (bitwise) <paramref name="variance"/>) is greater than (<paramref name="level"/> AND (bitwise) <paramref name="variance"/>).
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">BelowLevel</format>: Triggers/stops when the (digital port value AND (bitwise) <paramref name="variance"/>) is less than (<paramref name="level"/> AND (bitwise) <paramref name="variance"/>).
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">EqLevel</format>: Triggers/stops when the (digital port value AND (bitwise) <paramref name="variance"/>) is equal to (<paramref name="level"/> AND (bitwise) <paramref name="variance"/>).
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">NeLevel</format>: Triggers/stops when the (digital port value AND (bitwise) <paramref name="variance"/>) is not equal to (<paramref name="level"/> AND (bitwise) <paramref name="variance"/>).
            </description>
            						</item>
            					</list>
            					<para><paramref name="trigSource"/> is <format type="italics">TrigCounter</format> and <paramref name="trigSense"/> is:</para>
            					<list type="bullet">
            						<item>
            							<description>
            								<format type="italics">RisingEdge</format>: Triggers/stops when the counter channel is less than <paramref name="level"/> - <paramref name="variance"/>. Then, the counter channel is greater than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">FallingEdge</format>: Triggers/stops when the counter channel is greater than <paramref name="level"/> + <paramref name="variance"/>. Then, the counter channel is less than <paramref name="level"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">AboveLevel</format>: Triggers/stops when the counter channel is greater than <paramref name="level"/> - <paramref name="variance"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">BelowLevel</format>: Triggers/stops when the counter channel is less than <paramref name="level"/> + <paramref name="variance"/>.
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">EqLevel</format>: Triggers/stops when (<paramref name="level"/> - <paramref name="variance"/>) is less than the counter channel, AND the counter channel is less than (<paramref name="level"/> + <paramref name="variance"/>).
            </description>
            						</item>
            						<item>
            							<description>
            								<format type="italics">NeLevel</format>: Triggers/stops when the counter channel is less than (<paramref name="level"/> - <paramref name="variance"/>), OR when the counter channel is greater than (<paramref name="level"/> + <paramref name="variance"/>).
            </description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:27:18 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqSetSetpoints(System.Single[],System.Single[],System.Single[],MccDaq.SetpointFlag[],MccDaq.SetpointOutput[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Configures up to 16 detection setpoints associated with the input channels within a scan group.
            </summary>
            <param name="limitAArray">
            Array containing the limit A values for the input channels used for the setpoint. Limit A specifies a value used to determine if setpoint criteria are met.
            </param>
            <param name="limitBArray">
            Array containing the limit B values for the input channels used for the setpoint. Limit B specifies a value used to determine if setpoint criteria are met.
            </param>
            <param name="reserved">
            Reserved for future use.
            </param>
            <param name="setpointFlagsArray">
            	Array of <see cref="T:MccDaq.SetpointFlag"/> elements, with each element defining a setpoint criteria.
            </param>
            <param name="setpointOutputArray">
            Array of <see cref="T:MccDaq.SetpointOutput"/> elements, with each element defining the output criteria.
            </param>
            <param name="output1Array">
            Array containing the output channel values used for the setpoint.
            </param>
            <param name="output2Array">
            Array containing the output channel values used for the setpoint.
            </param>
            <param name="outputMask1Array">
            Array containing the output masks for output value 1 (FIRSTPORTC only).
            </param>
            <param name="outputMask2Array">
            Array containing the output masks for output value 2 (FIRSTPORTC only).
            </param>
            <param name="setpointCount">
            Number of setpoints (from 0 to 16) to configure. Set to 0 to disable setpoints. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            DaqSetSetpoints only works with Measurement Computing devices that support synchronous input. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability. 
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="italics">setpointFlag </format> parameter values
            <para>
            						<see cref="F:MccDaq.SetpointFlag.EqualLimitA"/> - Setpoint criteria, where the input channel is equal to limit A.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.GreaterThanLimitB"/> - Setpoint criteria, where the input channel is greater than limit B.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.Hysteresis"/> - Setpoint criteria. If the input channel is greater than limit A, then output value 1. If the input channel is less than limit B, then output value 2.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.InsideLimits"/> - Setpoint criteria, where the input channel is greater than limit A and less than limit B.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.LessThanLimitA"/> - Setpoint criteria, where the input channel is less than limit A.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.OutsideLimits"/> - Setpoint criteria, where the input channel is less than limit A and greater than limit B.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.UpdateOnTrueAndFalse"/> - Setpoint criteria. If the setpoint criteria is met then output value 1.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointFlag.UpdateOnTrueOnly"/> - Setpoint criteria. If the setpoint criteria is met then output value 1. If the setpoint criteria is not met then output value 2.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="italics">setpointOutput</format> parameter values
            <para>
            						<see cref="F:MccDaq.SetpointOutput.DAC0"/> - Output to DAC0 when the criteria is met. The Measurement Computing device must have a DAC0 signal.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.DAC1"/> - Output to DAC1 when the criteria is met. The Measurement Computing device must have a DAC1 signal.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.DAC2"/> - Output to DAC2 when the criteria is met. The Measurement Computing device must have a DAC2 signal.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.DAC3"/> - Output to DAC3 when the criteria is met. The Measurement Computing device must have a DAC3 signal.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.FirstPortC"/> - Output to FIRSTPORTC when the criteria is met.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.None"/> - Performs no outputs.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.TMR0"/> - Output to timer 0 when the criteria is met.
            </para>
            					<para>
            						<see cref="F:MccDaq.SetpointOutput.TMR1"/> - Output to timer 1 when the criteria is met.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:27:38 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.Int32,MccDaq.ScanOptions)">
            <summary>
            Outputs data synchronously to analog output channels and digital output ports.
            </summary>
            <param name="chanArray">
            Array containing analog channel values and/or digital port values from a Measurement Computing device.
            </param>
            <param name="chanTypeArray">
            Array of <see cref="T:MccDaq.ChannelType"/> elements, with each element defining the type of the corresponding element in <paramref name="chanArray"/>. 
            </param>
            <param name="gainArray">
            Array of D/A <see cref="T:MccDaq.Range"/> codes. 
            </param>
            <param name="chanCount">
            Number of elements in each array parameter — <paramref name="chanArray"/>, <paramref name="chanTypeArray"/>, and <paramref name="gainArray"/>.
            </param>
            <param name="rate">
            Sets the rate (in samples per second) at which samples are taken.
            <para>Also returns the value of the actual rate used, which may be different from the set rate because of pacer limitations.</para>
            </param>
            <param name="count">
            Sets the total number of values to output. 
            <para>Also returns the value of the actual count, which may be different from the set <paramref name="count"/> because <paramref name="count"/> must be a multiple of the channel count.</para>
            </param>
            <param name="memHandle">
            Sets the handle for the Windows buffer used to output the data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.WinBufAlloc64Ex(System.Int32)"/> method, and data values loaded, for example using <see cref="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)"/>.</param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that control various options.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            DaqOutScan only works with Measurement Computing devices that support synchronous output. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which devices have this capability. 
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="chanTypeArray"/> parameter options
            <para><format type="italics"><see cref="F:MccDaq.ChannelType.Analog"/></format> - Analog output channel.</para>
            					<para><format type="italics"><see cref="F:MccDaq.ChannelType.Digital16"/></format> - 16-bit digital output port (FirstPortA only).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            A <paramref name="gainArray"/> element is only valid if the corresponding element in <paramref name="chanArray"/> is an analog output channel; otherwise, the range code for this channel is ignored.
            <para>This parameter is also ignored if the Measurement Computing device does not have programmable gain. In this case, it can be set to <format type="italics">null</format>.</para>
            					<para>Refer to the section covering your Measurement Computing device in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which <paramref name="gainArray"/> settings are supported. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="memHandle"/> buffer must be previously allocated with <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/>, and loaded with values to output (for example, using <see cref="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)"/>.)
            </description>
            			</item>
            			<item>
            				<description><paramref name="options"/> parameter values
            				<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> - When the <format type="italics">Background</format> option is used, the output operations begin running in the background, and control returns immediately 
            to the next line in your program.
            If the <format type="italics">Background</format> option is not used, the <format type="bold">DaqInScan</format> method does not return to 
            your program until all of the requested data has been collected and returned to the 
            buffer.  Use <see cref="M:MccDaq.MccBoard.GetStatus(System.Int16@,System.Int32@,System.Int32@,MccDaq.FunctionType)"/> with <format type="italics"><see cref="F:MccDaq.FunctionType.DaqoFunction"/></format>.  to check on the status of the 
            background operation. Use <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> with <format type="italics">DaqoFunction</format>.  to stop the background process before it has completed. 
            Execute <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> with <format type="italics">DaqoFunction</format>.  after normal termination of all background 
            functions in order to clear variables and flags. 
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.Continuous"/></format> - This option puts the method in an endless loop. Once it outputs the specified number (<paramref name="count"/> of values,  it resets to the start of the buffer and begins again. The only 
            way to stop this operation is with the <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> method with <format type="italics">DaqoFunction</format>. Normally, you should use this setting 
            with <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> so that your program regains 
            control. </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ExtClock"/></format> - If this option is used, conversions are controlled by the signal on the external clock input rather than by the internal pacer clock. Each conversion is triggered on the appropriate edge of the clock input signal. When this option is used, the <paramref name="rate"/> parameter is ignored. The sampling rate depends on the clock signal. Options for the board default to a transfer mode that allows the maximum conversion rate to be attained unless otherwise specified.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ADCClock"/></format> - If this option is used, the data output operation is paced by the ADC clock.
            </para>
            					<para><format type="italics"><see cref="F:MccDaq.ScanOptions.ADCClockTrig"/></format> - If this option is used, the data output operation is triggered when the ADC clock starts.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.ScanOptions.NonStreamedIO"/></format> - This option allows non-streamed data output to be generated to the specified output channel.
            </para>
            					<para>
            In this mode, the aggregate size of data output buffer must be less than or equal to the size of the internal data output FIFO on the Measurement Computing device. This allows the data output buffer to be loaded into the device’s internal output FIFO. 
            </para>
            					<para>
            Once the sample updates are transferred (or downloaded) to the device, the device is responsible for outputting the data. While the size is limited, and the output buffer cannot be changed once the output is started, this mode has the advantage of not having to periodically feed output data through the program to the device for the data output to continue.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/13/2010 1:31:17 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DaqOutScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32,System.IntPtr,MccDaq.ScanOptions)">
            <summary>
            Outputs data synchronously to analog output channels and digital output ports.
            </summary>
            <param name="chanArray">
            Array containing analog channel values and/or digital port values from a Measurement Computing device.
            </param>
            <param name="chanTypeArray">
            Array of <see cref="T:MccDaq.ChannelType"/> elements, with each element defining the type of the corresponding element in <paramref name="chanArray"/>. 
            </param>
            <param name="gainArray">
            Array of D/A <see cref="T:MccDaq.Range"/> codes. 
            </param>
            <param name="chanCount">
            Number of elements in each array parameter - <paramref name="chanArray"/>, <paramref name="chanTypeArray"/>, and <paramref name="gainArray"/>.
            </param>
            <param name="rate">
            Sets the rate (in samples per second) at which samples are taken.
            <para>Also returns the value of the actual rate used, which may be different from the set rate because of pacer limitations.</para>
            </param>
            <param name="count">
            Sets the total number of values to output. 
            <para>Also returns the value of the actual count, which may be different from the set <paramref name="count"/> because <paramref name="count"/> must be a multiple of the channel count.</para>
            </param>
            <param name="memHandle">
            Sets the handle for the Windows buffer used to output the data. This buffer must have been previously allocated with the <see cref="M:MccDaq.MccService.WinBufAllocEx(System.Int32)"/>, <see cref="M:MccDaq.MccService.WinBufAlloc32Ex(System.Int32)"/>, or <see cref="M:MccDaq.MccService.WinBufAlloc64Ex(System.Int32)"/> method, and data values loaded, for example using <see cref="M:MccDaq.MccService.WinArrayToBuf(System.Int16@,System.Int32,System.Int32,System.Int32)"/>.</param>
            <param name="options">
            	<see cref="T:MccDaq.ScanOptions"/> bit fields that control various options.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/13/2010 1:31:46 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetTCValues(System.Int16[],MccDaq.ChannelType[],System.Int32,System.Int32,System.Int32,System.Int32,MccDaq.TempScale,System.Single@)">
            <summary>
            Converts raw thermocouple data collected using the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method to data on a temperature scale.
            </summary>
            <param name="chanArray">
            Array containing channel values.
            </param>
            <param name="chanTypeArray">
            Array containing channel types.
            </param>
            <param name="chanCount">
            Number of elements in <paramref name="chanArray"/>.
            </param>
            <param name="memHandle">
            Memory handle returned by  the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method  when the buffer was allocated. The buffer should contain the data to convert.
            </param>
            <param name="firstPoint">
            Index into the raw data memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="count">
            Number of samples per channel to convert to engineering units.
            </param>
            <param name="scale">
            Temperature scale used to convert the input. Choices are Celsius, Fahrenheit, or Kelvin.
            </param>
            <param name="tempValArray">
            Array to hold converted data. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Valid channel values are analog and temperature input channels and digital ports. <paramref name="chanArray"/> must match the channel array used with the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item>
            				<description>
            Each element in <paramref name="chanTypeArray"/> defines the corresponding element type in  <paramref name="chanArray."/>
            					<para><paramref name="chanTypeArray"/>  must match the channel type settings used with the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The index into the raw memory is <paramref name="firstPoint"/> x  <paramref name="chanCount"/> so that converted data always starts with the first channel specified in the scan. 
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="count"/> should not exceed the Windows buffer size divided by <paramref name="chanCount"/> – <paramref name="firstPoint"/>.
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="tempValArray"/>must be allocated large enough to hold <paramref name="count"/> samples x the number of temperature channels.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:18:22 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetTCValues(System.Int16[],MccDaq.ChannelType[],System.Int32,System.IntPtr,System.Int32,System.Int32,MccDaq.TempScale,System.Single[])">
            <summary>
            Converts raw thermocouple data collected using the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method to data on a temperature scale.
            </summary>
            <param name="chanArray">
            Array containing channel values.
            </param>
            <param name="chanTypeArray">
            Array containing channel types.
            </param>
            <param name="chanCount">
            Number of elements in <paramref name="chanArray"/>.
            </param>
            <param name="memHandle">
            Memory handle returned by  the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method  when the buffer was allocated. The buffer should contain the data to convert.
            </param>
            <param name="firstPoint">
            Index into the raw data memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="count">
            Number of samples per channel to convert to engineering units.
            </param>
            <param name="scale">
            Temperature scale used to convert the input. Choices are Celsius, Fahrenheit, or Kelvin.
            </param>
            <param name="tempValArray">
            Array to hold converted data. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:11:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetTCValues(System.Int16[],MccDaq.ChannelType[],System.Int32,System.Int32,System.Int32,System.Int32,MccDaq.TempScale,System.Double[0:,0:])">
            <summary>
            Converts raw thermocouple data from a Windows global memory buffer collected using the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method to to a one-dimensional or-two-dimensional array of data on a temperature scale.
            </summary>
            <param name="chanArray">
            Array containing channel values.
            </param>
            <param name="chanTypeArray">
            Array containing channel types.
            </param>
            <param name="chanCount">
            Number of elements in <paramref name="chanArray"/>.
            </param>
            <param name="memHandle">
            Memory handle returned by  the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method  when the buffer was allocated. The buffer should contain the data to convert.
            </param>
            <param name="firstPoint">
            Index into the raw data memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="count">
            Number of samples per channel to convert to engineering units.
            </param>
            <param name="scale">
            Temperature scale used to convert the input (Celsius, Fahrenheit, or Kelvin.)
            </param>
            <param name="tempValArray">
            Array to hold converted data. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            Valid channel values are analog and temperature input channels and digital ports. <paramref name="chanArray"/> must match the channel array used with the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item>
            				<description>
            Each element in <paramref name="chanTypeArray"/> defines the corresponding element type in  <paramref name="chanArray."/>
            					<para><paramref name="chanTypeArray"/>  must match the channel type settings used with the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The index into the raw memory is <paramref name="firstPoint"/> x  <paramref name="chanCount"/> so that converted data always starts with the first channel specified in the scan. 
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="count"/> should not exceed the Windows buffer size divided by <paramref name="chanCount"/> – <paramref name="firstPoint"/>.
            </description>
            			</item>
            			<item>
            				<description>
            					<paramref name="tempValArray"/> must be allocated large enough to hold <paramref name="count"/> samples x the number of temperature channels.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:18:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetTCValues(System.Int16[],MccDaq.ChannelType[],System.Int32,System.IntPtr,System.Int32,System.Int32,MccDaq.TempScale,System.Double[0:,0:])">
            <summary>
            Converts raw thermocouple data from a Windows global memory buffer collected using the <see cref="M:MccDaq.MccBoard.DaqInScan(System.Int16[],MccDaq.ChannelType[],MccDaq.Range[],System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,MccDaq.ScanOptions)"/> method to to a one-dimensional or-two-dimensional array of data on a temperature scale.
            </summary>
            <param name="chanArray">
            Array containing channel values.
            </param>
            <param name="chanTypeArray">
            Array containing channel types.
            </param>
            <param name="chanCount">
            Number of elements in <paramref name="chanArray"/>.
            </param>
            <param name="memHandle">
            Memory handle returned by  the <see cref="M:MccDaq.MccService.WinBufAlloc(System.Int32)"/> method  when the buffer was allocated. The buffer should contain the data to convert.
            </param>
            <param name="firstPoint">
            Index into the raw data memory buffer that holds the first sample of the first channel to convert.
            </param>
            <param name="count">
            Number of samples per channel to convert to engineering units.
            </param>
            <param name="scale">
            Temperature scale used to convert the input (Celsius, Fahrenheit, or Kelvin.)
            </param>
            <param name="tempValArray">
            Array to hold converted data. 
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation
            </returns>
            <lastupdated>5/4/2010 4:09:12 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.VIn(System.Int32,MccDaq.Range,System.Single@,MccDaq.VInOptions)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a voltage value.
            </summary>
            <param name="channel">
            The number of the A/D chanel to read.
            </param>
            <param name="range">
            A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. 
            </param>
            <param name="dataValue">
            Upon return, contains the voltage value read from the channel on the Measurement Computing device.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The maximum allowable channel number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. 
            			</description>
            			</item>
            			<item>
            				<description>
            If the selected A/D device does not have a programmable gain feature,
            the <paramref name="range"/> parameter is ignored. <para>If the A/D device does have programmable gain, set the
            <paramref name="range"/> parameter to the desired A/D range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported A/D ranges of each Measurement Computing A/D device.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.VInOptions"/> parameter values
            <para><format type="italics">Default</format> - Reserved for future use</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:17:45 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.VIn32(System.Int32,MccDaq.Range,System.Double@,MccDaq.VInOptions)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a double-precision voltage value.
            </summary>
            <param name="channel">
            The number of the A/D channel to read.
            </param>
            <param name="range">
            A <see cref="T:MccDaq.Range" crefType="Unqualified"/> that sets the gain on the A/D board.
            </param>
            <param name="dataValue">
            Upon return, contains the value in volts read from the A/D channel on the Measurement Computing device.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="T:MccDaq.Range" crefType="Unqualified"/>
            <lastupdated>12/30/2008 4:21:05 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.VOut(System.Int32,MccDaq.Range,System.Single,MccDaq.VOutOptions)">
            <summary>
            Sets the value of a D/A output.
            </summary>
            <param name="channel">
            D/A channel number.
            </param>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the D/A range code.
            </param>
            <param name="dataValue">
            The voltage value to set the D/A to.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The maximum allowable channel number depends on the type of D/A device being used. 
            			</description>
            			</item>
            			<item>
            				<description>
            If the selected D/A device does not have a programmable voltage range feature,
            the <paramref name="range"/> parameter is ignored. <para>If the D/A device does have programmable voltage ranges, set the
            <paramref name="range"/> parameter to the desired range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported D/A ranges of each Measurement Computing device. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="T:MccDaq.VOutOptions"/> parameter values
            <para><format type="italics">Default</format> - reserved for future use.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:17:21 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ACalibrateData(System.Int32,MccDaq.Range,System.UInt16@)">
            <summary>
            Calibrates the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from devices with real-time software
            calibration when the real-time calibration has been turned off. The <format type="bold">AInScan</format> method
            returns either raw A/D data or calibrated data, depending on whether or not the
            <format type="italics"><see cref="F:MccDaq.ScanOptions.NoCalibrateData"/></format> option was used.
            </summary>
            <param name="numPoints">
            The  number of samples to calibrate.
            </param>
            <param name="range">
            The  programmable gain/range used when the data was collected.
            </param>
            <param name="adData">
            Upon return, contains the calibrated data.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            When collecting data using <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method with the <format type="italics">NoCalibrateData</format> option, use this method
            to calibrate the data after it is collected.
            <list type="bullet">
            			<item>
            				<description>
            The name of array must match that used in <format type="bold">AInScan</format>.
            </description>
            			</item>
            			<item>
            				<description>
            Applying software calibration factors in real-time on a per-sample basis eats up
            machine cycles. If your CPU is slow, or if processing time is at a premium, withhold
            calibration until after the acquisition run is complete. Turning off real-time software
            calibration saves CPU time during a high-speed acquisition run.
            </description>
            			</item>
            			<item>
            				<description>
            Processor speed is a factor for DMA transfers and for real-time software calibration.
            Processors of less than 150 megahertz (MHz) Pentium class may impose speed limits
            below the capability of the Measurement Computing device (refer to your Measurement Computing device manual or the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>). If your
            processor is less than a 150 MHz Pentium, and you need an acquisition speed in excess
            of 200 kilohertz (kHz), use the <format type="italics">NoCalibrateData</format> option to a turn off real-time software
            calibration and save CPU time. After the acquisition is run, calibrate the data with
            <format type="bold">ACalibrateData</format>.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/4/2010 1:49:23 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ACalibrateData(System.Int32,MccDaq.Range,System.UInt16[])">
            <summary>
            Calibrates the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from devices with real-time software
            calibration when the real-time calibration has been turned off. The <format type="bold">AInScan</format> method
            returns either raw A/D data or calibrated data, depending on whether or not the
            <format type="italics"><see cref="F:MccDaq.ScanOptions.NoCalibrateData"/></format> option was used.
            </summary>
            <param name="numPoints">
            The  number of samples to calibrate.
            </param>
            <param name="range">
            The  programmable gain/range used when the data was collected.
            </param>
            <param name="adData">
            Upon return, contains the calibrated data.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/4/2010 3:22:10 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertData(System.Int32,System.UInt16@,System.UInt16@)">
            <summary>
            Converts the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method into 12-bit A/D values. The <format type="bold">AInScan</format>
            method returns either raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> option is used. For many 12-bit A/D boards, the raw data is
            a 16-bit value that contains a 12-bit A/D value and a 4-bit channel tag (refer to your Measurement Computing device manual or the UL Help. The converted data consists of just the 12-bit A/D value.
            </summary>
            <param name="numPoints">
            The  number of samples to convert.
            </param>
            <param name="adData">
            The  pointer to the start of the data array.
            </param>
            <param name="chanTags">
            Upon return, contains the pointer to the start of the channel tag array (if available).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            When collecting data using <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method without the <format type="italics">ConvertData</format> option, use this method
            to convert the data after it has been collected. There are cases where the <format type="italics">ConvertData</format>
            option is not allowed. For example, if you are using both the <format type="italics"><see cref="F:MccDaq.ScanOptions.DmaIo"/></format> and <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>
            options with <format type="bold">AInScan</format>. In those cases, this method should be used to convert the
            data after the data collection is complete.
            <para>For some boards, each raw data point consists of a 12-bit A/D value with a 4-bit
            channel number. This method pulls each data point apart and puts the A/D value into
            the adData array and the channel number into the <paramref name="chanTags"/> array.</para>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/7/2010 10:24:58 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertData(System.Int32,System.UInt16[],System.UInt16[])">
            <summary>
            Converts the raw data collected by <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method into 12-bit A/D values. The <format type="bold">AInScan</format>
            method returns either raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format> option is used. For many 12-bit A/D boards, the raw data is
            a 16-bit value that contains a 12-bit A/D value and a 4-bit channel tag (refer to your Measurement Computing device manual or the UL Help. The converted data consists of just the 12-bit A/D value.
            </summary>
            <param name="numPoints">
            The  number of samples to convert.
            </param>
            <param name="adData">
            The  pointer to the start of the data array.
            </param>
            <param name="chanTags">
            Upon return, contains the pointer to the start of the channel tag array (if available).
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <lastupdated>5/7/2010 10:25:25 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.UInt16@,System.UInt16@)">
            <summary>
            Converts the raw data collected by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. 
            </summary>
            <param name="preTrigCount">
            The  number of pre-trigger samples to convert. This number must match the number returned by the <paramref name="preTrigCount"/>
            parameter in the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="totalCount">
            The  total number of samples to convert.
            </param>
            <param name="adData">The  pointer to the data array. Array name must match the name of the array used with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="chanTags">Upon return, contains the pointer to the start of the channel tag array (if available). 
            Returns NULL if using a 16-bit board or if channel tags are not available.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            		<list type="bullet"><item><description>The <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method returns either
            raw A/D data or converted data, depending on whether or not the <format type="italics"><see cref="F:MccDaq.ScanOptions.ConvertData"/></format>option
            was used. The raw data is not in the correct order as it is collected. After the
            data collection is completed, it must be rearranged into the correct order. This
            method also orders the data, starting with the first pretrigger data point and ending
            with the last post-trigger point.</description></item>
            			<item>
            				<description>
            On some 12-bit A/D boards, each raw data point consists of a 12-bit A/D value with a
            4-bit channel number. This method pulls each data point apart and puts the A/D value
            into the <paramref name="adData"/> and the channel number into the <paramref name="chanTags"/> array.
            <para>Upon returning from <format type="bold">AConvertPretrigData</format>, the <paramref name="adData"/> array contains only 12-bit A/D
            data.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            Use this method with 16-bit A/D boards only to order the data. No channel tags are returned.
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">VB .Net programmers:</format> After the data is collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, it must be copied to a BASIC array with
            the <see cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/> method. 
            <para>The entire array must be copied, which includes the extra 512 samples
            needed by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <seealso cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/>
            <lastupdated>5/7/2010 10:33:21 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AConvertPretrigData(System.Int32,System.Int32,System.UInt16[],System.UInt16[])">
            <summary>
            Converts the raw data collected by the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. 
            </summary>
            <param name="preTrigCount">
            The  number of pre-trigger samples to convert. This number must match the number returned by the <paramref name="preTrigCount"/>
            parameter in the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="totalCount">
            The  total number of samples to convert.
            </param>
            <param name="adData">The  pointer to the data array. Array name must match the name of the array used with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </param>
            <param name="chanTags">Upon return, contains the pointer to the start of the channel tag array (if available). 
            Returns NULL if using a 16-bit board or if channel tags are not available.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <seealso cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/>
            <seealso cref="M:MccDaq.MccService.WinBufToArray(System.Int32,System.Int16@,System.Int32,System.Int32)"/>
            <lastupdated>5/7/2010 10:33:40 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AIn(System.Int32,MccDaq.Range,System.UInt16@)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a 16-bit integer value.
            </summary>
            <param name="channel">
            The  number of the A/D channel to read. 
            </param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. </param>
            <param name="dataValue">Upon return, contains the A/D value read from the channel on the Measurement Computing device.
            </param>
            <returns>
            	An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            The maximum allowable channel number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. <para>Expansion boards
            are also supported by this method, so this parameter can be set to up to 272.
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on specific Measurement Computing expansion devices.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            If the selected A/D device does not have a programmable gain feature,
            the <paramref name="range"/> parameter is ignored. <para>If the A/D device does have programmable gain, set the
            <paramref name="range"/> parameter to the desired A/D range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported A/D ranges of each Measurement Computing A/D device.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:40:50 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AIn32(System.Int32,MccDaq.Range,System.UInt32@,System.Int32)">
            <summary>
            Reads an A/D channel from a Measurement Computing A/D device, and returns a 32-bit integer value.
            </summary>
            <param name="channel">
            The number of the A/D channel to read.
            </param>
            <param name="range">
            A <see cref="T:MccDaq.Range" crefType="Unqualified"/> that sets the gain on the A/D board.
            </param>
            <param name="dataValue">
            Upon return, contains the A/D value read from the channel.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <seealso cref="T:MccDaq.Range" crefType="Unqualified"/>
            <lastupdated>5/7/2010 10:34:17 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.AOut(System.Int32,MccDaq.Range,System.UInt16)">
            <summary>
            Sets the  value of a D/A output.
            </summary>
            <param name="channel">
            D/A channel number. The maximum allowable channel depends on the type of D/A device being used.
            </param>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the D/A range code. The output range of the D/A channel can be set to any of those supported
            by the Measurement Computing device. If the D/A device does not have programmable ranges, then this parameter
            is ignored.
            </param>
            <param name="dataValue">
            Value to set D/A to. Must be in the range 0 - <format type="italics">N</format> where <format type="italics">N</format> is the value 2<format type="superscript">Resolution</format>
            – 1 of the converter. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            <comment>
            	<remarks>
            Simultaneous update devices: If you set the simultaneous update jumper for simultaneous
            operation, use <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method for simultaneous update of multiple channels. <format type="bold">AOut</format> always
            writes the D/A data, then reads the D/A, which causes the D/A output to be updated.
            </remarks>
            </comment>
            <lastupdated>5/7/2010 10:34:53 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ATrig(System.Int32,MccDaq.TriggerType,System.UInt16,MccDaq.Range,System.UInt16@)">
            <summary>
            Waits for a specified analog input channel to go above or below a specified value.
            </summary>
            <param name="chan">Set the A/D channel number. 
            </param>
            <param name="trigType">
            	A <see cref="T:MccDaq.TriggerType"/> that sets whether to
            wait for the analog input to be above or below <paramref name="trigValue"/>.
            </param>
            <param name="trigValue">The  threshold value that all A/D values are compared to. Must be in the range 0 -
            4095 for 12-bit A/D boards, or 0-65,535 for 16-bit A/D boards.
            </param>
            <param name="range">A <see cref="T:MccDaq.Range"/> that sets the gain on the A/D board. 
            </param>
            <param name="dataValue">Upon return, contains the value of the first A/D sample to meet the trigger criteria.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<note type="caution">
            When using this method in Windows programs, all active windows, along with keyboard and mouse activity, are locked
            until the trigger condition is satisfied. <para>Pressing <format type="bold">Ctrl-C</format>does not terminate the waiting time for an analog trigger to meet the specified
            condition. There are only two ways to terminate this call: satisfy the trigger condition, or restart the computer.</para>
            		</note><list type="bullet">
            			<item><description><format type="bold">ATrig</format> continuously reads the specified channel and compares its value to the <paramref name="trigValue"/> parameter.
            Depending on whether <paramref name="trigType"/> is set to <format type="italics">TrigAbove</format> or <format type="italics">TrigBelow</format>, it waits for the
            first A/D sample that is above or below <paramref name="trigValue"/>. The first sample that meets the
            trigger criteria is returned to <paramref name="dataValue"/>.
            </description></item><item>
            				<description>
            The maximum allowable <paramref name="chan"/> number depends on the type of A/D device being used. For Measurement Computing devices with both single-ended and differential inputs, the maximum
            allowable channel number also depends on how the device is configured. Refer to your Measurement Computing device user's guide and the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your Measurement Computing product.
            			</description>
            			</item>
            			<item>
            				<description>
            If the selected A/D device does not have a programmable gain feature,
            the <paramref name="range"/> parameter is ignored. <para>If the A/D device does have programmable gain, set the
            <paramref name="range"/> parameter to the desired A/D range. Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information
            on the supported A/D ranges of each Measurement Computing A/D device.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <seealso cref="T:MccDaq.Range"/>
            <lastupdated>5/4/2010 1:35:26 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CFreqIn(MccDaq.SignalSource,System.Int32,System.UInt16@,System.Int32@)">
            <summary>
            Measures the frequency of a signal from a 9513 counter. 
            </summary>
            <param name="signalSource">
            	<see cref="T:MccDaq.SignalSource"/> that sets the source of the signal used to calculate the frequency.</param>
            <param name="gateInterval">
            Specifies the number of milliseconds that the counter counts. </param>
            <param name="count">
            Upon return, contains the raw count.
            </param>
            <param name="freq">
            Upon return, contains the measured frequency in Hz.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="T:MccDaq.SignalSource"/> parameter options
            <para>One 9513 chip (chip 1 used): </para>
            					<list type="bullet">
            						<item>
            							<description>
            Gate1 through Gate4
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq5
            </description>
            						</item>
            						<item>
            							<description>
            CtrInput1 through CtrInput5
            </description>
            						</item>
            					</list>
            					<para>Two 9513 chips (chip 1 or chip 2 used):</para>
            					<list type="bullet">
            						<item>
            							<description>
            CtrInput1 through CtrInput10
            </description>
            						</item>
            						<item>
            							<description>
            Gate1 through Gate9 (excluding Gate5)
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq10
            </description>
            						</item>
            					</list>
            					<para>Four 9513 chips (chips 1- 4 can be used):</para>
            					<list type="bullet">
            						<item>
            							<description>
            CtrInput1 through CtrInput20
            </description>
            						</item>
            						<item>
            							<description>
            Gate1 through Gate19 (excluding gates 5, 10 and 15)
            </description>
            						</item>
            						<item>
            							<description>
            Freq1 through Freq20
            </description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            This method requires an electrical connection between counter 4 output and counter 5 gate. This connection must be made between counters 4 and 5 on the chip specified by <paramref name="signalSource"/>.
            </description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            Call <format type="bold">C9513Init</format> for each <paramref name="chipNum"/> used by this method. The values of <paramref name="foutDivider"/>, <paramref name="foutSource"/>, <paramref name="compare1"/>, <paramref name="compare2"/>, and <paramref name="timeOfDay"/> are irrelevant to this method and may be any value shown in the <see cref="M:MccDaq.MccBoard.C9513Init(System.Int32,System.Int32,MccDaq.CounterSource,MccDaq.CompareValue,MccDaq.CompareValue,MccDaq.TimeOfDay)"/> method topic.</description>
            			</item>
            		</list>
            		<list type="bullet">
            			<item>
            				<description>
            If you select an external clock source for the counters, the <paramref name="gateInterval"/>, <paramref name="count"/>, and <paramref name="freq"/> settings are only valid if the external source is 1 MHz. Otherwise, you need to scale the values according to the frequency of the external clock source. 
            <para>For example, for an external clock source of 2 MHz, increase your <paramref name="gateInterval"/> setting by a factor of 2, and also double the <paramref name="count"/> and <paramref name="freq"/> values returned when analyzing your results.</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:32:03 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn(System.Int32,System.UInt16@)">
            <summary>
            Reads the current count from a counter.
            </summary>
            <param name="counterNum">
            The counter to read current count from. Valid settings are 1 to 20, depending on the number of counters on the board.
            </param>
            <param name="count">
            Upon return, contains the counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<format type="bold">CIn</format> vs. <see cref="M:MccDaq.MccBoard.CIn32(System.Int32,System.Int32@)"/> method: Although the <format type="bold">CIn</format> and <format type="bold">CIn32</format> methods perform the same operation, <format type="bold">CIn32</format> is the preferred method to use.
            The only difference between the two is that <format type="bold">CIn</format> returns a 16-bit count value and <format type="bold">CIn32</format> returns a 32-bit value. Both <format type="bold">CIn</format> and <format type="bold">CIn32</format> can be used, but <format type="bold">CIn32</format> is required whenever you need to read count values greater than 16 bits (counts &gt; 65535). 
            </remarks>
            </comment>
            <lastupdated>5/4/2010 1:31:38 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn32(System.Int32,System.UInt32@)">
            <summary>
            Reads the current count from a counter and returns it as a 32-bit integer.
            </summary>
            <param name="counterNum">
            The  number of the counter whose current count you want to read. Valid settings are 1 to <format type="italics">n</format>, where <format type="italics">n</format> is the number of counters on the board.</param>
            <param name="count">
            Upon return, contains the current counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<see cref="M:MccDaq.MccBoard.CIn(System.Int32,System.Int16@)"/> method vs. <format type="bold">CIn32</format>: Although the <format type="bold">CIn</format> and <format type="bold">CIn32</format> methods perform the same operation, <format type="bold">CIn32</format> is the preferred method to use.
            The only difference between the two is that <format type="bold">CIn</format> returns a 16-bit count value and <format type="bold">CIn32</format> returns a 32-bit value. Both <format type="bold">CIn</format> and <format type="bold">CIn32</format> can be used, but <format type="bold">CIn32</format> is required whenever you need to read count values greater than 16 bits (counts &gt; 65535). 
            </remarks>
            </comment>
            <lastupdated>5/4/2010 3:42:14 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CIn64(System.Int32,System.UInt64@)">
            <summary>Reads the current count from a counter and returns it as a 64-bit double word.</summary>
            <param name="counterNum">
            The  number of the counter whose current count you want to read. Valid settings are 1 to <format type="italics">n</format>, where <format type="italics">n</format> is the number of counters on the board.</param>
            <param name="count">
            Upon return, contains the current counter value.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:42:28 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.UInt32)">
            <summary>
            Loads a specified counter's Load, Hold, Alarm, QuadCount, QuadPreset or PreScaler register with a count. 
            </summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. Count must be between 0 and 2<format type="superscript">resolution</format>–1 of the counter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><list type="bullet">
            			<item>
            				<description>
            					<paramref name="regNum"/> parameter values
            <para><format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg20"/></format> - Loads registers 1 to 20. Can span several chips.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg20"/></format> - Hold registers 1 to 20. Can span several chips (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip1"/></format> - Alarm register 1 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip1"/></format> - Alarm register 2 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip2"/></format> - Alarm register 1 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip2"/></format> - Alarm register 2 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip3"/></format> - Alarm register 1 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip3"/></format> - Alarm register 2 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip4"/></format> - Alarm register 1 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip4"/></format> - Alarm register 2 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount4"/></format> - Current count (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset4"/></format> - Preset register (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler4"/></format> - Prescaler register (LS7266 only).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            You cannot load a count-down-only counter with less than 2.
            </description>
            			</item>
            			<item>
            				<description>
            There are several counter types supported. Please refer to the data sheet for the registers available for a counter type.
            </description>
            			</item>
            			<item>
            				<description>When loading a counter with a starting value, the value is never loaded directly into the counter's count register. Instead, it is loaded into the "load" or "hold" register. From there, once the counter is enabled, it loads the count from the appropriate register—usually on the first valid pulse.
            			</description>
            			</item>
            			<item>
            				<description><format type="bold">CLoad</format> vs. <see cref="M:MccDaq.MccBoard.CLoad32(MccDaq.CounterRegister,System.Int32)"/> method: Although the <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> methods perform the same operation, the difference between the two is that <format type="bold">CLoad</format> loads a 16-bit count value and <format type="bold">CLoad32</format> loads a 32-bit value. Both <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> can be used, but <format type="bold">CLoad32</format> is required whenever you need to load count values greater than 16 bits (counts &gt; 65535). 
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:30:07 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad32(MccDaq.CounterRegister,System.UInt32)">
            <summary>
            Loads a specified counter's Count, Preset or Prescaler register with a count.</summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks><list type="bullet">
            			<item>
            				<description>
            					<paramref name="regNum"/> parameter values
            <para><format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.LoadReg20"/></format> - Loads registers 1 to 20. Can span several chips.</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.HoldReg20"/></format> - Hold registers 1 to 20. Can span several chips (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip1"/></format> - Alarm register 1 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip1"/></format> - Alarm register 2 of the first counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip2"/></format> - Alarm register 1 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip2"/></format> - Alarm register 2 of the 2nd counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip3"/></format> - Alarm register 1 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip3"/></format> - Alarm register 2 of the third counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm1Chip4"/></format> - Alarm register 1 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.Alarm2Chip4"/></format> - Alarm register 2 of the four counter chip. (9513 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadCount4"/></format> - Current count (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreset4"/></format> - Preset register (LS7266 only).</para>
            					<para><format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler1"/></format> to <format type="italics"><see cref="F:MccDaq.CounterRegister.QuadPreScaler4"/></format> - PreScaler register (LS7266 only).</para>
            				</description>
            			</item>
            			<item>
            				<description>
            There are several counter types supported. Please refer to the data sheet for the registers available for a counter type.
            </description>
            			</item>
            			<item>
            				<description>When loading a counter with a starting value, the value is never loaded directly into the counter's count register. Instead, it is loaded into the "load" or "hold" register. From there, once the counter is enabled, it loads the count from the appropriate register—usually on the first valid pulse.
            			</description>
            			</item>
            			<item>
            				<description><see cref="M:MccDaq.MccBoard.CLoad(MccDaq.CounterRegister,System.Int32)"/> method vs. <format type="bold">CLoad32</format>: Although the <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> methods perform the same operation, the difference between the two is that <format type="bold">CLoad</format> loads a 16-bit count value and <format type="bold">CLoad32</format> loads a 32-bit value. Both <format type="bold">CLoad</format> and <format type="bold">CLoad32</format> can be used, but <format type="bold">CLoad32</format> is required whenever you need to load count values greater than 16 bits (counts &gt; 65535). 
            			</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:29:30 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.CLoad64(MccDaq.CounterRegister,System.UInt64)">
            <summary>
            Loads a specified counter's Count, Preset or Prescaler register with a count.</summary>
            <param name="regNum">
            	<see cref="T:MccDaq.CounterRegister"/> used to set the register you that want to load with a count. 
            </param>
            <param name="loadValue">
            The  count value to load. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <lastupdated>5/4/2010 3:47:13 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DIn(MccDaq.DigitalPortType,System.UInt16@)">
            <summary>Reads a digital input port. </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to read.
            </param>
            <param name="dataValue">
            Upon return, contains the digital read from the port.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the 
            </returns>
            <comment>
            	<remarks>
            For some port types (such as 8255 ports), if the port is configured for <format type="italics"><see cref="F:MccDaq.DigitalPortDirection.DigitalOut"/></format>, this method provides readback of the last output value.
            <para>
            The size of the ports vary.
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            If it is an eight-bit port, the returned value is in the 0 - 255 range. 
            </description>
            			</item>
            			<item>
            				<description>
            If it is a four-bit port, the value is in the 0 - 15 range.
            </description>
            			</item>
            		</list>
            		<para>
            Refer to the information for your Measurement Computing device in <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn about valid <paramref name="portNum"/> settings.
            </para>
            		<para>
            The following tables show which ports and bit numbers are in which 82C55 and 8536 digital chips. The most 82C55 chips on a single Measurement Computing device is eight (8). The most 8536 chips found on a Measurement Computing device is two (2).
            </para>
            		<para>
            			<image src="DIO-ports.gif"/>
            		</para>
            		<para>
            			<image src="DIO-bits.gif"/>
            		</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:25:31 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.DOut(MccDaq.DigitalPortType,System.UInt16)">
            <summary>
            Writes a byte to a digital output port.
            </summary>
            <param name="portType">
            	<see cref="T:MccDaq.DigitalPortType"/> that sets the digital I/O port to write to.
            </param>
            <param name="dataValue">
            The digital value to write to the port.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            If the port type is not AuxPort, you must use <see cref="M:MccDaq.MccBoard.DConfigPort(MccDaq.DigitalPortType,MccDaq.DigitalPortDirection)"/> method to configure the port
            for output first.
            <para> If the port type is AuxPort, you may need to use <see cref="M:MccDaq.MccBoard.DConfigBit(MccDaq.DigitalPortType,System.Int32,MccDaq.DigitalPortDirection)"/> method or
            <format type="bold">DConfigPort</format> to configure the bit for output first.</para><para>  Refer to the device-specific information in the the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to determine if AuxPort
            should be configured for your product.</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The size of the ports vary.
            	<list type="bullet">
            						<item>
            							<description>
            If it is an eight-bit port, the output value is in the 0 - 255 range. 
            </description>
            						</item>
            						<item>
            							<description>
            If it is a four-bit port, the output value is in the 0 - 15 range.
            </description>
            						</item>
            					</list>
            					<para>
            Refer to the information for your Measurement Computing device in <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn about valid <paramref name="portType"/> settings.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>
            The following tables show which ports and bit numbers are in which 82C55 and 8536 digital chips. The most 82C55 chips on a single Measurement Computing device is eight (8). The most 8536 chips found on a Measurement Computing device is two (2).
            	<para>
            						<image src="DIO-ports.gif"/>
            					</para>
            					<para>
            						<image src="DIO-bits.gif"/>
            					</para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:24:09 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemRead(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Reads data from a Measurement Computing memory device into an array. 
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:13:18 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemRead(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Reads data from a Measurement Computing memory device into an array. 
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:13:27 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemWrite(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Writes data from an array into a Measurement Computing memory device. 
            </summary>
            <param name="dataBuffer">
            Upon return, contains a pointer to the array containg the data.
            </param>
            <param name="firstPoint">
            The index of the first point to write, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to write.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemWrite</format> method can while a DT-Connect transfer is in progress. For example, if you call <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method to start collecting A/D data in the background to a Measurement Computing memory device (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) you cannot call <format type="bold">MemWrite</format> until the <format type="bold">AInScan</format> has completed. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.</note>
            		<list type="bullet">
            			<item>
            				<description>
            To write a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format> to write each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemWrite</format> when working with large amounts of data.
            <para> 
            For example, to write 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard1.MemWrite (dataBuffer, 0, 100000)
            DaqBoard1.MemWrite (dataBuffer, FromHere, 1000000)
            DaqBoard1.MemWrite (dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be written. For example, to write data sample numbers 200 through 250, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:10:02 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemWrite(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Writes data from an array into a Measurement Computing memory device. 
            </summary>
            <param name="dataBuffer">
            Contains the array of data to write to the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to write, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            Number of data points (words) to write.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:15:00 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemReadPretrig(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Reads the pre-trigger data that was collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a Measurement Computing memory device, and then rearranges the data in the correct order (pre-trigger data first, then post-trigger data).
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            The number of data samples (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<note type="caution">
            Do not call the <format type="bold">MemReadPretrig</format> method while a DT-Connect transfer is in progress. For example, if you call the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method to start collecting A/D data in the background to a Measurement Computing memory device (with the <format type="italics"><see cref="F:MccDaq.ScanOptions.DtConnect"/></format> + <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format> options) you cannot call <format type="bold">MemReadPretrig</format> until the <format type="bold">APretrig</format> method has completed. If you do, a <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.DtActive"/></format> error occurs.</note>
            		<list type="bullet">
            			<item>
            				<description>
            Only use <format type="bold">MemReadPretrig</format> to retrieve data that has been collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method with <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtMemory"/></format> enabled in the <paramref name="options"/> parameter. After each <format type="bold">APretrig</format> call, unload all data from the Measurement Computing memory device with this method. If any more data is sent to the memory device, then the pre-trigger data is lost.
            </description>
            			</item>
            			<item>
            				<description>
            To read a large amount of data in small chunks from a Measurement Computing memory device, set <paramref name="firstPoint"/> to <format type="italics">FromHere</format> to read each successive chunk. Using <format type="italics">FromHere</format> speeds up the operation of <format type="bold">MemRead</format> when working with large amounts of data.
            <para> 
            For example, to read 300,000 points in 100,000 point chunks, the calls would look like this:
            </para>
            					<code lang="VB.NET">
            DaqBoard0.MemReadPretrig(dataBuffer, 0, 100000)
            DaqBoard0.MemReadPretrig(dataBuffer, FromHere, 1000000)
            DaqBoard0.MemReadPretrig(dataBuffer, FromHere, 1000000)
            </code>
            				</description>
            			</item>
            			<item>
            				<description>
            Use the <paramref name="firstPoint"/> parameter to specify the first point to be read. For example, to read data sample numbers 200 through 249, set <paramref name="firstPoint"/> = 200 and <paramref name="numPoints"/> = 50.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:11:57 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.MemReadPretrig(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Reads the pre-trigger data that was collected with the <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method from a Measurement Computing memory device, and then rearranges the data in the correct order (pre-trigger data first, then post-trigger data).
            </summary>
            <param name="dataBuffer">
            Upon return, contains the array of data read from the Measurement Computing memory device.
            </param>
            <param name="firstPoint">
            The index of the first point to read, or <format type="italics"><see cref="F:MccDaq.MccBoard.FromHere"/></format>.
            </param>
            <param name="numPoints">
            The number of data samples (words) to read.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>5/4/2010 4:14:19 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ToEngUnits(MccDaq.Range,System.UInt16,System.Single@)">
            <summary>
            Converts an integer A/D count value to an equivalent single-precision voltage (or current) value.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the A/D voltage (or current) range.
            </param>
            <param name="dataVal">
            Integer A/D count returned from an A/D board.
            </param>
            <param name="engUnits">
            Upon return, contains the single-precision voltage (or current) value that is equivalent to <paramref name="dataVal"/>. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            Some Measurement Computing A/D devices have programmable voltage ranges, while others set the voltage range via switches. In either case, the selected range must be passed to this method. Refer to the <see cref="T:MccDaq.Range"/> hyperlink in the <paramref name="range"/> parameter description.
            <para>Some Measurement Computing A/D devices supports different voltage and/or current ranges. Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which ranges your device supports.</para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:18:39 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.ToEngUnits32(MccDaq.Range,System.UInt32,System.Double@)">
            <summary>
            Converts an integer count value to an equivalent double-precision voltage (or current) value.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range" crefType="Unqualified"/> that sets the A/D voltage (or current) value.
            </param>
            <param name="dataVal">
            Integer A/D count returned from the A/D board.
            </param>
            <param name="engUnits">
            Upon return, contains the double-precision voltage (or current) value that is equivalent to <format type="italics">dataVal</format>.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            This method is typically used to obtain a voltage (or current) value from data received from an A/D with methods such as <see cref="M:MccDaq.MccBoard.AIn32(System.Int32,MccDaq.Range,System.Int32@,System.Int32)" crefType="Unqualified"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use this method for devices with a resolution of 20-bits or more.
            <para>
            The default resolution of this method is 32-bits, so if the device has neither analog input nor analog output, the result is a 32-bit conversion.
            </para>
            					<para>If the device has both analog input and analog output, the resolution and transfer function of the D/A converter on the device is used for the conversion.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:18:01 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.UInt16@)">
            <summary>
            Converts a single-precision voltage (or current) in engineering units to an integer D/A count value for output to a D/A.
            </summary>
            <param name="range">
            	<see cref="T:MccDaq.Range"/> that sets the D/A voltage (or current) range.
            </param>
            <param name="engUnits">
            The single-precision voltage (or current) value used to to set the D/A. Set this parameter within the range specified by the <paramref name="range"/> parameter.
            </param>
            <param name="dataVal">
            Upon return, contains an integer D/A count that is equivalent to the <paramref name="engUnits"/> parameter.
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            Some Measurement Computing D/A devices have programmable voltage ranges, while others set the voltage range via switches. In either case, the selected range must be passed to this method. Refer to the <see cref="T:MccDaq.Range"/> hyperlink in the <paramref name="range"/> parameter description.
            <para>
            Each Measurement Computing D/A device supports different voltage and/or current ranges. Refer to your Measurement Computing device user's guide and to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> to learn which ranges your device supports.
            </para>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:20:11 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.SetTrigger(MccDaq.TriggerType,System.UInt16,System.UInt16)">
            <summary>
            Selects the trigger source and sets up the parameters used to initiate analog-to-digital conversions for the <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method (if the <format type="italics"><see cref="F:MccDaq.ScanOptions.ExtTrigger"/></format> option is selected), <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, and <see cref="M:MccDaq.MccBoard.FilePretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.String,MccDaq.ScanOptions)"/> methods.
            </summary>
            <param name="trigType">
            	<see cref="T:MccDaq.TriggerType"/> that sets the type of triggering based on the external trigger source
            </param>
            <param name="lowThreshold">
            The low threshold used when the trigger input is analog.
            </param>
            <param name="highThreshold">
            The high threshold used when the trigger input is analog.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<see cref="T:MccDaq.TriggerType"/> parameter options:
            <para>
            						<image src="TrigTypes.gif"/>
            					</para>
            				</description>
            			</item>
            			<item>
            				<description>
            The <paramref name="lowThreshold"/> and <paramref name="highThreshold"/> ranges depend upon the resolution of the trigger circuitry. Must be 0 to 255 for 8-bit trigger circuits, 0 to 4095 for 12-bit trigger circuits, and 0 to 65535 for 16-bit trigger circuits.
            <para>
            If you are using signed integer types, the thresholds range from –32768 to 32767 for 16-bit Measurement Computing devices, instead of from 0 to 65535. In this case, the unsigned value of 65535 corresponds to a value of –1, 65534 corresponds to –2, …, 32768 corresponds to –32768.
            </para>
            					<para>
            For most Measurement Computing devices that support analog triggering, you can pass the required trigger voltage level and the appropriate Range to <see cref="M:MccDaq.MccBoard.FromEngUnits(MccDaq.Range,System.Single,System.Int16@)"/> method to calculate the <paramref name="highThreshold"/> and <paramref name="lowThreshold"/> values. 
            </para>
            					<para>
            For some Measurement Computing devices (refer to the "Analog Input Boards" chapter in the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format>), you must manually calculate the threshold by first calculating the least significant bit (LSB) for a particular range for the trigger resolution of your device. You then use the LSB to find the threshold in counts based on an analog voltage trigger threshold.
            </para>
            					<para>
            To calculate the threshold, do the following:
            <list type="number">
            							<item>
            								<description>
            Calculate the LSB by dividing the full scale range (FSR) by 2<format type="superscript">resolution</format>. FSR is the entire span from – FS to +FS of your Measurement Computing device for a particular range. For example, the full scale range of ±10 V is 20 V.
            </description>
            							</item>
            							<item>
            								<description>
            Calculate how many times you need to add the LSB calculated in step 1 to the negative full scale (–FS) to reach the trigger threshold value. 
            </description>
            							</item>
            						</list>
            						<para>The maximum threshold value is 2<format type="superscript">resolution</format> – 1. The formula is shown here:</para>
            						<para><format type="monospace">Abs (–FS – threshold in volts) ÷ (LSB) = threshold in counts</format></para>
            						<para>Here are two examples that use this formula—one for 8-bit trigger resolution and one for 12-bit trigger resolution.</para>
            						<list type="bullet">
            							<item>
            								<description>
            8-bit example using the ±10 V range with a –5 V threshold:
            <para>Calculate LSB: LSB = 20 ÷ 2<format type="superscript">8</format> = 20 ÷ 256 = 0.078125</para>
            									<para>Calculate threshold: Abs(–10 – (–5)) ÷ .078125 = 5 ÷ 0.078125 = 64 (round this result if it is not an integer). A count of 64 translates to a voltage threshold of –5.0 V.</para>
            								</description>
            							</item>
            							<item>
            								<description>
            12-bit example using the ±10 V range with a +1 V threshold:
            <para>
            Calculate LSB: LSB = 20 ÷ 2<format type="superscript">12</format> = 20 ÷ 4096 = 0.00488
            </para>
            									<para>
            Calculate threshold: Abs(–10 – 1) ÷ .00488 = 11 ÷ 0.00488 = 2254 (rounded from 2254.1). A count of 2254 translates to a voltage threshold of 0.99952 V.
            </para>
            								</description>
            							</item>
            						</list>
            					</para>
            					<para>
            Refer to the <format type="italics"><see href="http://www.measurementcomputing.com/PDFmanuals/sm-ul-user-guide.pdf">Universal Library User's Guide</see></format> for information on your Measurement Computing device.
            </para>
            				</description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 12:20:57 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.UInt32,MccDaq.EventCallback,System.IntPtr)">
            <summary>
            Binds one or more event conditions to a user-defined callback function.
            Upon detection of an event condition, the user-defined function is invoked with Measurement Computing device- and event-specific data. 
            </summary>
            <param name="eventType">
            	<see cref="T:MccDaq.EventType"/> that sets one or more event conditions to bind to the user-defined callback function. 
            </param>
            <param name="eventParameter">
            Sets additional data needed to specify some event conditions, such as the  
            <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> event. 
            </param>
            <param name="callbackFunc">
            Specifies a delegate type that is the user-defined callback function to handle the <paramref name="eventType"/> parameter 
            type(s). 
            </param>
            <param name="userData">
            Pointer to user-defined data that is passed to the <see cref="T:MccDaq.EventCallback"/> delegate. 
            </param>
            <returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation</returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> detects event conditions in response to interrupts. Therefore, it is typically used with interrupt-driven processes such as <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method.
            </description>
            			</item>
            			<item><description><see cref="T:MccDaq.EventType"/> parameter options
            <para>You can set more than one <paramref name="eventType"/> options by bitwise <format type="italics">OR</format>ing the <paramref name="eventType"/>. If you specify an event that has not been enabled, no error occurs.</para>
            					<para><format type="italics"><see cref="F:MccDaq.EventType.OnScanError"/></format> - Generates an event that occurs when a driver error is detected during <format type="italics"><see cref="F:MccDaq.ScanOptions.Background"/></format>  input and output scans. This includes <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Overrun"/></format>, <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.Underrun"/></format>, and <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.TooFew"/></format> errors.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnExternalInterrupt"/></format> - For some Measurement Computing digital and counter devices, this option generates an event that occurs when a pulse at the External Interrupt pin is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnPretrigger"/></format> - For <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, generates an event that occurs when the first trigger is detected.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format> - Generates an event that occurs when the number of samples acquired during an analog input scan increases by <paramref name="eventParam"/> (<see cref="M:MccDaq.MccBoard.EnableEvent(MccDaq.EventType,System.Int32,MccDaq.EventCallback,System.IntPtr)"/> method parameter) samples or more. 
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAiScan"/></format> - Generates an event that occurs upon completion or fatal error of an <see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method or <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            					<para>
            						<format type="italics"><see cref="F:MccDaq.EventType.OnEndOfAoScan"/></format> - Generates an event that occurs upon completion or fatal error of an <format type="bold">AOutScan</format>. This event <format type="italics">does not occur </format>when scans are aborted using <format type="bold">StopBackground</format>.
            </para>
            				</description>
            			</item>
            			<item>
            				<description>For <format type="italics"><see cref="F:MccDaq.EventType.OnDataAvailable"/></format>  events, <paramref name="eventParameter"/> is used to determine 
            the minimum number of samples to acquire during an analog input scan before generating the event. 
            <para>Most event conditions ignore this value. </para>
            				</description>
            			</item>
            			<item>
            				<description>
            		
            A delegate is a data structure that refers either to a static method, or to a 
            class instance and an instance method of that class. 
            The <paramref name="callbackFunc"/> parameter needs the same parameters as the <see cref="T:MccDaq.EventCallback"/> delegate 
            declaration. 
            </description>
            			</item>
            			<item>
            				<description>
            					<format type="bold">EnableEvent</format> cannot be called while any background operations (<see cref="M:MccDaq.MccBoard.AInScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, <see cref="M:MccDaq.MccBoard.APretrig(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method, or <see cref="M:MccDaq.MccBoard.AOutScan(System.Int32,System.Int32,System.Int32,System.Int32@,MccDaq.Range,System.Int32,MccDaq.ScanOptions)"/> method) are active. If a background operation is in progress, when <format type="bold">EnableEvent</format> is called, it returns an <format type="italics"><see cref="F:MccDaq.ErrorInfo.ErrorCode.AlreadyActive"/></format> error. You should perform a <see cref="M:MccDaq.MccBoard.StopBackground(MccDaq.FunctionType)"/> before calling <format type="bold">EnableEvent</format>.
            <para>Events can be generated no faster than the user callback function can handle them. If an event type becomes multi-signaled before the event handler returns, events are merged, such that the event handler is called once per event type, and the event handler is supplied with the event data corresponding to the latest event. </para>In addition, if more than one event type becomes signaled, the event handler for each event type is called in the same order in which they are listed above.
            Events are generated while handling Measurement Computing device-generated interrupts. As a consequence, using <format type="bold">StopBackground</format> to abort background operations does not generate <format type="italics">OnEndOfAoScan</format> or <format type="italics">OnEndOfAiScan</format> events. However, the event handlers can be called directly immediately after calling <format type="bold">StopBackground</format>.
            </description>
            			</item>
            			<item>
            				<description>
            The <paramref name="userData"/> 
            parameter is <format type="italics">not</format> de-referenced by the library or its drivers; therefore, you can pass it a 
            NULL pointer.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:22:42 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.PulseOutStart(System.Int32,System.Double@,System.Double@,System.UInt32,System.Double@,MccDaq.IdleState,MccDaq.PulseOutOptions)">
            <summary>
            Starts a timer to generate digital pulses at a specified frequency and duty cycle. Use <see cref="M:MccDaq.MccBoard.PulseOutStop(System.Int32)" crefType="Unqualified"/> to stop the output.
            </summary>
            <param name="timerNum">
            The timer to output the digital pulse from. Valid values are zero up to the number of timers - 1 on the board.
            </param>
            <param name="frequency">
            The desired square wave frequency. The timer clock is divided down by integer values to produce the frequency. Upon return, contains the actual frequency that is output. Valid values are dependent on the timer's clock and the the timer resolution.
            </param>
            <param name="dutyCycle">
            The width of the pulse divided by the pulse period.
            </param>
            <param name="pulseCount">
            The number of pulses to generate.
            </param>
            <param name="initialDelay">
            The amount of time to delay before starting the timer output after enabling the output.
            </param>
            <param name="idleState">
            	<see cref="T:MccDaq.IdleState" crefType="Unqualified"/> that sets the resting state of the output.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo" crefType="Unqualified"/> object that indicates the status of the operation.
            </returns>
            <comment>
            	<remarks>
            		<list type="bullet">
            			<item>
            				<description>
            				The <format type="italics">dutyCycle</format> ratio is used with the <format type="italics">frequency</format> value to determine the pulse width and the interval between pulses.
            </description>
            			</item>
            			<item>
            				<description>
            Set <format type="italics">pulseCount</format> to zero to continuously generate pulses until <see cref="M:MccDaq.MccBoard.PulseOutStop(System.Int32)" crefType="Unqualified"/> is called.
            </description>
            			</item>
            		</list>
            	</remarks>
            </comment>
            <lastupdated>5/4/2010 1:08:37 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.SetCalCoeff(MccDaq.FunctionType,System.Int32,MccDaq.Range,System.Int32,System.Int32,MccDaq.OptionState)">
            <exclude/>
            <lastupdated>12/31/2008 11:01:16 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.GetCalCoeff(MccDaq.FunctionType,System.Int32,MccDaq.Range,System.Int32,System.Int32@)">
            <exclude/>
            <lastupdated>12/31/2008 10:57:59 AM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.MccBoard.TEDSRead(System.Int32,System.Byte[],System.Int32@,MccDaq.TEDSReadOptions)">
            <summary>
            Reads data from a TEDS sensor into an array.
            </summary>
            <param name="chan">
            A/D channel number.
            </param>
            <param name="dataBuffer">
            Pointer to the data array.
            </param>
            <param name="count">
            Number of data points to read.
            </param>
            <param name="options">
            Reserved for future use.
            </param>
            <returns>
            	<returns>An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.</returns>
            </returns>
            <lastupdated>5/4/2010 4:17:25 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.BoardNum">
            <summary>
            Gets the number assigned by <format type="italics">Insta</format>Cal to a Measurement Computing device associated with an instance of the <see cref="T:MccDaq.MccBoard"/> class.
            </summary>
            <value>Number assigned to a Measurement Computing device.
            </value>
            <lastupdated>2/6/2006 3:28:38 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.BoardName">
            <summary>
            Gets the name of a Measurement Computing device associated with an instance of the <see cref="T:MccDaq.MccBoard"/> class.
            </summary>
            <value>
            The name of an <format type="bold">MccBoard</format> object that represents a Measurement Computing device.</value>
            <lastupdated>4/6/2006 2:15:29 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.BoardConfig">
            <summary>
            Gets an instance of the <see cref="T:MccDaq.cBoardConfig"/> class. Use this property to call various Measurement Computing device
            configuration methods.
            </summary>
            <value>
            A <see cref="T:MccDaq.cBoardConfig"/> object that represents a Measurement Computing device.
            </value>
            <remarks>
            	<para>Before you can use this property to call any <see cref="T:MccDaq.cBoardConfig"/> methods, you first must create an instance of an <see cref="T:MccDaq.MccBoard"/>
            object.</para><example>
            		<code lang="VB.NET">
            Dim MyBoard As MccDaq.MccBoard 
             
            MyBoard = New MccDaq.MccBoard(MyBoardNum)
            </code>
            	</example>
            	<para>To call a method from the <format type="bold">BoardConfig </format> property, use the notation shown below.</para>
            	<example>
            		<code lang="VB.NET">
            MyErrorInfo = MyBoard.BoardConfig.GetBoardType(MyBoardType)
            </code>
            	</example>
            </remarks>
            <lastupdated>3/28/2006 7:42:02 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.DioConfig">
            <summary>
            Gets an instance of the <see cref="T:MccDaq.cDioConfig"/> method class. Use this property to call various Measurement Computing digital I/O device
            configuration methods.
            </summary>
            <value>
            A <see cref="T:MccDaq.cDioConfig"/> method object that represents a Measurement Computing digital I/O device.
            </value>
            <remarks>
            	<para>The <see cref="T:MccDaq.cDioConfig"/> method configuration methods are accessible only from the <format type="bold">DioConfig</format> property.
            Before you call this method, you need to create an instance of an <see cref="T:MccDaq.MccBoard"/> method object.</para>
            	<code lang="VB.NET">
            Dim MyBoard As MccDaq.MccBoard 
            MyBoard = New MccDaq.MccBoard(MyBoardNum)
            </code>
            To call these methods from the <format type="bold">DioConfig</format> property, use the notation shown in the example below.
            <code lang="VB.NET">
            MyErrorInfo = MyBoard.DioConfig.GetNumBits(MyDevNum, MyNumBits)
            </code>
            </remarks>
            <lastupdated>3/9/2006 1:37:14 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.CtrConfig">
            <summary>
            Gets an instance of the <see cref="T:MccDaq.cCtrConfig"/> method class. Use this property to call a counter
            chip configuration method for a Measurement Computing device.
            </summary>
            <value>A <see cref="T:MccDaq.cCtrConfig"/> method object that represents a Measurement Computing counter device.
            </value>
            <remarks>
            	<para>The <see cref="M:MccDaq.cCtrConfig.GetCtrType(System.Int32,System.Int32@)"/> method configuration method is accessible only from the <format type="bold">CtrConfig</format> property.
            Before you call this method, you need to create an instance of an <see cref="T:MccDaq.MccBoard"/> method object.</para>
            	<code lang="VB.NET">
            MyBoard As MccDaq.MccBoard 
            MyBoard = New MccDaq.MccBoard(MyBoardNum)
            </code>
            To call this method from the <format type="bold">CtrConfig </format> property, use the notation shown below.
            <code lang="VB.NET">
            MyErrorInfo = MyBoard.CtrConfig.GetCtrType(MyCtrNum, MyCtrType)
            </code>
            </remarks>
            <lastupdated>3/9/2006 1:38:06 PM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:MccDaq.MccBoard.ExpansionConfig">
            <summary>
            Gets an instance of the <see cref="T:MccDaq.cExpansionConfig"/> method class. Use this property to call various Measurement Computing expansion device
            configuration methods.
            </summary>
            <value>
            A <see cref="T:MccDaq.cExpansionConfig"/> method object that represents a Measurement Computing expansion device.
            </value>
            <remarks>
            	<para>The <see cref="T:MccDaq.cExpansionConfig"/> method configuration methods are accessible only from the <format type="bold">ExpansionConfig</format> property.
            Before you call this method, you need to create an instance of an <see cref="T:MccDaq.MccBoard"/> method object.</para>
            	<code lang="VB.NET">
            Dim MyBoard As MccDaq.MccBoard 
            MyBoard = New MccDaq.MccBoard(MyBoardNum)
            </code>
            To call these methods from the <format type="bold">ExpansionConfig</format> property, use the notation shown in the example below.
            <code lang="VB.NET">
            MyErrorInfo = MyBoard.ExpansionConfig.GetBoardType(MyExpNum, MyExpType)
            </code>
            </remarks>
            <lastupdated>5/4/2010 1:50:34 PM</lastupdated>
            <updatedby>Janet Sigren</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:MccDaq.cCtrConfig">
            <summary>
            Provides a method for getting the type of counter device on a Measurement Computing device.
            </summary>
            <remarks>
            	All instances of <format type="bold">cCtrConfig</format> are derived from the MccBoard.<see cref="P:MccDaq.MccBoard.CtrConfig"/> property.
            </remarks>
            <threadsafety safety="unsafe"/>
            <example>
            	<code lang="VB.NET">
            Dim Status As ErrorInfo
            Dim Board0 As MccBoard
            Dim configVal As Integer
            Dim devNum As Integer = 1
             
            Board0 = New MccBoard(0)
            Status = Board0.GetCtrType(devNum, configVal)
            </code>
            </example>
            <example>
            	<code lang="C#">
            MccBoard board0;
            ErrorInfo status;
            MccBoard board0=new MccBoard (0);
            int devNum=1;
            int configVal ;
             
            Status=Board0.CtrConfig.GetCtrType(devNum, out configVal);
             </code>
            </example>
            <seealso cref="P:MccDaq.MccBoard.CtrConfig"/>
            <lastupdated>3/7/2006 10:43:45 AM</lastupdated>
            <updatedby>JCM</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cCtrConfig.#ctor(MccDaq.MccBoard)">
            <summary>
            Creates a <see cref="T:MccDaq.cCtrConfig"/>.
            </summary>
            <param name="mccBoard">
            	<see cref="T:MccDaq.MccBoard"/> instance whose counter configuration you want to set and get.
            </param>
            <lastupdated>10/18/2006 2:36:59 PM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:MccDaq.cCtrConfig.GetCtrType(System.Int32,System.Int32@)">
            <summary>
            Gets a number that indicates the type of Measurement Computing counter device.
            </summary>
            <param name="devNum">
            Upon return, the number of the Measurement Computing counter device (as assigned by <format type="italics">Insta</format>Cal).
            </param>
            <param name="configVal">
            Upon return, contains a number indicating the type of counter.
            <list type="bullet">
            		<item>
            			<description>
            				<format type="italics">1</format> = 8254 counter
            </description>
            		</item>
            		<item>
            			<description>
            				<format type="italics">2</format> = 9513 counter
            </description>
            		</item>
            		<item>
            			<description>
            				<format type="italics">3</format> = 8536 counter
            </description>
            		</item>
            		<item>
            			<description>
            				<format type="italics">4</format> = 7266 counter
            </description>
            		</item>
            		<item>
            			<description>
            				<format type="italics">5</format> = event counter
            </description>
            		</item>
            	</list>
            </param>
            <returns>
            An <see cref="T:MccDaq.ErrorInfo"/> object that indicates the status of the operation.
            </returns>
            <lastupdated>10/18/2006 11:33:42 AM</lastupdated>
            <updatedby>Jim Monahan</updatedby>
            <approved>False</approved>
        </member>
    </members>
</doc>
